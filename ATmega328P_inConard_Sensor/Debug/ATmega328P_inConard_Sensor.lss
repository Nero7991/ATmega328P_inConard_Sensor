
ATmega328P_inConard_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00001ba2  00001c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000113  008001ac  008001ac  00001ce2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ce2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a8  00000000  00000000  00001d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000700a  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001628  00000000  00000000  00009306  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e66  00000000  00000000  0000a92e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012f4  00000000  00000000  0000d794  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002461  00000000  00000000  0000ea88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004182  00000000  00000000  00010ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000560  00000000  00000000  0001506b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_1>
       8:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__vector_2>
       c:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__vector_3>
      10:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__vector_4>
      14:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__vector_5>
      18:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_6>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      2c:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	49 6e       	ori	r20, 0xE9	; 233
      6a:	69 74       	andi	r22, 0x49	; 73
      6c:	69 61       	ori	r22, 0x19	; 25
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	7a 69       	ori	r23, 0x9A	; 154
      72:	6e 67       	ori	r22, 0x7E	; 126
      74:	20 73       	andi	r18, 0x30	; 48
      76:	75 63       	ori	r23, 0x35	; 53
      78:	63 65       	ori	r22, 0x53	; 83
      7a:	73 73       	andi	r23, 0x33	; 51
      7c:	66 75       	andi	r22, 0x56	; 86
      7e:	6c 2e       	mov	r6, r28
	...

00000081 <_ZZN8NRF24L017setModeEbE3__c_1>:
      81:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
      91:	61 69 6c 65 64 20 66 6f 72 20 6e 52 46 32 34 4c     ailed for nRF24L
      a1:	30 31 2e 20 43 68 65 63 6b 20 63 6f 6e 6e 65 63     01. Check connec
      b1:	74 69 6f 6e 73 00                                   tions.

000000b7 <_ZZN8NRF24L017setModeEbE3__c_0>:
      b7:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      c7:	31 20 69 6e 20 54 72 61 6e 73 6d 69 74 20 4d 6f     1 in Transmit Mo
      d7:	64 65 2e 2e 2e 00                                   de....

000000dd <_ZZN8NRF24L017setModeEbE3__c>:
      dd:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      ed:	31 20 69 6e 20 52 65 63 65 69 76 65 20 4d 6f 64     1 in Receive Mod
      fd:	65 2e 2e 2e 00                                      e....

00000102 <_ZZN8NRF24L018testChipEvE3__c_1>:
     102:	54 65 73 74 69 6e 67 20 73 75 63 63 65 73 73 66     Testing successf
     112:	75 6c 2e 00                                         ul..

00000116 <_ZZN8NRF24L018testChipEvE3__c_0>:
     116:	54 65 73 74 69 6e 67 20 66 61 69 6c 65 64 20 66     Testing failed f
     126:	6f 72 20 6e 52 46 2e 20 43 68 65 63 6b 20 63 6f     or nRF. Check co
     136:	6e 6e 65 63 74 69 6f 6e 73 00                       nnections.

00000140 <_ZZN8NRF24L018testChipEvE3__c>:
     140:	54 65 73 74 69 6e 67 20 6e 52 46 2e 2e 2e 00        Testing nRF....

0000014f <_ZZN8NRF24L0110initializeEvE3__c_0>:
     14f:	4d 61 73 74 65 72 20 52 58 20 50 61 79 6c 6f 61     Master RX Payloa
     15f:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     16f:	3a 20 00                                            : .

00000172 <_ZZN8NRF24L0110initializeEvE3__c>:
     172:	4d 61 73 74 65 72 20 54 58 20 50 61 79 6c 6f 61     Master TX Payloa
     182:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     192:	3a 20 00                                            : .

00000195 <_ZZ4mainE3__c_0>:
     195:	44 6f 6e 65 00                                      Done.

0000019a <_ZZ4mainE3__c>:
     19a:	50 6f 77 65 72 69 6e 67 20 6f 6e 2e 2e 2e 00 00     Powering on.....

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	d8 e0       	ldi	r29, 0x08	; 8
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	e2 ea       	ldi	r30, 0xA2	; 162
     1be:	fb e1       	ldi	r31, 0x1B	; 27
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	ac 3a       	cpi	r26, 0xAC	; 172
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	22 e0       	ldi	r18, 0x02	; 2
     1ce:	ac ea       	ldi	r26, 0xAC	; 172
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	af 3b       	cpi	r26, 0xBF	; 191
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <main>
     1e0:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <_Z15getReadyToSleepv>:
	MCUSR &= ~(1<<WDRF);
	/* Start timed sequence */
	WDTCR = (1<<WDCE) | (1<<WDE);
	/* Set new prescaler (time-out) value = 64K cycles (~0.5 s) */
	WDTCR = prescale;
	asm volatile("sei"::);
     1e8:	8f ea       	ldi	r24, 0xAF	; 175
     1ea:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     1ee:	08 95       	ret

000001f0 <_Z6wakeUpv>:
     1f0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     1f4:	08 95       	ret

000001f6 <_Z10allowSleepb>:
     1f6:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
     1fa:	08 95       	ret

000001fc <_Z12sleepAllowedv>:
     1fc:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
     200:	08 95       	ret

00000202 <_Z14SPI_MasterInitv>:
     202:	24 98       	cbi	0x04, 4	; 4
     204:	84 b1       	in	r24, 0x04	; 4
     206:	8c 62       	ori	r24, 0x2C	; 44
     208:	84 b9       	out	0x04, r24	; 4
     20a:	2a 9a       	sbi	0x05, 2	; 5
     20c:	8c b5       	in	r24, 0x2c	; 44
     20e:	82 65       	ori	r24, 0x52	; 82
     210:	8c bd       	out	0x2c, r24	; 44
     212:	08 95       	ret

00000214 <_Z18SPI_MasterTransmitc>:
     214:	8e bd       	out	0x2e, r24	; 46
     216:	0d b4       	in	r0, 0x2d	; 45
     218:	07 fe       	sbrs	r0, 7
     21a:	fd cf       	rjmp	.-6      	; 0x216 <_Z18SPI_MasterTransmitc+0x2>
     21c:	8e b5       	in	r24, 0x2e	; 46
     21e:	08 95       	ret

00000220 <_Z11Init_CTC_T1hj>:
     220:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     224:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     228:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     22c:	87 70       	andi	r24, 0x07	; 7
     22e:	88 60       	ori	r24, 0x08	; 8
     230:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     23a:	78 94       	sei
     23c:	08 95       	ret

0000023e <_Z11setPinStatehhb>:
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	e9 f0       	breq	.+58     	; 0x27c <_Z11setPinStatehhb+0x3e>
     242:	18 f0       	brcs	.+6      	; 0x24a <_Z11setPinStatehhb+0xc>
     244:	82 30       	cpi	r24, 0x02	; 2
     246:	99 f1       	breq	.+102    	; 0x2ae <_Z11setPinStatehhb+0x70>
     248:	08 95       	ret
     24a:	44 23       	and	r20, r20
     24c:	59 f0       	breq	.+22     	; 0x264 <_Z11setPinStatehhb+0x26>
     24e:	25 b1       	in	r18, 0x05	; 5
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	02 c0       	rjmp	.+4      	; 0x25a <_Z11setPinStatehhb+0x1c>
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	6a 95       	dec	r22
     25c:	e2 f7       	brpl	.-8      	; 0x256 <_Z11setPinStatehhb+0x18>
     25e:	82 2b       	or	r24, r18
     260:	85 b9       	out	0x05, r24	; 5
     262:	08 95       	ret
     264:	25 b1       	in	r18, 0x05	; 5
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <_Z11setPinStatehhb+0x32>
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	6a 95       	dec	r22
     272:	e2 f7       	brpl	.-8      	; 0x26c <_Z11setPinStatehhb+0x2e>
     274:	80 95       	com	r24
     276:	82 23       	and	r24, r18
     278:	85 b9       	out	0x05, r24	; 5
     27a:	08 95       	ret
     27c:	44 23       	and	r20, r20
     27e:	59 f0       	breq	.+22     	; 0x296 <_Z11setPinStatehhb+0x58>
     280:	28 b1       	in	r18, 0x08	; 8
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <_Z11setPinStatehhb+0x4e>
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	6a 95       	dec	r22
     28e:	e2 f7       	brpl	.-8      	; 0x288 <_Z11setPinStatehhb+0x4a>
     290:	82 2b       	or	r24, r18
     292:	88 b9       	out	0x08, r24	; 8
     294:	08 95       	ret
     296:	28 b1       	in	r18, 0x08	; 8
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <_Z11setPinStatehhb+0x64>
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	6a 95       	dec	r22
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <_Z11setPinStatehhb+0x60>
     2a6:	80 95       	com	r24
     2a8:	82 23       	and	r24, r18
     2aa:	88 b9       	out	0x08, r24	; 8
     2ac:	08 95       	ret
     2ae:	44 23       	and	r20, r20
     2b0:	59 f0       	breq	.+22     	; 0x2c8 <_Z11setPinStatehhb+0x8a>
     2b2:	2b b1       	in	r18, 0x0b	; 11
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <_Z11setPinStatehhb+0x80>
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	6a 95       	dec	r22
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <_Z11setPinStatehhb+0x7c>
     2c2:	82 2b       	or	r24, r18
     2c4:	8b b9       	out	0x0b, r24	; 11
     2c6:	08 95       	ret
     2c8:	2b b1       	in	r18, 0x0b	; 11
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <_Z11setPinStatehhb+0x96>
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	6a 95       	dec	r22
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <_Z11setPinStatehhb+0x92>
     2d8:	80 95       	com	r24
     2da:	82 23       	and	r24, r18
     2dc:	8b b9       	out	0x0b, r24	; 11
     2de:	08 95       	ret

000002e0 <_Z15setPinDirectionhhb>:
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	e9 f0       	breq	.+58     	; 0x31e <_Z15setPinDirectionhhb+0x3e>
     2e4:	18 f0       	brcs	.+6      	; 0x2ec <_Z15setPinDirectionhhb+0xc>
     2e6:	82 30       	cpi	r24, 0x02	; 2
     2e8:	99 f1       	breq	.+102    	; 0x350 <_Z15setPinDirectionhhb+0x70>
     2ea:	08 95       	ret
     2ec:	44 23       	and	r20, r20
     2ee:	59 f0       	breq	.+22     	; 0x306 <_Z15setPinDirectionhhb+0x26>
     2f0:	24 b1       	in	r18, 0x04	; 4
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <_Z15setPinDirectionhhb+0x1c>
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	6a 95       	dec	r22
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <_Z15setPinDirectionhhb+0x18>
     300:	82 2b       	or	r24, r18
     302:	84 b9       	out	0x04, r24	; 4
     304:	08 95       	ret
     306:	24 b1       	in	r18, 0x04	; 4
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	02 c0       	rjmp	.+4      	; 0x312 <_Z15setPinDirectionhhb+0x32>
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	6a 95       	dec	r22
     314:	e2 f7       	brpl	.-8      	; 0x30e <_Z15setPinDirectionhhb+0x2e>
     316:	80 95       	com	r24
     318:	82 23       	and	r24, r18
     31a:	84 b9       	out	0x04, r24	; 4
     31c:	08 95       	ret
     31e:	44 23       	and	r20, r20
     320:	59 f0       	breq	.+22     	; 0x338 <_Z15setPinDirectionhhb+0x58>
     322:	27 b1       	in	r18, 0x07	; 7
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <_Z15setPinDirectionhhb+0x4e>
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	6a 95       	dec	r22
     330:	e2 f7       	brpl	.-8      	; 0x32a <_Z15setPinDirectionhhb+0x4a>
     332:	82 2b       	or	r24, r18
     334:	87 b9       	out	0x07, r24	; 7
     336:	08 95       	ret
     338:	27 b1       	in	r18, 0x07	; 7
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	02 c0       	rjmp	.+4      	; 0x344 <_Z15setPinDirectionhhb+0x64>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	6a 95       	dec	r22
     346:	e2 f7       	brpl	.-8      	; 0x340 <_Z15setPinDirectionhhb+0x60>
     348:	80 95       	com	r24
     34a:	82 23       	and	r24, r18
     34c:	87 b9       	out	0x07, r24	; 7
     34e:	08 95       	ret
     350:	44 23       	and	r20, r20
     352:	59 f0       	breq	.+22     	; 0x36a <_Z15setPinDirectionhhb+0x8a>
     354:	2a b1       	in	r18, 0x0a	; 10
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	02 c0       	rjmp	.+4      	; 0x360 <_Z15setPinDirectionhhb+0x80>
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	6a 95       	dec	r22
     362:	e2 f7       	brpl	.-8      	; 0x35c <_Z15setPinDirectionhhb+0x7c>
     364:	82 2b       	or	r24, r18
     366:	8a b9       	out	0x0a, r24	; 10
     368:	08 95       	ret
     36a:	2a b1       	in	r18, 0x0a	; 10
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <_Z15setPinDirectionhhb+0x96>
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	6a 95       	dec	r22
     378:	e2 f7       	brpl	.-8      	; 0x372 <_Z15setPinDirectionhhb+0x92>
     37a:	80 95       	com	r24
     37c:	82 23       	and	r24, r18
     37e:	8a b9       	out	0x0a, r24	; 10
     380:	08 95       	ret

00000382 <_Z21setPinChangeInterrupthhb>:
     382:	e8 e6       	ldi	r30, 0x68	; 104
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	90 81       	ld	r25, Z
     388:	21 e0       	ldi	r18, 0x01	; 1
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	08 2e       	mov	r0, r24
     38e:	02 c0       	rjmp	.+4      	; 0x394 <_Z21setPinChangeInterrupthhb+0x12>
     390:	22 0f       	add	r18, r18
     392:	33 1f       	adc	r19, r19
     394:	0a 94       	dec	r0
     396:	e2 f7       	brpl	.-8      	; 0x390 <_Z21setPinChangeInterrupthhb+0xe>
     398:	29 2b       	or	r18, r25
     39a:	20 83       	st	Z, r18
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	81 f0       	breq	.+32     	; 0x3c0 <_Z21setPinChangeInterrupthhb+0x3e>
     3a0:	18 f0       	brcs	.+6      	; 0x3a8 <_Z21setPinChangeInterrupthhb+0x26>
     3a2:	82 30       	cpi	r24, 0x02	; 2
     3a4:	c9 f0       	breq	.+50     	; 0x3d8 <_Z21setPinChangeInterrupthhb+0x56>
     3a6:	08 95       	ret
     3a8:	eb e6       	ldi	r30, 0x6B	; 107
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <_Z21setPinChangeInterrupthhb+0x34>
     3b2:	44 0f       	add	r20, r20
     3b4:	55 1f       	adc	r21, r21
     3b6:	6a 95       	dec	r22
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <_Z21setPinChangeInterrupthhb+0x30>
     3ba:	48 2b       	or	r20, r24
     3bc:	40 83       	st	Z, r20
     3be:	08 95       	ret
     3c0:	ec e6       	ldi	r30, 0x6C	; 108
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <_Z21setPinChangeInterrupthhb+0x4c>
     3ca:	44 0f       	add	r20, r20
     3cc:	55 1f       	adc	r21, r21
     3ce:	6a 95       	dec	r22
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <_Z21setPinChangeInterrupthhb+0x48>
     3d2:	48 2b       	or	r20, r24
     3d4:	40 83       	st	Z, r20
     3d6:	08 95       	ret
     3d8:	ed e6       	ldi	r30, 0x6D	; 109
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	50 e0       	ldi	r21, 0x00	; 0
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <_Z21setPinChangeInterrupthhb+0x64>
     3e2:	44 0f       	add	r20, r20
     3e4:	55 1f       	adc	r21, r21
     3e6:	6a 95       	dec	r22
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <_Z21setPinChangeInterrupthhb+0x60>
     3ea:	48 2b       	or	r20, r24
     3ec:	40 83       	st	Z, r20
     3ee:	08 95       	ret

000003f0 <_Z10USART_Initj>:
     3f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     3f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     3f8:	88 e1       	ldi	r24, 0x18	; 24
     3fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     3fe:	8e e0       	ldi	r24, 0x0E	; 14
     400:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     404:	08 95       	ret

00000406 <_Z14USART_Transmith>:
     406:	e0 ec       	ldi	r30, 0xC0	; 192
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	90 81       	ld	r25, Z
     40c:	95 ff       	sbrs	r25, 5
     40e:	fd cf       	rjmp	.-6      	; 0x40a <_Z14USART_Transmith+0x4>
     410:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     414:	08 95       	ret

00000416 <_Z6millisv>:
     416:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <time>
     41a:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <time+0x1>
     41e:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <time+0x2>
     422:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <time+0x3>
     426:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <time+0x4>
     42a:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <time+0x5>
     42e:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <time+0x6>
     432:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <time+0x7>
     436:	08 95       	ret

00000438 <_Z13milliHappenedv>:
}


void milliHappened(){
	time += 1;
     438:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <time>
     43c:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <time+0x1>
     440:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <time+0x2>
     444:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <time+0x3>
     448:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <time+0x4>
     44c:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <time+0x5>
     450:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <time+0x6>
     454:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <time+0x7>
     458:	a1 e0       	ldi	r26, 0x01	; 1
     45a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__adddi3_s8>
     45e:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <time>
     462:	30 93 b0 01 	sts	0x01B0, r19	; 0x8001b0 <time+0x1>
     466:	40 93 b1 01 	sts	0x01B1, r20	; 0x8001b1 <time+0x2>
     46a:	50 93 b2 01 	sts	0x01B2, r21	; 0x8001b2 <time+0x3>
     46e:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <time+0x4>
     472:	70 93 b4 01 	sts	0x01B4, r23	; 0x8001b4 <time+0x5>
     476:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <time+0x6>
     47a:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <time+0x7>
	if(cdown != 0){
     47e:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <cdown>
     482:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <cdown+0x1>
     486:	89 2b       	or	r24, r25
     488:	49 f0       	breq	.+18     	; 0x49c <_Z13milliHappenedv+0x64>
		cdown -= 1;
     48a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <cdown>
     48e:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <cdown+0x1>
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <cdown+0x1>
     498:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <cdown>
     49c:	08 95       	ret

0000049e <__vector_6>:
	}
	count1 += 1;
}*/


ISR(WDT_vect){
     49e:	1f 92       	push	r1
     4a0:	0f 92       	push	r0
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	0f 92       	push	r0
     4a6:	11 24       	eor	r1, r1
     4a8:	8f 93       	push	r24
	MCUSR &= ~(1 << SE);
     4aa:	84 b7       	in	r24, 0x34	; 52
     4ac:	8e 7f       	andi	r24, 0xFE	; 254
     4ae:	84 bf       	out	0x34, r24	; 52
     4b0:	8f 91       	pop	r24
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <_Z10numToArrayy>:
	USART_Transmit('\n');
	while(*p != 0){
		USART_Transmit(*p);
		p++;
	}
}
     4bc:	0f 93       	push	r16
     4be:	e8 ef       	ldi	r30, 0xF8	; 248
     4c0:	f1 e0       	ldi	r31, 0x01	; 1
     4c2:	a0 e0       	ldi	r26, 0x00	; 0
     4c4:	b2 e0       	ldi	r27, 0x02	; 2
     4c6:	21 93       	st	Z+, r18
     4c8:	08 e0       	ldi	r16, 0x08	; 8
     4ca:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__lshrdi3>
     4ce:	ea 17       	cp	r30, r26
     4d0:	fb 07       	cpc	r31, r27
     4d2:	c9 f7       	brne	.-14     	; 0x4c6 <_Z10numToArrayy+0xa>
     4d4:	88 ef       	ldi	r24, 0xF8	; 248
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0f 91       	pop	r16
     4da:	08 95       	ret

000004dc <_Z10hexToASCIIh>:
     4dc:	8a 30       	cpi	r24, 0x0A	; 10
     4de:	10 f0       	brcs	.+4      	; 0x4e4 <_Z10hexToASCIIh+0x8>
     4e0:	89 5c       	subi	r24, 0xC9	; 201
     4e2:	08 95       	ret
     4e4:	80 5d       	subi	r24, 0xD0	; 208
     4e6:	08 95       	ret

000004e8 <_Z11hexToStringh>:
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	18 2f       	mov	r17, r24
     4f0:	82 95       	swap	r24
     4f2:	8f 70       	andi	r24, 0x0F	; 15
     4f4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_Z10hexToASCIIh>
     4f8:	c0 e0       	ldi	r28, 0x00	; 0
     4fa:	d2 e0       	ldi	r29, 0x02	; 2
     4fc:	88 83       	st	Y, r24
     4fe:	81 2f       	mov	r24, r17
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_ZZ11hexToStringhE4temp>
     506:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_Z10hexToASCIIh>
     50a:	89 83       	std	Y+1, r24	; 0x01
     50c:	1a 82       	std	Y+2, r1	; 0x02
     50e:	ce 01       	movw	r24, r28
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	08 95       	ret

00000518 <_Z11printNumbery>:
     518:	2f 92       	push	r2
     51a:	3f 92       	push	r3
     51c:	4f 92       	push	r4
     51e:	5f 92       	push	r5
     520:	6f 92       	push	r6
     522:	7f 92       	push	r7
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	c7 56       	subi	r28, 0x67	; 103
     542:	d1 09       	sbc	r29, r1
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	a6 96       	adiw	r28, 0x26	; 38
     550:	2f af       	std	Y+63, r18	; 0x3f
     552:	a6 97       	sbiw	r28, 0x26	; 38
     554:	83 2e       	mov	r8, r19
     556:	74 2e       	mov	r7, r20
     558:	65 2e       	mov	r6, r21
     55a:	56 2e       	mov	r5, r22
     55c:	47 2e       	mov	r4, r23
     55e:	38 2e       	mov	r3, r24
     560:	29 2e       	mov	r2, r25
     562:	a0 e0       	ldi	r26, 0x00	; 0
     564:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__cmpdi2_s8>
     568:	21 f4       	brne	.+8      	; 0x572 <_Z11printNumbery+0x5a>
     56a:	80 e3       	ldi	r24, 0x30	; 48
     56c:	0e 94 03 02 	call	0x406	; 0x406 <_Z14USART_Transmith>
     570:	52 c0       	rjmp	.+164    	; 0x616 <_Z11printNumbery+0xfe>
     572:	91 2c       	mov	r9, r1
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	8c 0f       	add	r24, r28
     57a:	9d 1f       	adc	r25, r29
     57c:	89 0d       	add	r24, r9
     57e:	91 1d       	adc	r25, r1
     580:	a8 96       	adiw	r28, 0x28	; 40
     582:	9f af       	std	Y+63, r25	; 0x3f
     584:	8e af       	std	Y+62, r24	; 0x3e
     586:	a8 97       	sbiw	r28, 0x28	; 40
     588:	0f 2e       	mov	r0, r31
     58a:	fa e0       	ldi	r31, 0x0A	; 10
     58c:	af 2e       	mov	r10, r31
     58e:	f0 2d       	mov	r31, r0
     590:	b1 2c       	mov	r11, r1
     592:	c1 2c       	mov	r12, r1
     594:	d1 2c       	mov	r13, r1
     596:	e1 2c       	mov	r14, r1
     598:	f1 2c       	mov	r15, r1
     59a:	00 e0       	ldi	r16, 0x00	; 0
     59c:	10 e0       	ldi	r17, 0x00	; 0
     59e:	a6 96       	adiw	r28, 0x26	; 38
     5a0:	2f ad       	ldd	r18, Y+63	; 0x3f
     5a2:	a6 97       	sbiw	r28, 0x26	; 38
     5a4:	38 2d       	mov	r19, r8
     5a6:	47 2d       	mov	r20, r7
     5a8:	56 2d       	mov	r21, r6
     5aa:	65 2d       	mov	r22, r5
     5ac:	74 2d       	mov	r23, r4
     5ae:	83 2d       	mov	r24, r3
     5b0:	92 2d       	mov	r25, r2
     5b2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__umoddi3>
     5b6:	20 5d       	subi	r18, 0xD0	; 208
     5b8:	a8 96       	adiw	r28, 0x28	; 40
     5ba:	ee ad       	ldd	r30, Y+62	; 0x3e
     5bc:	ff ad       	ldd	r31, Y+63	; 0x3f
     5be:	a8 97       	sbiw	r28, 0x28	; 40
     5c0:	20 83       	st	Z, r18
     5c2:	a6 96       	adiw	r28, 0x26	; 38
     5c4:	2f ad       	ldd	r18, Y+63	; 0x3f
     5c6:	a6 97       	sbiw	r28, 0x26	; 38
     5c8:	38 2d       	mov	r19, r8
     5ca:	47 2d       	mov	r20, r7
     5cc:	56 2d       	mov	r21, r6
     5ce:	65 2d       	mov	r22, r5
     5d0:	74 2d       	mov	r23, r4
     5d2:	83 2d       	mov	r24, r3
     5d4:	92 2d       	mov	r25, r2
     5d6:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__udivdi3>
     5da:	a6 96       	adiw	r28, 0x26	; 38
     5dc:	2f af       	std	Y+63, r18	; 0x3f
     5de:	a6 97       	sbiw	r28, 0x26	; 38
     5e0:	83 2e       	mov	r8, r19
     5e2:	74 2e       	mov	r7, r20
     5e4:	65 2e       	mov	r6, r21
     5e6:	56 2e       	mov	r5, r22
     5e8:	47 2e       	mov	r4, r23
     5ea:	38 2e       	mov	r3, r24
     5ec:	29 2e       	mov	r2, r25
     5ee:	93 94       	inc	r9
     5f0:	a0 e0       	ldi	r26, 0x00	; 0
     5f2:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__cmpdi2_s8>
     5f6:	09 f0       	breq	.+2      	; 0x5fa <_Z11printNumbery+0xe2>
     5f8:	bd cf       	rjmp	.-134    	; 0x574 <_Z11printNumbery+0x5c>
     5fa:	99 20       	and	r9, r9
     5fc:	61 f0       	breq	.+24     	; 0x616 <_Z11printNumbery+0xfe>
     5fe:	9a 94       	dec	r9
     600:	e1 e0       	ldi	r30, 0x01	; 1
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	ec 0f       	add	r30, r28
     606:	fd 1f       	adc	r31, r29
     608:	e9 0d       	add	r30, r9
     60a:	f1 1d       	adc	r31, r1
     60c:	80 81       	ld	r24, Z
     60e:	0e 94 03 02 	call	0x406	; 0x406 <_Z14USART_Transmith>
     612:	91 10       	cpse	r9, r1
     614:	f4 cf       	rjmp	.-24     	; 0x5fe <_Z11printNumbery+0xe6>
     616:	80 e2       	ldi	r24, 0x20	; 32
     618:	0e 94 03 02 	call	0x406	; 0x406 <_Z14USART_Transmith>
     61c:	c9 59       	subi	r28, 0x99	; 153
     61e:	df 4f       	sbci	r29, 0xFF	; 255
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	af 90       	pop	r10
     63e:	9f 90       	pop	r9
     640:	8f 90       	pop	r8
     642:	7f 90       	pop	r7
     644:	6f 90       	pop	r6
     646:	5f 90       	pop	r5
     648:	4f 90       	pop	r4
     64a:	3f 90       	pop	r3
     64c:	2f 90       	pop	r2
     64e:	08 95       	ret

00000650 <_Z6NotifyPKc>:
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
     656:	8d e0       	ldi	r24, 0x0D	; 13
     658:	0e 94 03 02 	call	0x406	; 0x406 <_Z14USART_Transmith>
     65c:	8a e0       	ldi	r24, 0x0A	; 10
     65e:	0e 94 03 02 	call	0x406	; 0x406 <_Z14USART_Transmith>
     662:	fe 01       	movw	r30, r28
     664:	84 91       	lpm	r24, Z
     666:	88 23       	and	r24, r24
     668:	49 f0       	breq	.+18     	; 0x67c <_Z6NotifyPKc+0x2c>
     66a:	fe 01       	movw	r30, r28
     66c:	84 91       	lpm	r24, Z
     66e:	0e 94 03 02 	call	0x406	; 0x406 <_Z14USART_Transmith>
     672:	21 96       	adiw	r28, 0x01	; 1
     674:	fe 01       	movw	r30, r28
     676:	84 91       	lpm	r24, Z
     678:	81 11       	cpse	r24, r1
     67a:	f7 cf       	rjmp	.-18     	; 0x66a <_Z6NotifyPKc+0x1a>
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <_Z15printStringCRNLPKc>:

void printStringCRNL(const char *p){
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	ec 01       	movw	r28, r24
	USART_Transmit('\r');
     688:	8d e0       	ldi	r24, 0x0D	; 13
     68a:	0e 94 03 02 	call	0x406	; 0x406 <_Z14USART_Transmith>
	USART_Transmit('\n');
     68e:	8a e0       	ldi	r24, 0x0A	; 10
     690:	0e 94 03 02 	call	0x406	; 0x406 <_Z14USART_Transmith>
	while(*p != 0){
     694:	88 81       	ld	r24, Y
     696:	88 23       	and	r24, r24
     698:	31 f0       	breq	.+12     	; 0x6a6 <_Z15printStringCRNLPKc+0x24>
     69a:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     69c:	0e 94 03 02 	call	0x406	; 0x406 <_Z14USART_Transmith>
}

void printStringCRNL(const char *p){
	USART_Transmit('\r');
	USART_Transmit('\n');
	while(*p != 0){
     6a0:	89 91       	ld	r24, Y+
     6a2:	81 11       	cpse	r24, r1
     6a4:	fb cf       	rjmp	.-10     	; 0x69c <_Z15printStringCRNLPKc+0x1a>
		USART_Transmit(*p);
		p++;
	}
}
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <_Z11printStringPKc>:

void printString(const char *p){
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	ec 01       	movw	r28, r24
	while(*p != 0){
     6b2:	88 81       	ld	r24, Y
     6b4:	88 23       	and	r24, r24
     6b6:	31 f0       	breq	.+12     	; 0x6c4 <_Z11printStringPKc+0x18>
     6b8:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     6ba:	0e 94 03 02 	call	0x406	; 0x406 <_Z14USART_Transmith>
		p++;
	}
}

void printString(const char *p){
	while(*p != 0){
     6be:	89 91       	ld	r24, Y+
     6c0:	81 11       	cpse	r24, r1
     6c2:	fb cf       	rjmp	.-10     	; 0x6ba <_Z11printStringPKc+0xe>
		USART_Transmit(*p);
		p++;
	}
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <_Z16hexArrayToStringPhh>:
		data >>= 8;
	}
	return array;
} 

char* hexArrayToString(uint8_t *data, uint8_t length){
     6ca:	ff 92       	push	r15
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	f6 2e       	mov	r15, r22
	static char str[64], t;
	data += length - 1;
     6d6:	06 2f       	mov	r16, r22
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	01 50       	subi	r16, 0x01	; 1
     6dc:	11 09       	sbc	r17, r1
     6de:	08 0f       	add	r16, r24
     6e0:	19 1f       	adc	r17, r25
		p++;
	}
}

void printChar(unsigned char data){
	USART_Transmit(data);
     6e2:	80 e3       	ldi	r24, 0x30	; 48
     6e4:	0e 94 03 02 	call	0x406	; 0x406 <_Z14USART_Transmith>
     6e8:	88 e7       	ldi	r24, 0x78	; 120
     6ea:	0e 94 03 02 	call	0x406	; 0x406 <_Z14USART_Transmith>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     6ee:	ff 20       	and	r15, r15
     6f0:	81 f0       	breq	.+32     	; 0x712 <_Z16hexArrayToStringPhh+0x48>
     6f2:	e8 01       	movw	r28, r16
     6f4:	21 96       	adiw	r28, 0x01	; 1
     6f6:	8f ef       	ldi	r24, 0xFF	; 255
     6f8:	8f 0d       	add	r24, r15
     6fa:	08 1b       	sub	r16, r24
     6fc:	11 09       	sbc	r17, r1
	{	
		t = *data;
     6fe:	8a 91       	ld	r24, -Y
     700:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <_ZZ16hexArrayToStringPhhE1t>
		printString(hexToString(t));
     704:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_Z11hexToStringh>
     708:	0e 94 56 03 	call	0x6ac	; 0x6ac <_Z11printStringPKc>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     70c:	c0 17       	cp	r28, r16
     70e:	d1 07       	cpc	r29, r17
     710:	b1 f7       	brne	.-20     	; 0x6fe <_Z16hexArrayToStringPhh+0x34>
	{	
		t = *data;
		printString(hexToString(t));
		data -= 1;
	}
	str[length + 2] = 0;
     712:	ef 2d       	mov	r30, r15
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	e9 54       	subi	r30, 0x49	; 73
     718:	fe 4f       	sbci	r31, 0xFE	; 254
     71a:	12 82       	std	Z+2, r1	; 0x02
	return str;
}
     71c:	87 eb       	ldi	r24, 0xB7	; 183
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	08 95       	ret

0000072c <_Z14printHexNumberyh>:
	ascii[1] = hexToASCII(temp);
	ascii[2] = '\0';
	return ascii;
}

void printHexNumber(uint64_t data,uint8_t length){
     72c:	0f 93       	push	r16
	printString(hexArrayToString(numToArray((data)),length));
     72e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_Z10numToArrayy>
     732:	60 2f       	mov	r22, r16
     734:	0e 94 65 03 	call	0x6ca	; 0x6ca <_Z16hexArrayToStringPhh>
     738:	0e 94 56 03 	call	0x6ac	; 0x6ac <_Z11printStringPKc>
}
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <_ZN8NRF24L0114toggleActivateEv>:
			#endif
		}
		return Speed;
	}
	return Speed;
}
     740:	41 98       	cbi	0x08, 1	; 8
     742:	80 e5       	ldi	r24, 0x50	; 80
     744:	0e 94 0a 01 	call	0x214	; 0x214 <_Z18SPI_MasterTransmitc>
     748:	83 e7       	ldi	r24, 0x73	; 115
     74a:	0e 94 0a 01 	call	0x214	; 0x214 <_Z18SPI_MasterTransmitc>
     74e:	41 9a       	sbi	0x08, 1	; 8
     750:	08 95       	ret

00000752 <_ZN8NRF24L0114sendSPICommandEh>:
     752:	86 2f       	mov	r24, r22
     754:	41 98       	cbi	0x08, 1	; 8
     756:	0e 94 0a 01 	call	0x214	; 0x214 <_Z18SPI_MasterTransmitc>
     75a:	41 9a       	sbi	0x08, 1	; 8
     75c:	08 95       	ret

0000075e <_ZN8NRF24L0115readSPIRegisterEhh>:
     75e:	af 92       	push	r10
     760:	bf 92       	push	r11
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	86 2f       	mov	r24, r22
     774:	a4 2e       	mov	r10, r20
     776:	41 98       	cbi	0x08, 1	; 8
     778:	0e 94 0a 01 	call	0x214	; 0x214 <_Z18SPI_MasterTransmitc>
     77c:	aa 20       	and	r10, r10
     77e:	21 f1       	breq	.+72     	; 0x7c8 <_ZN8NRF24L0115readSPIRegisterEhh+0x6a>
     780:	d0 e0       	ldi	r29, 0x00	; 0
     782:	c0 e0       	ldi	r28, 0x00	; 0
     784:	b1 2c       	mov	r11, r1
     786:	c1 2c       	mov	r12, r1
     788:	d1 2c       	mov	r13, r1
     78a:	e1 2c       	mov	r14, r1
     78c:	f1 2c       	mov	r15, r1
     78e:	00 e0       	ldi	r16, 0x00	; 0
     790:	10 e0       	ldi	r17, 0x00	; 0
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 0a 01 	call	0x214	; 0x214 <_Z18SPI_MasterTransmitc>
     798:	2c 2f       	mov	r18, r28
     79a:	28 2b       	or	r18, r24
     79c:	3b 2d       	mov	r19, r11
     79e:	4c 2d       	mov	r20, r12
     7a0:	5d 2d       	mov	r21, r13
     7a2:	6e 2d       	mov	r22, r14
     7a4:	7f 2d       	mov	r23, r15
     7a6:	80 2f       	mov	r24, r16
     7a8:	91 2f       	mov	r25, r17
     7aa:	08 e0       	ldi	r16, 0x08	; 8
     7ac:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__ashldi3>
     7b0:	c2 2f       	mov	r28, r18
     7b2:	b3 2e       	mov	r11, r19
     7b4:	c4 2e       	mov	r12, r20
     7b6:	d5 2e       	mov	r13, r21
     7b8:	e6 2e       	mov	r14, r22
     7ba:	f7 2e       	mov	r15, r23
     7bc:	08 2f       	mov	r16, r24
     7be:	19 2f       	mov	r17, r25
     7c0:	df 5f       	subi	r29, 0xFF	; 255
     7c2:	da 11       	cpse	r29, r10
     7c4:	e6 cf       	rjmp	.-52     	; 0x792 <_ZN8NRF24L0115readSPIRegisterEhh+0x34>
     7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <_ZN8NRF24L0115readSPIRegisterEhh+0x7a>
     7c8:	c0 e0       	ldi	r28, 0x00	; 0
     7ca:	b1 2c       	mov	r11, r1
     7cc:	c1 2c       	mov	r12, r1
     7ce:	d1 2c       	mov	r13, r1
     7d0:	e1 2c       	mov	r14, r1
     7d2:	f1 2c       	mov	r15, r1
     7d4:	00 e0       	ldi	r16, 0x00	; 0
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	41 9a       	sbi	0x08, 1	; 8
     7da:	2c 2f       	mov	r18, r28
     7dc:	3b 2d       	mov	r19, r11
     7de:	4c 2d       	mov	r20, r12
     7e0:	5d 2d       	mov	r21, r13
     7e2:	6e 2d       	mov	r22, r14
     7e4:	7f 2d       	mov	r23, r15
     7e6:	80 2f       	mov	r24, r16
     7e8:	91 2f       	mov	r25, r17
     7ea:	08 e0       	ldi	r16, 0x08	; 8
     7ec:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__lshrdi3>
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	bf 90       	pop	r11
     802:	af 90       	pop	r10
     804:	08 95       	ret

00000806 <_ZN8NRF24L019printInfoEv>:
     806:	0f 93       	push	r16
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	ec 01       	movw	r28, r24
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 41 03 	call	0x682	; 0x682 <_Z15printStringCRNLPKc>
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	ce 01       	movw	r24, r28
     81c:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     820:	01 e0       	ldi	r16, 0x01	; 1
     822:	0e 94 96 03 	call	0x72c	; 0x72c <_Z14printHexNumberyh>
     826:	8a e0       	ldi	r24, 0x0A	; 10
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 56 03 	call	0x6ac	; 0x6ac <_Z11printStringPKc>
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	67 e1       	ldi	r22, 0x17	; 23
     832:	ce 01       	movw	r24, r28
     834:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     838:	0e 94 96 03 	call	0x72c	; 0x72c <_Z14printHexNumberyh>
     83c:	8f e0       	ldi	r24, 0x0F	; 15
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	0e 94 56 03 	call	0x6ac	; 0x6ac <_Z11printStringPKc>
     844:	6f ef       	ldi	r22, 0xFF	; 255
     846:	ce 01       	movw	r24, r28
     848:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN8NRF24L0114sendSPICommandEh>
     84c:	28 2f       	mov	r18, r24
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 96 03 	call	0x72c	; 0x72c <_Z14printHexNumberyh>
     860:	89 e1       	ldi	r24, 0x19	; 25
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 56 03 	call	0x6ac	; 0x6ac <_Z11printStringPKc>
     868:	41 e0       	ldi	r20, 0x01	; 1
     86a:	68 e0       	ldi	r22, 0x08	; 8
     86c:	ce 01       	movw	r24, r28
     86e:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     872:	0e 94 8c 02 	call	0x518	; 0x518 <_Z11printNumbery>
     876:	87 e2       	ldi	r24, 0x27	; 39
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	0e 94 56 03 	call	0x6ac	; 0x6ac <_Z11printStringPKc>
     87e:	41 e0       	ldi	r20, 0x01	; 1
     880:	6d e1       	ldi	r22, 0x1D	; 29
     882:	ce 01       	movw	r24, r28
     884:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     888:	0e 94 8c 02 	call	0x518	; 0x518 <_Z11printNumbery>
     88c:	82 e3       	ldi	r24, 0x32	; 50
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 56 03 	call	0x6ac	; 0x6ac <_Z11printStringPKc>
     894:	0e 94 0b 02 	call	0x416	; 0x416 <_Z6millisv>
     898:	0e 94 8c 02 	call	0x518	; 0x518 <_Z11printNumbery>
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	0f 91       	pop	r16
     8a2:	08 95       	ret

000008a4 <_ZN8NRF24L018isTXFullEv>:
     8a4:	41 e0       	ldi	r20, 0x01	; 1
     8a6:	67 e1       	ldi	r22, 0x17	; 23
     8a8:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     8ac:	82 2f       	mov	r24, r18
     8ae:	80 72       	andi	r24, 0x20	; 32
     8b0:	08 95       	ret

000008b2 <_ZN8NRF24L0111isTX_DS_SetEv>:
     8b2:	41 e0       	ldi	r20, 0x01	; 1
     8b4:	67 e0       	ldi	r22, 0x07	; 7
     8b6:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     8ba:	82 2f       	mov	r24, r18
     8bc:	80 72       	andi	r24, 0x20	; 32
     8be:	08 95       	ret

000008c0 <_ZN8NRF24L0112isRT_Max_SetEv>:
     8c0:	41 e0       	ldi	r20, 0x01	; 1
     8c2:	67 e0       	ldi	r22, 0x07	; 7
     8c4:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     8c8:	82 2f       	mov	r24, r18
     8ca:	80 71       	andi	r24, 0x10	; 16
     8cc:	08 95       	ret

000008ce <_ZN8NRF24L0116writeSPIRegisterEhyh>:
     8ce:	9f 92       	push	r9
     8d0:	af 92       	push	r10
     8d2:	bf 92       	push	r11
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	c2 2f       	mov	r28, r18
     8e6:	d3 2f       	mov	r29, r19
     8e8:	b4 2e       	mov	r11, r20
     8ea:	a5 2e       	mov	r10, r21
     8ec:	41 98       	cbi	0x08, 1	; 8
     8ee:	86 2f       	mov	r24, r22
     8f0:	80 62       	ori	r24, 0x20	; 32
     8f2:	0e 94 0a 01 	call	0x214	; 0x214 <_Z18SPI_MasterTransmitc>
     8f6:	98 2e       	mov	r9, r24
     8f8:	cc 20       	and	r12, r12
     8fa:	d1 f0       	breq	.+52     	; 0x930 <__stack+0x31>
     8fc:	d1 2c       	mov	r13, r1
     8fe:	8e 2d       	mov	r24, r14
     900:	0e 94 0a 01 	call	0x214	; 0x214 <_Z18SPI_MasterTransmitc>
     904:	2e 2d       	mov	r18, r14
     906:	3f 2d       	mov	r19, r15
     908:	40 2f       	mov	r20, r16
     90a:	51 2f       	mov	r21, r17
     90c:	6c 2f       	mov	r22, r28
     90e:	7d 2f       	mov	r23, r29
     910:	8b 2d       	mov	r24, r11
     912:	9a 2d       	mov	r25, r10
     914:	08 e0       	ldi	r16, 0x08	; 8
     916:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__lshrdi3>
     91a:	e2 2e       	mov	r14, r18
     91c:	f3 2e       	mov	r15, r19
     91e:	04 2f       	mov	r16, r20
     920:	15 2f       	mov	r17, r21
     922:	c6 2f       	mov	r28, r22
     924:	d7 2f       	mov	r29, r23
     926:	b8 2e       	mov	r11, r24
     928:	a9 2e       	mov	r10, r25
     92a:	d3 94       	inc	r13
     92c:	dc 10       	cpse	r13, r12
     92e:	e7 cf       	rjmp	.-50     	; 0x8fe <_ZN8NRF24L0116writeSPIRegisterEhyh+0x30>
     930:	41 9a       	sbi	0x08, 1	; 8
     932:	89 2d       	mov	r24, r9
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	df 90       	pop	r13
     942:	cf 90       	pop	r12
     944:	bf 90       	pop	r11
     946:	af 90       	pop	r10
     948:	9f 90       	pop	r9
     94a:	08 95       	ret

0000094c <_ZN8NRF24L017powerONEb>:
     94c:	cf 92       	push	r12
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	ec 01       	movw	r28, r24
     95c:	e6 2e       	mov	r14, r22
     95e:	41 e0       	ldi	r20, 0x01	; 1
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     966:	2d 7f       	andi	r18, 0xFD	; 253
     968:	ee 0c       	add	r14, r14
     96a:	e2 2a       	or	r14, r18
     96c:	eb 82       	std	Y+3, r14	; 0x03
     96e:	cc 24       	eor	r12, r12
     970:	c3 94       	inc	r12
     972:	f1 2c       	mov	r15, r1
     974:	00 e0       	ldi	r16, 0x00	; 0
     976:	10 e0       	ldi	r17, 0x00	; 0
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	ce 01       	movw	r24, r28
     984:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	cf 90       	pop	r12
     996:	08 95       	ret

00000998 <_ZN8NRF24L018testChipEv>:
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	ec 01       	movw	r28, r24
     9ae:	80 e4       	ldi	r24, 0x40	; 64
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	0e 94 28 03 	call	0x650	; 0x650 <_Z6NotifyPKc>
     9b6:	41 e0       	ldi	r20, 0x01	; 1
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	ce 01       	movw	r24, r28
     9bc:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	e2 2e       	mov	r14, r18
     9c4:	e8 26       	eor	r14, r24
     9c6:	eb 82       	std	Y+3, r14	; 0x03
     9c8:	cc 24       	eor	r12, r12
     9ca:	c3 94       	inc	r12
     9cc:	f1 2c       	mov	r15, r1
     9ce:	00 e0       	ldi	r16, 0x00	; 0
     9d0:	10 e0       	ldi	r17, 0x00	; 0
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	ce 01       	movw	r24, r28
     9de:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
     9e2:	41 e0       	ldi	r20, 0x01	; 1
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	ce 01       	movw	r24, r28
     9e8:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     9ec:	ab 80       	ldd	r10, Y+3	; 0x03
     9ee:	b1 2c       	mov	r11, r1
     9f0:	c1 2c       	mov	r12, r1
     9f2:	d1 2c       	mov	r13, r1
     9f4:	e1 2c       	mov	r14, r1
     9f6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpdi2>
     9fa:	29 f0       	breq	.+10     	; 0xa06 <_ZN8NRF24L018testChipEv+0x6e>
     9fc:	86 e1       	ldi	r24, 0x16	; 22
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	0e 94 28 03 	call	0x650	; 0x650 <_Z6NotifyPKc>
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <_ZN8NRF24L018testChipEv+0x76>
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0e 94 28 03 	call	0x650	; 0x650 <_Z6NotifyPKc>
     a0e:	eb 80       	ldd	r14, Y+3	; 0x03
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	e8 26       	eor	r14, r24
     a14:	eb 82       	std	Y+3, r14	; 0x03
     a16:	cc 24       	eor	r12, r12
     a18:	c3 94       	inc	r12
     a1a:	f1 2c       	mov	r15, r1
     a1c:	00 e0       	ldi	r16, 0x00	; 0
     a1e:	10 e0       	ldi	r17, 0x00	; 0
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	ce 01       	movw	r24, r28
     a2c:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ff 90       	pop	r15
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	bf 90       	pop	r11
     a42:	af 90       	pop	r10
     a44:	08 95       	ret

00000a46 <_ZN8NRF24L017setModeEb>:
     a46:	af 92       	push	r10
     a48:	bf 92       	push	r11
     a4a:	cf 92       	push	r12
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	ec 01       	movw	r28, r24
     a5c:	d6 2e       	mov	r13, r22
     a5e:	41 e0       	ldi	r20, 0x01	; 1
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     a66:	2e 7f       	andi	r18, 0xFE	; 254
     a68:	e2 2e       	mov	r14, r18
     a6a:	ed 28       	or	r14, r13
     a6c:	eb 82       	std	Y+3, r14	; 0x03
     a6e:	cc 24       	eor	r12, r12
     a70:	c3 94       	inc	r12
     a72:	f1 2c       	mov	r15, r1
     a74:	00 e0       	ldi	r16, 0x00	; 0
     a76:	10 e0       	ldi	r17, 0x00	; 0
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	ce 01       	movw	r24, r28
     a84:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a88:	dd 20       	and	r13, r13
     a8a:	29 f0       	breq	.+10     	; 0xa96 <_ZN8NRF24L017setModeEb+0x50>
     a8c:	8d ed       	ldi	r24, 0xDD	; 221
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 28 03 	call	0x650	; 0x650 <_Z6NotifyPKc>
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <_ZN8NRF24L017setModeEb+0x58>
     a96:	87 eb       	ldi	r24, 0xB7	; 183
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 28 03 	call	0x650	; 0x650 <_Z6NotifyPKc>
     a9e:	41 e0       	ldi	r20, 0x01	; 1
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	ce 01       	movw	r24, r28
     aa4:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     aa8:	ab 80       	ldd	r10, Y+3	; 0x03
     aaa:	b1 2c       	mov	r11, r1
     aac:	c1 2c       	mov	r12, r1
     aae:	d1 2c       	mov	r13, r1
     ab0:	e1 2c       	mov	r14, r1
     ab2:	f1 2c       	mov	r15, r1
     ab4:	00 e0       	ldi	r16, 0x00	; 0
     ab6:	10 e0       	ldi	r17, 0x00	; 0
     ab8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__cmpdi2>
     abc:	29 f0       	breq	.+10     	; 0xac8 <_ZN8NRF24L017setModeEb+0x82>
     abe:	81 e8       	ldi	r24, 0x81	; 129
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 28 03 	call	0x650	; 0x650 <_Z6NotifyPKc>
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <_ZN8NRF24L017setModeEb+0x8a>
     ac8:	88 e6       	ldi	r24, 0x68	; 104
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 28 03 	call	0x650	; 0x650 <_Z6NotifyPKc>
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	bf 90       	pop	r11
     ae2:	af 90       	pop	r10
     ae4:	08 95       	ret

00000ae6 <_ZN8NRF24L0120enableACKWithPayloadEb>:
     ae6:	cf 92       	push	r12
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	ec 01       	movw	r28, r24
     af6:	e6 2e       	mov	r14, r22
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	6d e1       	ldi	r22, 0x1D	; 29
     afc:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     b00:	2d 7f       	andi	r18, 0xFD	; 253
     b02:	ee 0c       	add	r14, r14
     b04:	e2 2a       	or	r14, r18
     b06:	eb 82       	std	Y+3, r14	; 0x03
     b08:	cc 24       	eor	r12, r12
     b0a:	c3 94       	inc	r12
     b0c:	f1 2c       	mov	r15, r1
     b0e:	00 e0       	ldi	r16, 0x00	; 0
     b10:	10 e0       	ldi	r17, 0x00	; 0
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	6d e1       	ldi	r22, 0x1D	; 29
     b1c:	ce 01       	movw	r24, r28
     b1e:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	cf 90       	pop	r12
     b30:	08 95       	ret

00000b32 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>:
     b32:	cf 92       	push	r12
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	ec 01       	movw	r28, r24
     b42:	e6 2e       	mov	r14, r22
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	6d e1       	ldi	r22, 0x1D	; 29
     b48:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     b4c:	2b 7f       	andi	r18, 0xFB	; 251
     b4e:	ee 0c       	add	r14, r14
     b50:	ee 0c       	add	r14, r14
     b52:	e2 2a       	or	r14, r18
     b54:	eb 82       	std	Y+3, r14	; 0x03
     b56:	cc 24       	eor	r12, r12
     b58:	c3 94       	inc	r12
     b5a:	f1 2c       	mov	r15, r1
     b5c:	00 e0       	ldi	r16, 0x00	; 0
     b5e:	10 e0       	ldi	r17, 0x00	; 0
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	6d e1       	ldi	r22, 0x1D	; 29
     b6a:	ce 01       	movw	r24, r28
     b6c:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	cf 90       	pop	r12
     b7e:	08 95       	ret

00000b80 <_ZN8NRF24L0118enableDPLForRXPipeEhb>:
     b80:	af 92       	push	r10
     b82:	bf 92       	push	r11
     b84:	cf 92       	push	r12
     b86:	ef 92       	push	r14
     b88:	ff 92       	push	r15
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	66 30       	cpi	r22, 0x06	; 6
     b94:	48 f5       	brcc	.+82     	; 0xbe8 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x68>
     b96:	c4 2f       	mov	r28, r20
     b98:	d6 2f       	mov	r29, r22
     b9a:	5c 01       	movw	r10, r24
     b9c:	41 e0       	ldi	r20, 0x01	; 1
     b9e:	6c e1       	ldi	r22, 0x1C	; 28
     ba0:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0d 2e       	mov	r0, r29
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x30>
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	0a 94       	dec	r0
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x2c>
     bb4:	80 95       	com	r24
     bb6:	82 23       	and	r24, r18
     bb8:	4c 2f       	mov	r20, r28
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x42>
     bbe:	44 0f       	add	r20, r20
     bc0:	55 1f       	adc	r21, r21
     bc2:	da 95       	dec	r29
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x3e>
     bc6:	e8 2e       	mov	r14, r24
     bc8:	e4 2a       	or	r14, r20
     bca:	f5 01       	movw	r30, r10
     bcc:	e3 82       	std	Z+3, r14	; 0x03
     bce:	cc 24       	eor	r12, r12
     bd0:	c3 94       	inc	r12
     bd2:	f1 2c       	mov	r15, r1
     bd4:	00 e0       	ldi	r16, 0x00	; 0
     bd6:	10 e0       	ldi	r17, 0x00	; 0
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	6c e1       	ldi	r22, 0x1C	; 28
     be2:	c5 01       	movw	r24, r10
     be4:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	cf 90       	pop	r12
     bf6:	bf 90       	pop	r11
     bf8:	af 90       	pop	r10
     bfa:	08 95       	ret

00000bfc <_ZN8NRF24L0110clearTX_DSEv>:
     bfc:	cf 92       	push	r12
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cc 24       	eor	r12, r12
     c08:	c3 94       	inc	r12
     c0a:	68 94       	set
     c0c:	ee 24       	eor	r14, r14
     c0e:	e5 f8       	bld	r14, 5
     c10:	f1 2c       	mov	r15, r1
     c12:	00 e0       	ldi	r16, 0x00	; 0
     c14:	10 e0       	ldi	r17, 0x00	; 0
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	cf 90       	pop	r12
     c2e:	08 95       	ret

00000c30 <_ZN8NRF24L0111clearRT_MaxEv>:
     c30:	cf 92       	push	r12
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cc 24       	eor	r12, r12
     c3c:	c3 94       	inc	r12
     c3e:	68 94       	set
     c40:	ee 24       	eor	r14, r14
     c42:	e4 f8       	bld	r14, 4
     c44:	f1 2c       	mov	r15, r1
     c46:	00 e0       	ldi	r16, 0x00	; 0
     c48:	10 e0       	ldi	r17, 0x00	; 0
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	67 e0       	ldi	r22, 0x07	; 7
     c54:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	cf 90       	pop	r12
     c62:	08 95       	ret

00000c64 <_ZN8NRF24L0113setRFDataRateEb>:
     c64:	cf 92       	push	r12
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	ec 01       	movw	r28, r24
     c74:	e6 2e       	mov	r14, r22
     c76:	41 e0       	ldi	r20, 0x01	; 1
     c78:	66 e0       	ldi	r22, 0x06	; 6
     c7a:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN8NRF24L0115readSPIRegisterEhh>
     c7e:	27 7f       	andi	r18, 0xF7	; 247
     c80:	ee 0c       	add	r14, r14
     c82:	ee 0c       	add	r14, r14
     c84:	ee 0c       	add	r14, r14
     c86:	e2 2a       	or	r14, r18
     c88:	eb 82       	std	Y+3, r14	; 0x03
     c8a:	cc 24       	eor	r12, r12
     c8c:	c3 94       	inc	r12
     c8e:	f1 2c       	mov	r15, r1
     c90:	00 e0       	ldi	r16, 0x00	; 0
     c92:	10 e0       	ldi	r17, 0x00	; 0
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	66 e0       	ldi	r22, 0x06	; 6
     c9e:	ce 01       	movw	r24, r28
     ca0:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	cf 90       	pop	r12
     cb2:	08 95       	ret

00000cb4 <_ZN8NRF24L0110initializeEv>:
     cb4:	cf 92       	push	r12
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	ec 01       	movw	r28, r24
     cc4:	39 9a       	sbi	0x07, 1	; 7
     cc6:	38 9a       	sbi	0x07, 0	; 7
     cc8:	40 9a       	sbi	0x08, 0	; 8
     cca:	57 9a       	sbi	0x0a, 7	; 10
     ccc:	1a 82       	std	Y+2, r1	; 0x02
     cce:	82 e7       	ldi	r24, 0x72	; 114
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	0e 94 28 03 	call	0x650	; 0x650 <_Z6NotifyPKc>
     cd6:	28 81       	ld	r18, Y
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 8c 02 	call	0x518	; 0x518 <_Z11printNumbery>
     cea:	8f e4       	ldi	r24, 0x4F	; 79
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	0e 94 28 03 	call	0x650	; 0x650 <_Z6NotifyPKc>
     cf2:	29 81       	ldd	r18, Y+1	; 0x01
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 8c 02 	call	0x518	; 0x518 <_Z11printNumbery>
     d06:	ce 01       	movw	r24, r28
     d08:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN8NRF24L018testChipEv>
     d0c:	cc 24       	eor	r12, r12
     d0e:	c3 94       	inc	r12
     d10:	e1 2c       	mov	r14, r1
     d12:	f1 2c       	mov	r15, r1
     d14:	00 e0       	ldi	r16, 0x00	; 0
     d16:	10 e0       	ldi	r17, 0x00	; 0
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	64 e0       	ldi	r22, 0x04	; 4
     d22:	ce 01       	movw	r24, r28
     d24:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	ce 01       	movw	r24, r28
     d2c:	0e 94 32 06 	call	0xc64	; 0xc64 <_ZN8NRF24L0113setRFDataRateEb>
     d30:	6f 81       	ldd	r22, Y+7	; 0x07
     d32:	ce 01       	movw	r24, r28
     d34:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN8NRF24L017setModeEb>
     d38:	88 85       	ldd	r24, Y+8	; 0x08
     d3a:	88 23       	and	r24, r24
     d3c:	81 f0       	breq	.+32     	; 0xd5e <_ZN8NRF24L0110initializeEv+0xaa>
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	ce 01       	movw	r24, r28
     d44:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN8NRF24L0118enableDPLForRXPipeEhb>
     d48:	ce 01       	movw	r24, r28
     d4a:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN8NRF24L0114toggleActivateEv>
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	ce 01       	movw	r24, r28
     d52:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>
     d56:	61 e0       	ldi	r22, 0x01	; 1
     d58:	ce 01       	movw	r24, r28
     d5a:	0e 94 73 05 	call	0xae6	; 0xae6 <_ZN8NRF24L0120enableACKWithPayloadEb>
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	ce 01       	movw	r24, r28
     d62:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN8NRF24L017powerONEb>
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	cf 90       	pop	r12
     d74:	08 95       	ret

00000d76 <_ZN8NRF24L01C1Ehhb>:
     d76:	3f ef       	ldi	r19, 0xFF	; 255
     d78:	50 e7       	ldi	r21, 0x70	; 112
     d7a:	72 e0       	ldi	r23, 0x02	; 2
     d7c:	31 50       	subi	r19, 0x01	; 1
     d7e:	50 40       	sbci	r21, 0x00	; 0
     d80:	70 40       	sbci	r23, 0x00	; 0
     d82:	e1 f7       	brne	.-8      	; 0xd7c <_ZN8NRF24L01C1Ehhb+0x6>
     d84:	00 c0       	rjmp	.+0      	; 0xd86 <_ZN8NRF24L01C1Ehhb+0x10>
     d86:	00 00       	nop
     d88:	fc 01       	movw	r30, r24
     d8a:	27 83       	std	Z+7, r18	; 0x07
     d8c:	21 e0       	ldi	r18, 0x01	; 1
     d8e:	20 87       	std	Z+8, r18	; 0x08
     d90:	60 83       	st	Z, r22
     d92:	41 83       	std	Z+1, r20	; 0x01
     d94:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN8NRF24L0110initializeEv>
     d98:	08 95       	ret

00000d9a <_ZN8NRF24L0119fastTransferPayloadEh>:

void NRF24L01::fastTransferPayload(volatile uint8_t data){
     d9a:	af 92       	push	r10
     d9c:	bf 92       	push	r11
     d9e:	cf 92       	push	r12
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	1f 92       	push	r1
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	5c 01       	movw	r10, r24
     db4:	69 83       	std	Y+1, r22	; 0x01
	static uint8_t status;
	status = sendSPICommand(0xFF);
     db6:	6f ef       	ldi	r22, 0xFF	; 255
     db8:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN8NRF24L0114sendSPICommandEh>
     dbc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZN8NRF24L0119fastTransferPayloadEhE6status>
	if(!(status & 0x01)){
     dc0:	80 fd       	sbrc	r24, 0
     dc2:	09 c0       	rjmp	.+18     	; 0xdd6 <_ZN8NRF24L0119fastTransferPayloadEh+0x3c>
		CSN = 0;
     dc4:	41 98       	cbi	0x08, 1	; 8
		SPI_MasterTransmit(0xA0);
     dc6:	80 ea       	ldi	r24, 0xA0	; 160
     dc8:	0e 94 0a 01 	call	0x214	; 0x214 <_Z18SPI_MasterTransmitc>
		SPI_MasterTransmit(data);
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	0e 94 0a 01 	call	0x214	; 0x214 <_Z18SPI_MasterTransmitc>
		CSN = 1;
     dd2:	41 9a       	sbi	0x08, 1	; 8
		return;
     dd4:	12 c0       	rjmp	.+36     	; 0xdfa <_ZN8NRF24L0119fastTransferPayloadEh+0x60>
	}
	if(status & 0x10)
     dd6:	84 ff       	sbrs	r24, 4
     dd8:	10 c0       	rjmp	.+32     	; 0xdfa <_ZN8NRF24L0119fastTransferPayloadEh+0x60>
	writeSPIRegister(0x07,0x10,1);
     dda:	cc 24       	eor	r12, r12
     ddc:	c3 94       	inc	r12
     dde:	68 94       	set
     de0:	ee 24       	eor	r14, r14
     de2:	e4 f8       	bld	r14, 4
     de4:	f1 2c       	mov	r15, r1
     de6:	00 e0       	ldi	r16, 0x00	; 0
     de8:	10 e0       	ldi	r17, 0x00	; 0
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	67 e0       	ldi	r22, 0x07	; 7
     df4:	c5 01       	movw	r24, r10
     df6:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
}
     dfa:	0f 90       	pop	r0
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	cf 90       	pop	r12
     e0a:	bf 90       	pop	r11
     e0c:	af 90       	pop	r10
     e0e:	08 95       	ret

00000e10 <_ZN8NRF24L0118setTransmitAddressEy>:
	}
	CSN = 1;
	return status;
}

void NRF24L01::setTransmitAddress(uint64_t address){
     e10:	cf 92       	push	r12
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
	writeSPIRegister(TX_ADDR, address, 5);
     e1a:	0f 2e       	mov	r0, r31
     e1c:	f5 e0       	ldi	r31, 0x05	; 5
     e1e:	cf 2e       	mov	r12, r31
     e20:	f0 2d       	mov	r31, r0
     e22:	e0 2e       	mov	r14, r16
     e24:	f1 2e       	mov	r15, r17
     e26:	02 2f       	mov	r16, r18
     e28:	13 2f       	mov	r17, r19
     e2a:	24 2f       	mov	r18, r20
     e2c:	35 2f       	mov	r19, r21
     e2e:	46 2f       	mov	r20, r22
     e30:	57 2f       	mov	r21, r23
     e32:	60 e1       	ldi	r22, 0x10	; 16
     e34:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
}
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	cf 90       	pop	r12
     e42:	08 95       	ret

00000e44 <_ZN8NRF24L0117setReceiveAddressEyh>:

void NRF24L01::setReceiveAddress(uint64_t address, uint8_t pipe){
     e44:	cf 92       	push	r12
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	f2 2f       	mov	r31, r18
     e50:	24 2f       	mov	r18, r20
     e52:	46 2f       	mov	r20, r22
	writeSPIRegister(RX_ADDR_P0 + pipe, address, 5);
     e54:	6a e0       	ldi	r22, 0x0A	; 10
     e56:	6e 0d       	add	r22, r14
     e58:	0f 2e       	mov	r0, r31
     e5a:	f5 e0       	ldi	r31, 0x05	; 5
     e5c:	cf 2e       	mov	r12, r31
     e5e:	f0 2d       	mov	r31, r0
     e60:	e0 2e       	mov	r14, r16
     e62:	f1 2e       	mov	r15, r17
     e64:	0f 2f       	mov	r16, r31
     e66:	13 2f       	mov	r17, r19
     e68:	35 2f       	mov	r19, r21
     e6a:	57 2f       	mov	r21, r23
     e6c:	0e 94 67 04 	call	0x8ce	; 0x8ce <_ZN8NRF24L0116writeSPIRegisterEhyh>
}
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	cf 90       	pop	r12
     e7a:	08 95       	ret

00000e7c <_ZN8NRF24L017flushTXEv>:

void NRF24L01::flushTX(){
	sendSPICommand(FLUSH_TX);
     e7c:	61 ee       	ldi	r22, 0xE1	; 225
     e7e:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN8NRF24L0114sendSPICommandEh>
     e82:	08 95       	ret

00000e84 <_ZN11SwitchClass9doNothingEh>:
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     e84:	08 95       	ret

00000e86 <_ZN11SwitchClass5beginEv>:
     e86:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <_ZN11SwitchClass1iE>
     e8a:	82 e4       	ldi	r24, 0x42	; 66
     e8c:	97 e0       	ldi	r25, 0x07	; 7
     e8e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_ZN11SwitchClass17PinStateChangePtrE+0x1>
     e92:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZN11SwitchClass17PinStateChangePtrE>
     e96:	08 95       	ret

00000e98 <_ZN11SwitchClass11fallingEdgeEPFvhE>:
     e98:	fc 01       	movw	r30, r24
     e9a:	71 8f       	std	Z+25, r23	; 0x19
     e9c:	60 8f       	std	Z+24, r22	; 0x18
     e9e:	70 93 0a 02 	sts	0x020A, r23	; 0x80020a <_ZN11SwitchClass17AllFallingEdgePtrE+0x1>
     ea2:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <_ZN11SwitchClass17AllFallingEdgePtrE>
     ea6:	21 e0       	ldi	r18, 0x01	; 1
     ea8:	21 a3       	std	Z+33, r18	; 0x21
     eaa:	08 95       	ret

00000eac <_ZN11SwitchClass10risingEdgeEPFvhE>:
     eac:	fc 01       	movw	r30, r24
     eae:	77 8b       	std	Z+23, r23	; 0x17
     eb0:	66 8b       	std	Z+22, r22	; 0x16
     eb2:	70 93 0c 02 	sts	0x020C, r23	; 0x80020c <_ZN11SwitchClass16AllRisingEdgePtrE+0x1>
     eb6:	60 93 0b 02 	sts	0x020B, r22	; 0x80020b <_ZN11SwitchClass16AllRisingEdgePtrE>
     eba:	21 e0       	ldi	r18, 0x01	; 1
     ebc:	22 a3       	std	Z+34, r18	; 0x22
     ebe:	08 95       	ret

00000ec0 <_ZN11SwitchClass18doubleWaitCompleteEv>:
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	ec 01       	movw	r28, r24
     ec6:	1d a2       	std	Y+37, r1	; 0x25
     ec8:	1e a2       	std	Y+38, r1	; 0x26
     eca:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN10TimerClass10resetTimerEv>
     ece:	ce 01       	movw	r24, r28
     ed0:	0e 94 92 0a 	call	0x1524	; 0x1524 <_ZN10TimerClass18resetCallbackTimerEv>
     ed4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ed6:	81 11       	cpse	r24, r1
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <_ZN11SwitchClass18doubleWaitCompleteEv+0x22>
     eda:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_ZN11SwitchClass11AllShort_ENE>
     ede:	88 23       	and	r24, r24
     ee0:	c9 f0       	breq	.+50     	; 0xf14 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     ee2:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <_ZN11SwitchClass13AllSamePtr_ENE>
     ee6:	88 23       	and	r24, r24
     ee8:	61 f0       	breq	.+24     	; 0xf02 <_ZN11SwitchClass18doubleWaitCompleteEv+0x42>
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
     ef0:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <_ZN11SwitchClass16AllShortPressPtrE>
     ef4:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     ef8:	30 97       	sbiw	r30, 0x00	; 0
     efa:	61 f0       	breq	.+24     	; 0xf14 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     efc:	88 a5       	ldd	r24, Y+40	; 0x28
     efe:	09 95       	icall
     f00:	09 c0       	rjmp	.+18     	; 0xf14 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
     f08:	ee 85       	ldd	r30, Y+14	; 0x0e
     f0a:	ff 85       	ldd	r31, Y+15	; 0x0f
     f0c:	30 97       	sbiw	r30, 0x00	; 0
     f0e:	11 f0       	breq	.+4      	; 0xf14 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     f10:	88 a5       	ldd	r24, Y+40	; 0x28
     f12:	09 95       	icall
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <_ZN11SwitchClass17callAllDoubleWaitEh>:
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <_ZN11SwitchClass1iE>
     f22:	99 23       	and	r25, r25
     f24:	c1 f0       	breq	.+48     	; 0xf56 <_ZN11SwitchClass17callAllDoubleWaitEh+0x3c>
     f26:	d8 2f       	mov	r29, r24
     f28:	c0 e0       	ldi	r28, 0x00	; 0
     f2a:	ec 2f       	mov	r30, r28
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	e2 5e       	subi	r30, 0xE2	; 226
     f34:	fd 4f       	sbci	r31, 0xFD	; 253
     f36:	01 90       	ld	r0, Z+
     f38:	f0 81       	ld	r31, Z
     f3a:	e0 2d       	mov	r30, r0
     f3c:	93 a5       	ldd	r25, Z+43	; 0x2b
     f3e:	9d 13       	cpse	r25, r29
     f40:	05 c0       	rjmp	.+10     	; 0xf4c <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     f42:	30 97       	sbiw	r30, 0x00	; 0
     f44:	19 f0       	breq	.+6      	; 0xf4c <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     f46:	cf 01       	movw	r24, r30
     f48:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN11SwitchClass18doubleWaitCompleteEv>
     f4c:	cf 5f       	subi	r28, 0xFF	; 255
     f4e:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <_ZN11SwitchClass1iE>
     f52:	c9 17       	cp	r28, r25
     f54:	50 f3       	brcs	.-44     	; 0xf2a <_ZN11SwitchClass17callAllDoubleWaitEh+0x10>
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <_ZN11SwitchClass16updatePinBuffersEv>:
     f5c:	83 b1       	in	r24, 0x03	; 3
     f5e:	e9 e1       	ldi	r30, 0x19	; 25
     f60:	f2 e0       	ldi	r31, 0x02	; 2
     f62:	80 83       	st	Z, r24
     f64:	86 b1       	in	r24, 0x06	; 6
     f66:	81 83       	std	Z+1, r24	; 0x01
     f68:	89 b1       	in	r24, 0x09	; 9
     f6a:	82 83       	std	Z+2, r24	; 0x02
     f6c:	08 95       	ret

00000f6e <_ZN11SwitchClass10pollSwitchEv>:
     f6e:	fc 01       	movw	r30, r24
     f70:	82 a5       	ldd	r24, Z+42	; 0x2a
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	49 f0       	breq	.+18     	; 0xf88 <_ZN11SwitchClass10pollSwitchEv+0x1a>
     f76:	18 f0       	brcs	.+6      	; 0xf7e <_ZN11SwitchClass10pollSwitchEv+0x10>
     f78:	82 30       	cpi	r24, 0x02	; 2
     f7a:	59 f0       	breq	.+22     	; 0xf92 <_ZN11SwitchClass10pollSwitchEv+0x24>
     f7c:	0e c0       	rjmp	.+28     	; 0xf9a <_ZN11SwitchClass10pollSwitchEv+0x2c>
     f7e:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <_ZN11SwitchClass9PinBufferE>
     f82:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_ZN11SwitchClass11SwitchStateE>
     f86:	09 c0       	rjmp	.+18     	; 0xf9a <_ZN11SwitchClass10pollSwitchEv+0x2c>
     f88:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <_ZN11SwitchClass9PinBufferE+0x1>
     f8c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_ZN11SwitchClass11SwitchStateE>
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <_ZN11SwitchClass10pollSwitchEv+0x2c>
     f92:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <_ZN11SwitchClass9PinBufferE+0x2>
     f96:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_ZN11SwitchClass11SwitchStateE>
     f9a:	82 8d       	ldd	r24, Z+26	; 0x1a
     f9c:	83 a3       	std	Z+35, r24	; 0x23
     f9e:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <_ZN11SwitchClass11SwitchStateE>
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	01 a4       	ldd	r0, Z+41	; 0x29
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <_ZN11SwitchClass10pollSwitchEv+0x3e>
     fa8:	35 95       	asr	r19
     faa:	27 95       	ror	r18
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <_ZN11SwitchClass10pollSwitchEv+0x3a>
     fb0:	21 70       	andi	r18, 0x01	; 1
     fb2:	22 8f       	std	Z+26, r18	; 0x1a
     fb4:	08 95       	ret

00000fb6 <_ZN11SwitchClass16initializeSwitchEhhPS_>:
     fb6:	ef 92       	push	r14
     fb8:	ff 92       	push	r15
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	ec 01       	movw	r28, r24
     fc4:	f6 2e       	mov	r15, r22
     fc6:	e4 2e       	mov	r14, r20
     fc8:	89 01       	movw	r16, r18
     fca:	1f 86       	std	Y+15, r1	; 0x0f
     fcc:	1e 86       	std	Y+14, r1	; 0x0e
     fce:	1b 8a       	std	Y+19, r1	; 0x13
     fd0:	1a 8a       	std	Y+18, r1	; 0x12
     fd2:	19 8a       	std	Y+17, r1	; 0x11
     fd4:	18 8a       	std	Y+16, r1	; 0x10
     fd6:	1d 8a       	std	Y+21, r1	; 0x15
     fd8:	1c 8a       	std	Y+20, r1	; 0x14
     fda:	1f 8a       	std	Y+23, r1	; 0x17
     fdc:	1e 8a       	std	Y+22, r1	; 0x16
     fde:	19 8e       	std	Y+25, r1	; 0x19
     fe0:	18 8e       	std	Y+24, r1	; 0x18
     fe2:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN10TimerClass15initializeTimerEv>
     fe6:	e9 a6       	std	Y+41, r14	; 0x29
     fe8:	fa a6       	std	Y+42, r15	; 0x2a
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	6e 2d       	mov	r22, r14
     fee:	8f 2d       	mov	r24, r15
     ff0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z15setPinDirectionhhb>
     ff4:	41 e0       	ldi	r20, 0x01	; 1
     ff6:	69 a5       	ldd	r22, Y+41	; 0x29
     ff8:	8a a5       	ldd	r24, Y+42	; 0x2a
     ffa:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z11setPinStatehhb>
     ffe:	41 e0       	ldi	r20, 0x01	; 1
    1000:	6e 2d       	mov	r22, r14
    1002:	8f 2d       	mov	r24, r15
    1004:	0e 94 c1 01 	call	0x382	; 0x382 <_Z21setPinChangeInterrupthhb>
    1008:	8a a5       	ldd	r24, Y+42	; 0x2a
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	41 f0       	breq	.+16     	; 0x101e <_ZN11SwitchClass16initializeSwitchEhhPS_+0x68>
    100e:	18 f0       	brcs	.+6      	; 0x1016 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x60>
    1010:	82 30       	cpi	r24, 0x02	; 2
    1012:	49 f0       	breq	.+18     	; 0x1026 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x70>
    1014:	0b c0       	rjmp	.+22     	; 0x102c <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
    1016:	83 b1       	in	r24, 0x03	; 3
    1018:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_ZN11SwitchClass11SwitchStateE>
    101c:	07 c0       	rjmp	.+14     	; 0x102c <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
    101e:	86 b1       	in	r24, 0x06	; 6
    1020:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_ZN11SwitchClass11SwitchStateE>
    1024:	03 c0       	rjmp	.+6      	; 0x102c <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
    1026:	89 b1       	in	r24, 0x09	; 9
    1028:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_ZN11SwitchClass11SwitchStateE>
    102c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <_ZN11SwitchClass1iE>
    1030:	e8 2f       	mov	r30, r24
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	e2 5e       	subi	r30, 0xE2	; 226
    103a:	fd 4f       	sbci	r31, 0xFD	; 253
    103c:	11 83       	std	Z+1, r17	; 0x01
    103e:	00 83       	st	Z, r16
    1040:	88 a7       	std	Y+40, r24	; 0x28
    1042:	8f 5f       	subi	r24, 0xFF	; 255
    1044:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <_ZN11SwitchClass1iE>
    1048:	ce 01       	movw	r24, r28
    104a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN11SwitchClass16updatePinBuffersEv>
    104e:	ce 01       	movw	r24, r28
    1050:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN11SwitchClass10pollSwitchEv>
    1054:	1f 8e       	std	Y+31, r1	; 0x1f
    1056:	ce 01       	movw	r24, r28
    1058:	0e 94 02 0b 	call	0x1604	; 0x1604 <_ZN10TimerClass10getTimerIDEv>
    105c:	8b a7       	std	Y+43, r24	; 0x2b
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	ef 90       	pop	r14
    106a:	08 95       	ret

0000106c <_ZN11SwitchClass18processStateChangeEv>:
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	ec 01       	movw	r28, r24
    1072:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN11SwitchClass10pollSwitchEv>
    1076:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1078:	81 11       	cpse	r24, r1
    107a:	29 c0       	rjmp	.+82     	; 0x10ce <_ZN11SwitchClass18processStateChangeEv+0x62>
    107c:	8b a1       	ldd	r24, Y+35	; 0x23
    107e:	88 23       	and	r24, r24
    1080:	09 f4       	brne	.+2      	; 0x1084 <_ZN11SwitchClass18processStateChangeEv+0x18>
    1082:	8a c0       	rjmp	.+276    	; 0x1198 <_ZN11SwitchClass18processStateChangeEv+0x12c>
    1084:	89 a1       	ldd	r24, Y+33	; 0x21
    1086:	88 23       	and	r24, r24
    1088:	31 f0       	breq	.+12     	; 0x1096 <_ZN11SwitchClass18processStateChangeEv+0x2a>
    108a:	e8 8d       	ldd	r30, Y+24	; 0x18
    108c:	f9 8d       	ldd	r31, Y+25	; 0x19
    108e:	30 97       	sbiw	r30, 0x00	; 0
    1090:	11 f0       	breq	.+4      	; 0x1096 <_ZN11SwitchClass18processStateChangeEv+0x2a>
    1092:	88 a5       	ldd	r24, Y+40	; 0x28
    1094:	09 95       	icall
    1096:	8d a1       	ldd	r24, Y+37	; 0x25
    1098:	81 11       	cpse	r24, r1
    109a:	08 c0       	rjmp	.+16     	; 0x10ac <_ZN11SwitchClass18processStateChangeEv+0x40>
    109c:	2c e5       	ldi	r18, 0x5C	; 92
    109e:	39 e0       	ldi	r19, 0x09	; 9
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	6c eb       	ldi	r22, 0xBC	; 188
    10a4:	72 e0       	ldi	r23, 0x02	; 2
    10a6:	ce 01       	movw	r24, r28
    10a8:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	8c a3       	std	Y+36, r24	; 0x24
    10b0:	8d a1       	ldd	r24, Y+37	; 0x25
    10b2:	88 23       	and	r24, r24
    10b4:	41 f0       	breq	.+16     	; 0x10c6 <_ZN11SwitchClass18processStateChangeEv+0x5a>
    10b6:	68 e5       	ldi	r22, 0x58	; 88
    10b8:	72 e0       	ldi	r23, 0x02	; 2
    10ba:	ce 01       	movw	r24, r28
    10bc:	0e 94 9f 0a 	call	0x153e	; 0x153e <_ZN10TimerClass7setTimeEj>
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	8e a3       	std	Y+38, r24	; 0x26
    10c4:	1d a2       	std	Y+37, r1	; 0x25
    10c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10c8:	88 23       	and	r24, r24
    10ca:	09 f4       	brne	.+2      	; 0x10ce <_ZN11SwitchClass18processStateChangeEv+0x62>
    10cc:	65 c0       	rjmp	.+202    	; 0x1198 <_ZN11SwitchClass18processStateChangeEv+0x12c>
    10ce:	8b a1       	ldd	r24, Y+35	; 0x23
    10d0:	81 11       	cpse	r24, r1
    10d2:	62 c0       	rjmp	.+196    	; 0x1198 <_ZN11SwitchClass18processStateChangeEv+0x12c>
    10d4:	8a a1       	ldd	r24, Y+34	; 0x22
    10d6:	88 23       	and	r24, r24
    10d8:	31 f0       	breq	.+12     	; 0x10e6 <_ZN11SwitchClass18processStateChangeEv+0x7a>
    10da:	ee 89       	ldd	r30, Y+22	; 0x16
    10dc:	ff 89       	ldd	r31, Y+23	; 0x17
    10de:	30 97       	sbiw	r30, 0x00	; 0
    10e0:	11 f0       	breq	.+4      	; 0x10e6 <_ZN11SwitchClass18processStateChangeEv+0x7a>
    10e2:	88 a5       	ldd	r24, Y+40	; 0x28
    10e4:	09 95       	icall
    10e6:	8e a1       	ldd	r24, Y+38	; 0x26
    10e8:	81 11       	cpse	r24, r1
    10ea:	06 c0       	rjmp	.+12     	; 0x10f8 <_ZN11SwitchClass18processStateChangeEv+0x8c>
    10ec:	ce 01       	movw	r24, r28
    10ee:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN10TimerClass15getCallBackTimeEv>
    10f2:	9f a7       	std	Y+47, r25	; 0x2f
    10f4:	8e a7       	std	Y+46, r24	; 0x2e
    10f6:	05 c0       	rjmp	.+10     	; 0x1102 <_ZN11SwitchClass18processStateChangeEv+0x96>
    10f8:	ce 01       	movw	r24, r28
    10fa:	0e 94 aa 0a 	call	0x1554	; 0x1554 <_ZN10TimerClass7getTimeEv>
    10fe:	9f a7       	std	Y+47, r25	; 0x2f
    1100:	8e a7       	std	Y+46, r24	; 0x2e
    1102:	ce 01       	movw	r24, r28
    1104:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN10TimerClass10resetTimerEv>
    1108:	ce 01       	movw	r24, r28
    110a:	0e 94 92 0a 	call	0x1524	; 0x1524 <_ZN10TimerClass18resetCallbackTimerEv>
    110e:	1c a2       	std	Y+36, r1	; 0x24
    1110:	8e a5       	ldd	r24, Y+46	; 0x2e
    1112:	9f a5       	ldd	r25, Y+47	; 0x2f
    1114:	0b 97       	sbiw	r24, 0x0b	; 11
    1116:	8d 34       	cpi	r24, 0x4D	; 77
    1118:	92 40       	sbci	r25, 0x02	; 2
    111a:	98 f5       	brcc	.+102    	; 0x1182 <_ZN11SwitchClass18processStateChangeEv+0x116>
    111c:	8e a1       	ldd	r24, Y+38	; 0x26
    111e:	81 11       	cpse	r24, r1
    1120:	17 c0       	rjmp	.+46     	; 0x1150 <_ZN11SwitchClass18processStateChangeEv+0xe4>
    1122:	8f a1       	ldd	r24, Y+39	; 0x27
    1124:	81 11       	cpse	r24, r1
    1126:	2f c0       	rjmp	.+94     	; 0x1186 <_ZN11SwitchClass18processStateChangeEv+0x11a>
    1128:	8f 8d       	ldd	r24, Y+31	; 0x1f
    112a:	88 23       	and	r24, r24
    112c:	59 f0       	breq	.+22     	; 0x1144 <_ZN11SwitchClass18processStateChangeEv+0xd8>
    112e:	2d e8       	ldi	r18, 0x8D	; 141
    1130:	37 e0       	ldi	r19, 0x07	; 7
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	64 e6       	ldi	r22, 0x64	; 100
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	ce 01       	movw	r24, r28
    113a:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	8d a3       	std	Y+37, r24	; 0x25
    1142:	03 c0       	rjmp	.+6      	; 0x114a <_ZN11SwitchClass18processStateChangeEv+0xde>
    1144:	ce 01       	movw	r24, r28
    1146:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN11SwitchClass18doubleWaitCompleteEv>
    114a:	8e a1       	ldd	r24, Y+38	; 0x26
    114c:	88 23       	and	r24, r24
    114e:	09 f1       	breq	.+66     	; 0x1192 <_ZN11SwitchClass18processStateChangeEv+0x126>
    1150:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <_ZN11SwitchClass13AllSamePtr_ENE>
    1154:	88 23       	and	r24, r24
    1156:	61 f0       	breq	.+24     	; 0x1170 <_ZN11SwitchClass18processStateChangeEv+0x104>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
    115e:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <_ZN11SwitchClass17AllDoublePressPtrE>
    1162:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <_ZN11SwitchClass17AllDoublePressPtrE+0x1>
    1166:	30 97       	sbiw	r30, 0x00	; 0
    1168:	61 f0       	breq	.+24     	; 0x1182 <_ZN11SwitchClass18processStateChangeEv+0x116>
    116a:	88 a5       	ldd	r24, Y+40	; 0x28
    116c:	09 95       	icall
    116e:	09 c0       	rjmp	.+18     	; 0x1182 <_ZN11SwitchClass18processStateChangeEv+0x116>
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
    1176:	ea 89       	ldd	r30, Y+18	; 0x12
    1178:	fb 89       	ldd	r31, Y+19	; 0x13
    117a:	30 97       	sbiw	r30, 0x00	; 0
    117c:	11 f0       	breq	.+4      	; 0x1182 <_ZN11SwitchClass18processStateChangeEv+0x116>
    117e:	88 a5       	ldd	r24, Y+40	; 0x28
    1180:	09 95       	icall
    1182:	8f a1       	ldd	r24, Y+39	; 0x27
    1184:	81 11       	cpse	r24, r1
    1186:	1f a2       	std	Y+39, r1	; 0x27
    1188:	8e a1       	ldd	r24, Y+38	; 0x26
    118a:	88 23       	and	r24, r24
    118c:	29 f0       	breq	.+10     	; 0x1198 <_ZN11SwitchClass18processStateChangeEv+0x12c>
    118e:	1e a2       	std	Y+38, r1	; 0x26
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <_ZN11SwitchClass18processStateChangeEv+0x12c>
    1192:	8f a1       	ldd	r24, Y+39	; 0x27
    1194:	81 11       	cpse	r24, r1
    1196:	f7 cf       	rjmp	.-18     	; 0x1186 <_ZN11SwitchClass18processStateChangeEv+0x11a>
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <_ZN11SwitchClass25callAllProcessStateChangeEv>:
    119e:	cf 93       	push	r28
    11a0:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <_ZN11SwitchClass1iE>
    11a4:	88 23       	and	r24, r24
    11a6:	91 f0       	breq	.+36     	; 0x11cc <_ZN11SwitchClass25callAllProcessStateChangeEv+0x2e>
    11a8:	c0 e0       	ldi	r28, 0x00	; 0
    11aa:	ec 2f       	mov	r30, r28
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	e2 5e       	subi	r30, 0xE2	; 226
    11b4:	fd 4f       	sbci	r31, 0xFD	; 253
    11b6:	80 81       	ld	r24, Z
    11b8:	91 81       	ldd	r25, Z+1	; 0x01
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <_ZN11SwitchClass25callAllProcessStateChangeEv+0x24>
    11be:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN11SwitchClass18processStateChangeEv>
    11c2:	cf 5f       	subi	r28, 0xFF	; 255
    11c4:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <_ZN11SwitchClass1iE>
    11c8:	c8 17       	cp	r28, r24
    11ca:	78 f3       	brcs	.-34     	; 0x11aa <_ZN11SwitchClass25callAllProcessStateChangeEv+0xc>
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <_ZN11SwitchClass16longWaitCompleteEv>:
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	ec 01       	movw	r28, r24
    11d6:	18 a2       	std	Y+32, r1	; 0x20
    11d8:	1d a2       	std	Y+37, r1	; 0x25
    11da:	1e a2       	std	Y+38, r1	; 0x26
    11dc:	8f a1       	ldd	r24, Y+39	; 0x27
    11de:	88 23       	and	r24, r24
    11e0:	89 f1       	breq	.+98     	; 0x1244 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    11e2:	ce 01       	movw	r24, r28
    11e4:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN11SwitchClass16updatePinBuffersEv>
    11e8:	ce 01       	movw	r24, r28
    11ea:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN11SwitchClass10pollSwitchEv>
    11ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11f0:	81 11       	cpse	r24, r1
    11f2:	28 c0       	rjmp	.+80     	; 0x1244 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    11f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11f6:	81 11       	cpse	r24, r1
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <_ZN11SwitchClass16longWaitCompleteEv+0x32>
    11fa:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <_ZN11SwitchClass20AllContinuousLong_ENE>
    11fe:	88 23       	and	r24, r24
    1200:	09 f1       	breq	.+66     	; 0x1244 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    1202:	2c e5       	ldi	r18, 0x5C	; 92
    1204:	39 e0       	ldi	r19, 0x09	; 9
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	66 e4       	ldi	r22, 0x46	; 70
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	ce 01       	movw	r24, r28
    120e:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    1212:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <_ZN11SwitchClass13AllSamePtr_ENE>
    1216:	88 23       	and	r24, r24
    1218:	61 f0       	breq	.+24     	; 0x1232 <_ZN11SwitchClass16longWaitCompleteEv+0x62>
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
    1220:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <_ZN11SwitchClass25AllContinuousLongPressPtrE>
    1224:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <_ZN11SwitchClass25AllContinuousLongPressPtrE+0x1>
    1228:	30 97       	sbiw	r30, 0x00	; 0
    122a:	61 f0       	breq	.+24     	; 0x1244 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    122c:	88 a5       	ldd	r24, Y+40	; 0x28
    122e:	09 95       	icall
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
    1238:	ec 89       	ldd	r30, Y+20	; 0x14
    123a:	fd 89       	ldd	r31, Y+21	; 0x15
    123c:	30 97       	sbiw	r30, 0x00	; 0
    123e:	11 f0       	breq	.+4      	; 0x1244 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    1240:	88 a5       	ldd	r24, Y+40	; 0x28
    1242:	09 95       	icall
    1244:	8c a1       	ldd	r24, Y+36	; 0x24
    1246:	88 23       	and	r24, r24
    1248:	a1 f1       	breq	.+104    	; 0x12b2 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    124a:	ce 01       	movw	r24, r28
    124c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN11SwitchClass16updatePinBuffersEv>
    1250:	ce 01       	movw	r24, r28
    1252:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN11SwitchClass10pollSwitchEv>
    1256:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1258:	81 11       	cpse	r24, r1
    125a:	2b c0       	rjmp	.+86     	; 0x12b2 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    125c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    125e:	81 11       	cpse	r24, r1
    1260:	04 c0       	rjmp	.+8      	; 0x126a <_ZN11SwitchClass16longWaitCompleteEv+0x9a>
    1262:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN11SwitchClass10AllLong_ENE>
    1266:	88 23       	and	r24, r24
    1268:	21 f1       	breq	.+72     	; 0x12b2 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    126a:	1c a2       	std	Y+36, r1	; 0x24
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	8f a3       	std	Y+39, r24	; 0x27
    1270:	2c e5       	ldi	r18, 0x5C	; 92
    1272:	39 e0       	ldi	r19, 0x09	; 9
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	62 e3       	ldi	r22, 0x32	; 50
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	ce 01       	movw	r24, r28
    127c:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    1280:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <_ZN11SwitchClass13AllSamePtr_ENE>
    1284:	88 23       	and	r24, r24
    1286:	61 f0       	breq	.+24     	; 0x12a0 <_ZN11SwitchClass16longWaitCompleteEv+0xd0>
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
    128e:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <_ZN11SwitchClass15AllLongPressPtrE>
    1292:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <_ZN11SwitchClass15AllLongPressPtrE+0x1>
    1296:	30 97       	sbiw	r30, 0x00	; 0
    1298:	61 f0       	breq	.+24     	; 0x12b2 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    129a:	88 a5       	ldd	r24, Y+40	; 0x28
    129c:	09 95       	icall
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
    12a6:	e8 89       	ldd	r30, Y+16	; 0x10
    12a8:	f9 89       	ldd	r31, Y+17	; 0x11
    12aa:	30 97       	sbiw	r30, 0x00	; 0
    12ac:	11 f0       	breq	.+4      	; 0x12b2 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    12ae:	88 a5       	ldd	r24, Y+40	; 0x28
    12b0:	09 95       	icall
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <_ZN11SwitchClass20callAllOjectLongWaitEh>:
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <_ZN11SwitchClass1iE>
    12c0:	99 23       	and	r25, r25
    12c2:	c1 f0       	breq	.+48     	; 0x12f4 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x3c>
    12c4:	d8 2f       	mov	r29, r24
    12c6:	c0 e0       	ldi	r28, 0x00	; 0
    12c8:	ec 2f       	mov	r30, r28
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	ee 0f       	add	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	e2 5e       	subi	r30, 0xE2	; 226
    12d2:	fd 4f       	sbci	r31, 0xFD	; 253
    12d4:	01 90       	ld	r0, Z+
    12d6:	f0 81       	ld	r31, Z
    12d8:	e0 2d       	mov	r30, r0
    12da:	93 a5       	ldd	r25, Z+43	; 0x2b
    12dc:	9d 13       	cpse	r25, r29
    12de:	05 c0       	rjmp	.+10     	; 0x12ea <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    12e0:	30 97       	sbiw	r30, 0x00	; 0
    12e2:	19 f0       	breq	.+6      	; 0x12ea <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    12e4:	cf 01       	movw	r24, r30
    12e6:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_ZN11SwitchClass16longWaitCompleteEv>
    12ea:	cf 5f       	subi	r28, 0xFF	; 255
    12ec:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <_ZN11SwitchClass1iE>
    12f0:	c9 17       	cp	r28, r25
    12f2:	50 f3       	brcs	.-44     	; 0x12c8 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x10>
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <__vector_1>:
}

ISR(INT0_vect){
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	2f 93       	push	r18
    1306:	3f 93       	push	r19
    1308:	4f 93       	push	r20
    130a:	5f 93       	push	r21
    130c:	6f 93       	push	r22
    130e:	7f 93       	push	r23
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	af 93       	push	r26
    1316:	bf 93       	push	r27
    1318:	ef 93       	push	r30
    131a:	ff 93       	push	r31
	Switch.PinBuffer[0] = PINB;
    131c:	83 b1       	in	r24, 0x03	; 3
    131e:	e9 e1       	ldi	r30, 0x19	; 25
    1320:	f2 e0       	ldi	r31, 0x02	; 2
    1322:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    1324:	86 b1       	in	r24, 0x06	; 6
    1326:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    1328:	89 b1       	in	r24, 0x09	; 9
    132a:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    132c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1336:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    133a:	ff 91       	pop	r31
    133c:	ef 91       	pop	r30
    133e:	bf 91       	pop	r27
    1340:	af 91       	pop	r26
    1342:	9f 91       	pop	r25
    1344:	8f 91       	pop	r24
    1346:	7f 91       	pop	r23
    1348:	6f 91       	pop	r22
    134a:	5f 91       	pop	r21
    134c:	4f 91       	pop	r20
    134e:	3f 91       	pop	r19
    1350:	2f 91       	pop	r18
    1352:	0f 90       	pop	r0
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	0f 90       	pop	r0
    1358:	1f 90       	pop	r1
    135a:	18 95       	reti

0000135c <__vector_2>:

ISR(INT1_vect){
    135c:	1f 92       	push	r1
    135e:	0f 92       	push	r0
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	0f 92       	push	r0
    1364:	11 24       	eor	r1, r1
    1366:	2f 93       	push	r18
    1368:	3f 93       	push	r19
    136a:	4f 93       	push	r20
    136c:	5f 93       	push	r21
    136e:	6f 93       	push	r22
    1370:	7f 93       	push	r23
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
	wakeUp();
    137e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1388:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <__vector_3>:

ISR(PCINT0_vect){
    13ae:	1f 92       	push	r1
    13b0:	0f 92       	push	r0
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	0f 92       	push	r0
    13b6:	11 24       	eor	r1, r1
    13b8:	2f 93       	push	r18
    13ba:	3f 93       	push	r19
    13bc:	4f 93       	push	r20
    13be:	5f 93       	push	r21
    13c0:	6f 93       	push	r22
    13c2:	7f 93       	push	r23
    13c4:	8f 93       	push	r24
    13c6:	9f 93       	push	r25
    13c8:	af 93       	push	r26
    13ca:	bf 93       	push	r27
    13cc:	ef 93       	push	r30
    13ce:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_B);
	Switch.PinBuffer[0] = PINB;
    13d0:	83 b1       	in	r24, 0x03	; 3
    13d2:	e9 e1       	ldi	r30, 0x19	; 25
    13d4:	f2 e0       	ldi	r31, 0x02	; 2
    13d6:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    13d8:	86 b1       	in	r24, 0x06	; 6
    13da:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    13dc:	89 b1       	in	r24, 0x09	; 9
    13de:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    13e0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    13ea:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    13ee:	ff 91       	pop	r31
    13f0:	ef 91       	pop	r30
    13f2:	bf 91       	pop	r27
    13f4:	af 91       	pop	r26
    13f6:	9f 91       	pop	r25
    13f8:	8f 91       	pop	r24
    13fa:	7f 91       	pop	r23
    13fc:	6f 91       	pop	r22
    13fe:	5f 91       	pop	r21
    1400:	4f 91       	pop	r20
    1402:	3f 91       	pop	r19
    1404:	2f 91       	pop	r18
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <__vector_4>:

ISR(PCINT1_vect){
    1410:	1f 92       	push	r1
    1412:	0f 92       	push	r0
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	0f 92       	push	r0
    1418:	11 24       	eor	r1, r1
    141a:	2f 93       	push	r18
    141c:	3f 93       	push	r19
    141e:	4f 93       	push	r20
    1420:	5f 93       	push	r21
    1422:	6f 93       	push	r22
    1424:	7f 93       	push	r23
    1426:	8f 93       	push	r24
    1428:	9f 93       	push	r25
    142a:	af 93       	push	r26
    142c:	bf 93       	push	r27
    142e:	ef 93       	push	r30
    1430:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_C);
	Switch.PinBuffer[0] = PINB;
    1432:	83 b1       	in	r24, 0x03	; 3
    1434:	e9 e1       	ldi	r30, 0x19	; 25
    1436:	f2 e0       	ldi	r31, 0x02	; 2
    1438:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    143a:	86 b1       	in	r24, 0x06	; 6
    143c:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    143e:	89 b1       	in	r24, 0x09	; 9
    1440:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1442:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    144c:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
	Switch.pinStateChanged();
}
    1450:	ff 91       	pop	r31
    1452:	ef 91       	pop	r30
    1454:	bf 91       	pop	r27
    1456:	af 91       	pop	r26
    1458:	9f 91       	pop	r25
    145a:	8f 91       	pop	r24
    145c:	7f 91       	pop	r23
    145e:	6f 91       	pop	r22
    1460:	5f 91       	pop	r21
    1462:	4f 91       	pop	r20
    1464:	3f 91       	pop	r19
    1466:	2f 91       	pop	r18
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	0f 90       	pop	r0
    146e:	1f 90       	pop	r1
    1470:	18 95       	reti

00001472 <__vector_5>:

ISR(PCINT2_vect){
    1472:	1f 92       	push	r1
    1474:	0f 92       	push	r0
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
    147c:	2f 93       	push	r18
    147e:	3f 93       	push	r19
    1480:	4f 93       	push	r20
    1482:	5f 93       	push	r21
    1484:	6f 93       	push	r22
    1486:	7f 93       	push	r23
    1488:	8f 93       	push	r24
    148a:	9f 93       	push	r25
    148c:	af 93       	push	r26
    148e:	bf 93       	push	r27
    1490:	ef 93       	push	r30
    1492:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_D);
	Switch.PinBuffer[0] = PINB;
    1494:	83 b1       	in	r24, 0x03	; 3
    1496:	e9 e1       	ldi	r30, 0x19	; 25
    1498:	f2 e0       	ldi	r31, 0x02	; 2
    149a:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    149c:	86 b1       	in	r24, 0x06	; 6
    149e:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    14a0:	89 b1       	in	r24, 0x09	; 9
    14a2:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    14a4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    14ae:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    14b2:	ff 91       	pop	r31
    14b4:	ef 91       	pop	r30
    14b6:	bf 91       	pop	r27
    14b8:	af 91       	pop	r26
    14ba:	9f 91       	pop	r25
    14bc:	8f 91       	pop	r24
    14be:	7f 91       	pop	r23
    14c0:	6f 91       	pop	r22
    14c2:	5f 91       	pop	r21
    14c4:	4f 91       	pop	r20
    14c6:	3f 91       	pop	r19
    14c8:	2f 91       	pop	r18
    14ca:	0f 90       	pop	r0
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	0f 90       	pop	r0
    14d0:	1f 90       	pop	r1
    14d2:	18 95       	reti

000014d4 <_ZN10TimerClass5beginEv>:
}


uint64_t TimerClass::millis(){
	return Time;
}
    14d4:	60 e4       	ldi	r22, 0x40	; 64
    14d6:	7f e1       	ldi	r23, 0x1F	; 31
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	0e 94 10 01 	call	0x220	; 0x220 <_Z11Init_CTC_T1hj>
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <_ZN10TimerClass1iE>
    14e4:	08 95       	ret

000014e6 <_ZN10TimerClass15initializeTimerEv>:
    14e6:	dc 01       	movw	r26, r24
    14e8:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <_ZN10TimerClass1iE>
    14ec:	e9 2f       	mov	r30, r25
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	ee 0f       	add	r30, r30
    14f2:	ff 1f       	adc	r31, r31
    14f4:	ed 5c       	subi	r30, 0xCD	; 205
    14f6:	fd 4f       	sbci	r31, 0xFD	; 253
    14f8:	b1 83       	std	Z+1, r27	; 0x01
    14fa:	a0 83       	st	Z, r26
    14fc:	15 96       	adiw	r26, 0x05	; 5
    14fe:	9c 93       	st	X, r25
    1500:	9f 5f       	subi	r25, 0xFF	; 255
    1502:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <_ZN10TimerClass1iE>
    1506:	08 95       	ret

00001508 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>:
    1508:	fc 01       	movw	r30, r24
    150a:	71 83       	std	Z+1, r23	; 0x01
    150c:	60 83       	st	Z, r22
    150e:	73 83       	std	Z+3, r23	; 0x03
    1510:	62 83       	std	Z+2, r22	; 0x02
    1512:	35 87       	std	Z+13, r19	; 0x0d
    1514:	24 87       	std	Z+12, r18	; 0x0c
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	83 87       	std	Z+11, r24	; 0x0b
    151a:	44 83       	std	Z+4, r20	; 0x04
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
    1522:	08 95       	ret

00001524 <_ZN10TimerClass18resetCallbackTimerEv>:
    1524:	fc 01       	movw	r30, r24
    1526:	13 86       	std	Z+11, r1	; 0x0b
    1528:	11 82       	std	Z+1, r1	; 0x01
    152a:	10 82       	st	Z, r1
    152c:	08 95       	ret

0000152e <_ZN10TimerClass15getCallBackTimeEv>:
    152e:	fc 01       	movw	r30, r24
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	93 81       	ldd	r25, Z+3	; 0x03
    1534:	20 81       	ld	r18, Z
    1536:	31 81       	ldd	r19, Z+1	; 0x01
    1538:	82 1b       	sub	r24, r18
    153a:	93 0b       	sbc	r25, r19
    153c:	08 95       	ret

0000153e <_ZN10TimerClass7setTimeEj>:
    153e:	fc 01       	movw	r30, r24
    1540:	77 83       	std	Z+7, r23	; 0x07
    1542:	66 83       	std	Z+6, r22	; 0x06
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	82 87       	std	Z+10, r24	; 0x0a
    1548:	71 87       	std	Z+9, r23	; 0x09
    154a:	60 87       	std	Z+8, r22	; 0x08
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
    1552:	08 95       	ret

00001554 <_ZN10TimerClass7getTimeEv>:
    1554:	fc 01       	movw	r30, r24
    1556:	80 85       	ldd	r24, Z+8	; 0x08
    1558:	91 85       	ldd	r25, Z+9	; 0x09
    155a:	26 81       	ldd	r18, Z+6	; 0x06
    155c:	37 81       	ldd	r19, Z+7	; 0x07
    155e:	82 1b       	sub	r24, r18
    1560:	93 0b       	sbc	r25, r19
    1562:	08 95       	ret

00001564 <_ZN10TimerClass10resetTimerEv>:
    1564:	fc 01       	movw	r30, r24
    1566:	17 82       	std	Z+7, r1	; 0x07
    1568:	16 82       	std	Z+6, r1	; 0x06
    156a:	12 86       	std	Z+10, r1	; 0x0a
    156c:	08 95       	ret

0000156e <_ZN10TimerClass11milliPassedEv>:

void TimerClass::milliPassed(){
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	ec 01       	movw	r28, r24
	if(Count_EN){
    1574:	8b 85       	ldd	r24, Y+11	; 0x0b
    1576:	88 23       	and	r24, r24
    1578:	e1 f0       	breq	.+56     	; 0x15b2 <_ZN10TimerClass11milliPassedEv+0x44>
		#ifdef DEBUG_TIMER
		//printChar('T');
		#endif
		if(Count)
    157a:	88 81       	ld	r24, Y
    157c:	99 81       	ldd	r25, Y+1	; 0x01
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	29 f0       	breq	.+10     	; 0x158c <_ZN10TimerClass11milliPassedEv+0x1e>
		Count -= 1;
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	99 83       	std	Y+1, r25	; 0x01
    1586:	88 83       	st	Y, r24
		if(!Count){
    1588:	89 2b       	or	r24, r25
    158a:	99 f4       	brne	.+38     	; 0x15b2 <_ZN10TimerClass11milliPassedEv+0x44>
			if(Mode == TIMER_MODE_REPEAT){
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	29 f4       	brne	.+10     	; 0x159c <_ZN10TimerClass11milliPassedEv+0x2e>
				Count = Count_Save;
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	9b 81       	ldd	r25, Y+3	; 0x03
    1596:	99 83       	std	Y+1, r25	; 0x01
    1598:	88 83       	st	Y, r24
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <_ZN10TimerClass11milliPassedEv+0x38>
			}
			if(Mode == TIMER_MODE_ONCE){
    159c:	81 11       	cpse	r24, r1
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <_ZN10TimerClass11milliPassedEv+0x38>
				Count_EN = 0;
    15a0:	1b 86       	std	Y+11, r1	; 0x0b
				Count = 0;
    15a2:	19 82       	std	Y+1, r1	; 0x01
    15a4:	18 82       	st	Y, r1
			}
			if(CallBackPtr != NULL){
    15a6:	ec 85       	ldd	r30, Y+12	; 0x0c
    15a8:	fd 85       	ldd	r31, Y+13	; 0x0d
    15aa:	30 97       	sbiw	r30, 0x00	; 0
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <_ZN10TimerClass11milliPassedEv+0x44>
				#ifdef DEBUG_TIMER
				printStringCRNL("Timer Done : ");
				printNumber(Timer_ID);
				#endif
				//allowSleep(1);
				CallBackPtr(Timer_ID);
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	09 95       	icall
			}
		}
	}
	if(NCount_EN){
    15b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15b4:	88 23       	and	r24, r24
    15b6:	51 f0       	breq	.+20     	; 0x15cc <_ZN10TimerClass11milliPassedEv+0x5e>
		if(NCount)
    15b8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ba:	9f 81       	ldd	r25, Y+7	; 0x07
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	29 f0       	breq	.+10     	; 0x15ca <_ZN10TimerClass11milliPassedEv+0x5c>
		NCount -= 1;
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	9f 83       	std	Y+7, r25	; 0x07
    15c4:	8e 83       	std	Y+6, r24	; 0x06
		if(!NCount){
    15c6:	89 2b       	or	r24, r25
    15c8:	09 f4       	brne	.+2      	; 0x15cc <_ZN10TimerClass11milliPassedEv+0x5e>
			NCount_EN = 0;
    15ca:	1a 86       	std	Y+10, r1	; 0x0a
		}
	}
}
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	08 95       	ret

000015d2 <_ZN10TimerClass19callAllTimerObjectsEv>:

void TimerClass::callAllTimerObjects(){
    15d2:	cf 93       	push	r28
	for(uint8_t a = 0; a < i; a += 1){
    15d4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <_ZN10TimerClass1iE>
    15d8:	88 23       	and	r24, r24
    15da:	91 f0       	breq	.+36     	; 0x1600 <_ZN10TimerClass19callAllTimerObjectsEv+0x2e>
    15dc:	c0 e0       	ldi	r28, 0x00	; 0
		if(Timers[a] != NULL)
    15de:	ec 2f       	mov	r30, r28
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	ed 5c       	subi	r30, 0xCD	; 205
    15e8:	fd 4f       	sbci	r31, 0xFD	; 253
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <_ZN10TimerClass19callAllTimerObjectsEv+0x24>
		Timers[a]->milliPassed();
    15f2:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN10TimerClass11milliPassedEv>
		}
	}
}

void TimerClass::callAllTimerObjects(){
	for(uint8_t a = 0; a < i; a += 1){
    15f6:	cf 5f       	subi	r28, 0xFF	; 255
    15f8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <_ZN10TimerClass1iE>
    15fc:	c8 17       	cp	r28, r24
    15fe:	78 f3       	brcs	.-34     	; 0x15de <_ZN10TimerClass19callAllTimerObjectsEv+0xc>
		if(Timers[a] != NULL)
		Timers[a]->milliPassed();
	}
}
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <_ZN10TimerClass10getTimerIDEv>:

uint8_t TimerClass::getTimerID(){
	return Timer_ID;
}
    1604:	fc 01       	movw	r30, r24
    1606:	85 81       	ldd	r24, Z+5	; 0x05
    1608:	08 95       	ret

0000160a <__vector_11>:



ISR(TIMER1_COMPA_vect){
    160a:	1f 92       	push	r1
    160c:	0f 92       	push	r0
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	2f 93       	push	r18
    1616:	3f 93       	push	r19
    1618:	4f 93       	push	r20
    161a:	5f 93       	push	r21
    161c:	6f 93       	push	r22
    161e:	7f 93       	push	r23
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
	//printChar('I');
	milliHappened();
    162c:	0e 94 1c 02 	call	0x438	; 0x438 <_Z13milliHappenedv>
	Timer.Time += 1;
    1630:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <_ZN10TimerClass4TimeE>
    1634:	30 91 2c 02 	lds	r19, 0x022C	; 0x80022c <_ZN10TimerClass4TimeE+0x1>
    1638:	40 91 2d 02 	lds	r20, 0x022D	; 0x80022d <_ZN10TimerClass4TimeE+0x2>
    163c:	50 91 2e 02 	lds	r21, 0x022E	; 0x80022e <_ZN10TimerClass4TimeE+0x3>
    1640:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <_ZN10TimerClass4TimeE+0x4>
    1644:	70 91 30 02 	lds	r23, 0x0230	; 0x800230 <_ZN10TimerClass4TimeE+0x5>
    1648:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <_ZN10TimerClass4TimeE+0x6>
    164c:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <_ZN10TimerClass4TimeE+0x7>
    1650:	a1 e0       	ldi	r26, 0x01	; 1
    1652:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__adddi3_s8>
    1656:	20 93 2b 02 	sts	0x022B, r18	; 0x80022b <_ZN10TimerClass4TimeE>
    165a:	30 93 2c 02 	sts	0x022C, r19	; 0x80022c <_ZN10TimerClass4TimeE+0x1>
    165e:	40 93 2d 02 	sts	0x022D, r20	; 0x80022d <_ZN10TimerClass4TimeE+0x2>
    1662:	50 93 2e 02 	sts	0x022E, r21	; 0x80022e <_ZN10TimerClass4TimeE+0x3>
    1666:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <_ZN10TimerClass4TimeE+0x4>
    166a:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <_ZN10TimerClass4TimeE+0x5>
    166e:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <_ZN10TimerClass4TimeE+0x6>
    1672:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <_ZN10TimerClass4TimeE+0x7>
	Timer.callAllTimerObjects();
    1676:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_ZN10TimerClass19callAllTimerObjectsEv>
	//printChar('O');
}
    167a:	ff 91       	pop	r31
    167c:	ef 91       	pop	r30
    167e:	bf 91       	pop	r27
    1680:	af 91       	pop	r26
    1682:	9f 91       	pop	r25
    1684:	8f 91       	pop	r24
    1686:	7f 91       	pop	r23
    1688:	6f 91       	pop	r22
    168a:	5f 91       	pop	r21
    168c:	4f 91       	pop	r20
    168e:	3f 91       	pop	r19
    1690:	2f 91       	pop	r18
    1692:	0f 90       	pop	r0
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	0f 90       	pop	r0
    1698:	1f 90       	pop	r1
    169a:	18 95       	reti

0000169c <_Z15sensorTriggeredh>:
		}
	}
}

void sensorTriggered(uint8_t Switch_ID){
	TriggeredFlag = true;
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <TriggeredFlag>
	SwitchID = Switch_ID;
    16a2:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <SwitchID>
	allowSleep(false);
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
    16ac:	08 95       	ret

000016ae <_Z12sensorNormalh>:
}

void sensorNormal(uint8_t Switch_ID){
	NormalFlag = true;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <NormalFlag>
	allowSleep(false);
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
    16ba:	08 95       	ret

000016bc <_Z9timerDoneh>:

void timerDone(uint8_t Timer_ID){
	#ifdef DEBUG_MAIN
	printStringCRNL("Timer done.");
	#endif
	 TimeOut = true;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <TimeOut>
	 LED = 0;
    16c2:	5a 98       	cbi	0x0b, 2	; 11
	 allowSleep(1);
    16c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
    16c8:	08 95       	ret

000016ca <_Z8runSetupv>:
}


void runSetup(){
	USART_Init(MYUBRR);
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z10USART_Initj>
	Init_CTC_T1(2,1000);
    16d2:	68 ee       	ldi	r22, 0xE8	; 232
    16d4:	73 e0       	ldi	r23, 0x03	; 3
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	0e 94 10 01 	call	0x220	; 0x220 <_Z11Init_CTC_T1hj>
	SPI_MasterInit();
    16dc:	0e 94 01 01 	call	0x202	; 0x202 <_Z14SPI_MasterInitv>
	setPinDirection(PORT_D, 2, 1);
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	62 e0       	ldi	r22, 0x02	; 2
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z15setPinDirectionhhb>
	setPinDirection(PORT_B, 6, 1);
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	66 e0       	ldi	r22, 0x06	; 6
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z15setPinDirectionhhb>
	SENSOR_POWER = 1;
    16f4:	2e 9a       	sbi	0x05, 6	; 5
    16f6:	08 95       	ret

000016f8 <main>:
TimerClass Timer1, Timer2;
SwitchClass S1, S2, S3, S4, S5, S6;


int main(void)
{
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	29 97       	sbiw	r28, 0x09	; 9
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
	runSetup();
    170c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_Z8runSetupv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1710:	2f ef       	ldi	r18, 0xFF	; 255
    1712:	84 e3       	ldi	r24, 0x34	; 52
    1714:	9c e0       	ldi	r25, 0x0C	; 12
    1716:	21 50       	subi	r18, 0x01	; 1
    1718:	80 40       	sbci	r24, 0x00	; 0
    171a:	90 40       	sbci	r25, 0x00	; 0
    171c:	e1 f7       	brne	.-8      	; 0x1716 <main+0x1e>
    171e:	00 c0       	rjmp	.+0      	; 0x1720 <main+0x28>
    1720:	00 00       	nop
	_delay_ms(500);
	Notify(PSTR("Powering on..."));
    1722:	8a e9       	ldi	r24, 0x9A	; 154
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	0e 94 28 03 	call	0x650	; 0x650 <_Z6NotifyPKc>
	sei();
    172a:	78 94       	sei
	TimeOut = false;
    172c:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <TimeOut>
	NRF24L01 Radio(1,1,0);
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	41 e0       	ldi	r20, 0x01	; 1
    1734:	61 e0       	ldi	r22, 0x01	; 1
    1736:	ce 01       	movw	r24, r28
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN8NRF24L01C1Ehhb>
	Radio.setTransmitAddress(0xEABABABAC2);
    173e:	02 ec       	ldi	r16, 0xC2	; 194
    1740:	1a eb       	ldi	r17, 0xBA	; 186
    1742:	2a eb       	ldi	r18, 0xBA	; 186
    1744:	3a eb       	ldi	r19, 0xBA	; 186
    1746:	4a ee       	ldi	r20, 0xEA	; 234
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	ce 01       	movw	r24, r28
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	0e 94 08 07 	call	0xe10	; 0xe10 <_ZN8NRF24L0118setTransmitAddressEy>
	Radio.setReceiveAddress(0xEABABABAC2, 0);
    1756:	e1 2c       	mov	r14, r1
    1758:	2a eb       	ldi	r18, 0xBA	; 186
    175a:	3a eb       	ldi	r19, 0xBA	; 186
    175c:	4a ee       	ldi	r20, 0xEA	; 234
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	ce 01       	movw	r24, r28
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN8NRF24L0117setReceiveAddressEyh>
	//Radio.initialize();
	Timer1.begin();
    176c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN10TimerClass5beginEv>
	Timer1.initializeTimer();
    1770:	8d ea       	ldi	r24, 0xAD	; 173
    1772:	92 e0       	ldi	r25, 0x02	; 2
    1774:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN10TimerClass15initializeTimerEv>
	Timer2.initializeTimer();
    1778:	8f e9       	ldi	r24, 0x9F	; 159
    177a:	92 e0       	ldi	r25, 0x02	; 2
    177c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN10TimerClass15initializeTimerEv>
	Timer1.setCallBackTime(100, 0, timerDone);
    1780:	2e e5       	ldi	r18, 0x5E	; 94
    1782:	3b e0       	ldi	r19, 0x0B	; 11
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	64 e6       	ldi	r22, 0x64	; 100
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	8d ea       	ldi	r24, 0xAD	; 173
    178c:	92 e0       	ldi	r25, 0x02	; 2
    178e:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
	S1.begin();
    1792:	0e 94 43 07 	call	0xe86	; 0xe86 <_ZN11SwitchClass5beginEv>
	S1.initializeSwitch(PORT_B, 0, &S1); //1
    1796:	2f e6       	ldi	r18, 0x6F	; 111
    1798:	32 e0       	ldi	r19, 0x02	; 2
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	c9 01       	movw	r24, r18
    17a0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S1.fallingEdge(sensorNormal);
    17a4:	67 e5       	ldi	r22, 0x57	; 87
    17a6:	7b e0       	ldi	r23, 0x0B	; 11
    17a8:	8f e6       	ldi	r24, 0x6F	; 111
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN11SwitchClass11fallingEdgeEPFvhE>
	S1.risingEdge(sensorTriggered);
    17b0:	6e e4       	ldi	r22, 0x4E	; 78
    17b2:	7b e0       	ldi	r23, 0x0B	; 11
    17b4:	8f e6       	ldi	r24, 0x6F	; 111
    17b6:	92 e0       	ldi	r25, 0x02	; 2
    17b8:	0e 94 56 07 	call	0xeac	; 0xeac <_ZN11SwitchClass10risingEdgeEPFvhE>
	Notify(PSTR("Done"));
    17bc:	85 e9       	ldi	r24, 0x95	; 149
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	0e 94 28 03 	call	0x650	; 0x650 <_Z6NotifyPKc>
	allowSleep(true);
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10allowSleepb>
	if(Radio.isRT_Max_Set())
    17ca:	ce 01       	movw	r24, r28
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN8NRF24L0112isRT_Max_SetEv>
    17d2:	88 23       	and	r24, r24
    17d4:	21 f0       	breq	.+8      	; 0x17de <main+0xe6>
	Radio.clearRT_Max();
    17d6:	ce 01       	movw	r24, r28
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN8NRF24L0111clearRT_MaxEv>
	if(Radio.isTXFull())
    17de:	ce 01       	movw	r24, r28
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8NRF24L018isTXFullEv>
    17e6:	88 23       	and	r24, r24
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <main+0xfa>
	Radio.flushTX();
    17ea:	ce 01       	movw	r24, r28
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZN8NRF24L017flushTXEv>
	if(Radio.isTX_DS_Set())
    17f2:	ce 01       	movw	r24, r28
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN8NRF24L0111isTX_DS_SetEv>
    17fa:	88 23       	and	r24, r24
    17fc:	21 f0       	breq	.+8      	; 0x1806 <main+0x10e>
	Radio.clearTX_DS();
    17fe:	ce 01       	movw	r24, r28
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN8NRF24L0110clearTX_DSEv>
	while (1)
	{	
		if(TriggeredFlag){
    1806:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <TriggeredFlag>
    180a:	88 23       	and	r24, r24
    180c:	09 f4       	brne	.+2      	; 0x1810 <main+0x118>
    180e:	6c c0       	rjmp	.+216    	; 0x18e8 <main+0x1f0>
			TriggeredFlag = false;
    1810:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <TriggeredFlag>
			#ifdef STATS
			printStringCRNL("Sensor triggered: ");
    1814:	8d e5       	ldi	r24, 0x5D	; 93
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 41 03 	call	0x682	; 0x682 <_Z15printStringCRNLPKc>
			printNumber(SwitchID);
    181c:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <SwitchID>
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 8c 02 	call	0x518	; 0x518 <_Z11printNumbery>
			#endif
			Radio.fastTransferPayload(0x21);
    1832:	61 e2       	ldi	r22, 0x21	; 33
    1834:	ce 01       	movw	r24, r28
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN8NRF24L0119fastTransferPayloadEh>
			TimeOut = false;
    183c:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <TimeOut>
			Timer2.setCallBackTime(50, 0, timerDone);
    1840:	2e e5       	ldi	r18, 0x5E	; 94
    1842:	3b e0       	ldi	r19, 0x0B	; 11
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	62 e3       	ldi	r22, 0x32	; 50
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	8f e9       	ldi	r24, 0x9F	; 159
    184c:	92 e0       	ldi	r25, 0x02	; 2
    184e:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
			while(Radio.isTX_DS_Set() != 0x20 && !TimeOut){
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN8NRF24L0111isTX_DS_SetEv>
    185a:	80 32       	cpi	r24, 0x20	; 32
    185c:	09 f4       	brne	.+2      	; 0x1860 <main+0x168>
    185e:	d8 c0       	rjmp	.+432    	; 0x1a10 <main+0x318>
    1860:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <TimeOut>
    1864:	81 11       	cpse	r24, r1
    1866:	d4 c0       	rjmp	.+424    	; 0x1a10 <main+0x318>
    1868:	f4 cf       	rjmp	.-24     	; 0x1852 <main+0x15a>
				
			}
			if(Radio.isTX_DS_Set() == 0x20){
				LED = 1;
    186a:	5a 9a       	sbi	0x0b, 2	; 11
				Radio.clearTX_DS();
    186c:	ce 01       	movw	r24, r28
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN8NRF24L0110clearTX_DSEv>
				Timer1.setCallBackTime(50, 0, timerDone);
    1874:	2e e5       	ldi	r18, 0x5E	; 94
    1876:	3b e0       	ldi	r19, 0x0B	; 11
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	62 e3       	ldi	r22, 0x32	; 50
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	8d ea       	ldi	r24, 0xAD	; 173
    1880:	92 e0       	ldi	r25, 0x02	; 2
    1882:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
				Timer2.resetCallbackTimer();
    1886:	8f e9       	ldi	r24, 0x9F	; 159
    1888:	92 e0       	ldi	r25, 0x02	; 2
    188a:	0e 94 92 0a 	call	0x1524	; 0x1524 <_ZN10TimerClass18resetCallbackTimerEv>
				#ifdef STATS
				printStringCRNL("Payload transmitted.");
    188e:	80 e7       	ldi	r24, 0x70	; 112
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	0e 94 41 03 	call	0x682	; 0x682 <_Z15printStringCRNLPKc>
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <main+0x1ac>
				#endif
				//Radio.flushTX();
			}
			else{
				TimeOut = false;
    1898:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <TimeOut>
				//Radio.flushTX();
				#ifdef STATS
				printStringCRNL("Timed out");
    189c:	85 e8       	ldi	r24, 0x85	; 133
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	0e 94 41 03 	call	0x682	; 0x682 <_Z15printStringCRNLPKc>
				#endif
			}
			if(Radio.isRT_Max_Set())
    18a4:	ce 01       	movw	r24, r28
    18a6:	01 96       	adiw	r24, 0x01	; 1
    18a8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN8NRF24L0112isRT_Max_SetEv>
    18ac:	88 23       	and	r24, r24
    18ae:	21 f0       	breq	.+8      	; 0x18b8 <main+0x1c0>
			Radio.clearRT_Max();
    18b0:	ce 01       	movw	r24, r28
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN8NRF24L0111clearRT_MaxEv>
			if(Radio.isTXFull())
    18b8:	ce 01       	movw	r24, r28
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8NRF24L018isTXFullEv>
    18c0:	88 23       	and	r24, r24
    18c2:	21 f0       	breq	.+8      	; 0x18cc <main+0x1d4>
			Radio.flushTX();
    18c4:	ce 01       	movw	r24, r28
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZN8NRF24L017flushTXEv>
			if(Radio.isTX_DS_Set())
    18cc:	ce 01       	movw	r24, r28
    18ce:	01 96       	adiw	r24, 0x01	; 1
    18d0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN8NRF24L0111isTX_DS_SetEv>
    18d4:	88 23       	and	r24, r24
    18d6:	21 f0       	breq	.+8      	; 0x18e0 <main+0x1e8>
			Radio.clearTX_DS();
    18d8:	ce 01       	movw	r24, r28
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN8NRF24L0110clearTX_DSEv>
			#ifdef STATS
			Radio.printInfo();
    18e0:	ce 01       	movw	r24, r28
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	0e 94 03 04 	call	0x806	; 0x806 <_ZN8NRF24L019printInfoEv>
			#endif
		}
		if(NormalFlag){
    18e8:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <NormalFlag>
    18ec:	88 23       	and	r24, r24
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <main+0x1fa>
    18f0:	6c c0       	rjmp	.+216    	; 0x19ca <main+0x2d2>
			NormalFlag = false;
    18f2:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <NormalFlag>
			#ifdef STATS
			printStringCRNL("Sensor Normal: ");
    18f6:	8f e8       	ldi	r24, 0x8F	; 143
    18f8:	91 e0       	ldi	r25, 0x01	; 1
    18fa:	0e 94 41 03 	call	0x682	; 0x682 <_Z15printStringCRNLPKc>
			printNumber(SwitchID);
    18fe:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <SwitchID>
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 8c 02 	call	0x518	; 0x518 <_Z11printNumbery>
			#endif
			Radio.fastTransferPayload(0x20);
    1914:	60 e2       	ldi	r22, 0x20	; 32
    1916:	ce 01       	movw	r24, r28
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN8NRF24L0119fastTransferPayloadEh>
			TimeOut = false;
    191e:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <TimeOut>
			Timer2.setCallBackTime(50, 0, timerDone);
    1922:	2e e5       	ldi	r18, 0x5E	; 94
    1924:	3b e0       	ldi	r19, 0x0B	; 11
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	62 e3       	ldi	r22, 0x32	; 50
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	8f e9       	ldi	r24, 0x9F	; 159
    192e:	92 e0       	ldi	r25, 0x02	; 2
    1930:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
			while(Radio.isTX_DS_Set() != 0x20 && !TimeOut){
    1934:	ce 01       	movw	r24, r28
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN8NRF24L0111isTX_DS_SetEv>
    193c:	80 32       	cpi	r24, 0x20	; 32
    193e:	09 f4       	brne	.+2      	; 0x1942 <main+0x24a>
    1940:	6f c0       	rjmp	.+222    	; 0x1a20 <main+0x328>
    1942:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <TimeOut>
    1946:	81 11       	cpse	r24, r1
    1948:	6b c0       	rjmp	.+214    	; 0x1a20 <main+0x328>
    194a:	f4 cf       	rjmp	.-24     	; 0x1934 <main+0x23c>
				
			}
			if(Radio.isTX_DS_Set() == 0x20){
				LED = 1;
    194c:	5a 9a       	sbi	0x0b, 2	; 11
				Radio.clearTX_DS();
    194e:	ce 01       	movw	r24, r28
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN8NRF24L0110clearTX_DSEv>
				Timer1.setCallBackTime(50, 0, timerDone);
    1956:	2e e5       	ldi	r18, 0x5E	; 94
    1958:	3b e0       	ldi	r19, 0x0B	; 11
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	62 e3       	ldi	r22, 0x32	; 50
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	8d ea       	ldi	r24, 0xAD	; 173
    1962:	92 e0       	ldi	r25, 0x02	; 2
    1964:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
				Timer2.resetCallbackTimer();
    1968:	8f e9       	ldi	r24, 0x9F	; 159
    196a:	92 e0       	ldi	r25, 0x02	; 2
    196c:	0e 94 92 0a 	call	0x1524	; 0x1524 <_ZN10TimerClass18resetCallbackTimerEv>
				#ifdef STATS
				printStringCRNL("Payload transmitted.");
    1970:	80 e7       	ldi	r24, 0x70	; 112
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	0e 94 41 03 	call	0x682	; 0x682 <_Z15printStringCRNLPKc>
    1978:	06 c0       	rjmp	.+12     	; 0x1986 <main+0x28e>
				#endif
				//Radio.flushTX();
			}
			else{
				TimeOut = false;
    197a:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <TimeOut>
				//Radio.flushTX();
				#ifdef STATS
				printStringCRNL("Timed out");
    197e:	85 e8       	ldi	r24, 0x85	; 133
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	0e 94 41 03 	call	0x682	; 0x682 <_Z15printStringCRNLPKc>
				#endif
			}
			if(Radio.isRT_Max_Set())
    1986:	ce 01       	movw	r24, r28
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN8NRF24L0112isRT_Max_SetEv>
    198e:	88 23       	and	r24, r24
    1990:	21 f0       	breq	.+8      	; 0x199a <main+0x2a2>
			Radio.clearRT_Max();
    1992:	ce 01       	movw	r24, r28
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN8NRF24L0111clearRT_MaxEv>
			if(Radio.isTXFull())
    199a:	ce 01       	movw	r24, r28
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8NRF24L018isTXFullEv>
    19a2:	88 23       	and	r24, r24
    19a4:	21 f0       	breq	.+8      	; 0x19ae <main+0x2b6>
			Radio.flushTX();
    19a6:	ce 01       	movw	r24, r28
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZN8NRF24L017flushTXEv>
			if(Radio.isTX_DS_Set())
    19ae:	ce 01       	movw	r24, r28
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN8NRF24L0111isTX_DS_SetEv>
    19b6:	88 23       	and	r24, r24
    19b8:	21 f0       	breq	.+8      	; 0x19c2 <main+0x2ca>
			Radio.clearTX_DS();
    19ba:	ce 01       	movw	r24, r28
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN8NRF24L0110clearTX_DSEv>
			#ifdef STATS
			Radio.printInfo();
    19c2:	ce 01       	movw	r24, r28
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	0e 94 03 04 	call	0x806	; 0x806 <_ZN8NRF24L019printInfoEv>
			#endif
		}
		if(sleepAllowed()){
    19ca:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z12sleepAllowedv>
    19ce:	88 23       	and	r24, r24
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <main+0x2dc>
    19d2:	19 cf       	rjmp	.-462    	; 0x1806 <main+0x10e>
			#ifdef STATS
			printStringCRNL("Sleeping...");
    19d4:	8f e9       	ldi	r24, 0x9F	; 159
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	0e 94 41 03 	call	0x682	; 0x682 <_Z15printStringCRNLPKc>
			#endif
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    19dc:	83 b7       	in	r24, 0x33	; 51
    19de:	81 7f       	andi	r24, 0xF1	; 241
    19e0:	84 60       	ori	r24, 0x04	; 4
    19e2:	83 bf       	out	0x33, r24	; 51
			sleep_enable();
    19e4:	83 b7       	in	r24, 0x33	; 51
    19e6:	81 60       	ori	r24, 0x01	; 1
    19e8:	83 bf       	out	0x33, r24	; 51
			sei();
    19ea:	78 94       	sei
			getReadyToSleep();
    19ec:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z15getReadyToSleepv>
			CE = 0;
    19f0:	40 98       	cbi	0x08, 0	; 8
			sleep_mode();
    19f2:	83 b7       	in	r24, 0x33	; 51
    19f4:	81 60       	ori	r24, 0x01	; 1
    19f6:	83 bf       	out	0x33, r24	; 51
    19f8:	88 95       	sleep
    19fa:	83 b7       	in	r24, 0x33	; 51
    19fc:	8e 7f       	andi	r24, 0xFE	; 254
    19fe:	83 bf       	out	0x33, r24	; 51
			CE = 1;
    1a00:	40 9a       	sbi	0x08, 0	; 8
    1a02:	8f e3       	ldi	r24, 0x3F	; 63
    1a04:	9c e9       	ldi	r25, 0x9C	; 156
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <main+0x30e>
    1a0a:	00 c0       	rjmp	.+0      	; 0x1a0c <main+0x314>
    1a0c:	00 00       	nop
    1a0e:	fb ce       	rjmp	.-522    	; 0x1806 <main+0x10e>
			TimeOut = false;
			Timer2.setCallBackTime(50, 0, timerDone);
			while(Radio.isTX_DS_Set() != 0x20 && !TimeOut){
				
			}
			if(Radio.isTX_DS_Set() == 0x20){
    1a10:	ce 01       	movw	r24, r28
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN8NRF24L0111isTX_DS_SetEv>
    1a18:	80 32       	cpi	r24, 0x20	; 32
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <main+0x326>
    1a1c:	3d cf       	rjmp	.-390    	; 0x1898 <main+0x1a0>
    1a1e:	25 cf       	rjmp	.-438    	; 0x186a <main+0x172>
			TimeOut = false;
			Timer2.setCallBackTime(50, 0, timerDone);
			while(Radio.isTX_DS_Set() != 0x20 && !TimeOut){
				
			}
			if(Radio.isTX_DS_Set() == 0x20){
    1a20:	ce 01       	movw	r24, r28
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN8NRF24L0111isTX_DS_SetEv>
    1a28:	80 32       	cpi	r24, 0x20	; 32
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <main+0x336>
    1a2c:	a6 cf       	rjmp	.-180    	; 0x197a <main+0x282>
    1a2e:	8e cf       	rjmp	.-228    	; 0x194c <main+0x254>

00001a30 <__umoddi3>:
    1a30:	68 94       	set
    1a32:	01 c0       	rjmp	.+2      	; 0x1a36 <__udivdi3_umoddi3>

00001a34 <__udivdi3>:
    1a34:	e8 94       	clt

00001a36 <__udivdi3_umoddi3>:
    1a36:	8f 92       	push	r8
    1a38:	9f 92       	push	r9
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__udivmod64>
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	9f 90       	pop	r9
    1a48:	8f 90       	pop	r8
    1a4a:	08 95       	ret

00001a4c <__udivmod64>:
    1a4c:	88 24       	eor	r8, r8
    1a4e:	99 24       	eor	r9, r9
    1a50:	f4 01       	movw	r30, r8
    1a52:	e4 01       	movw	r28, r8
    1a54:	b0 e4       	ldi	r27, 0x40	; 64
    1a56:	9f 93       	push	r25
    1a58:	aa 27       	eor	r26, r26
    1a5a:	9a 15       	cp	r25, r10
    1a5c:	8b 04       	cpc	r8, r11
    1a5e:	9c 04       	cpc	r9, r12
    1a60:	ed 05       	cpc	r30, r13
    1a62:	fe 05       	cpc	r31, r14
    1a64:	cf 05       	cpc	r28, r15
    1a66:	d0 07       	cpc	r29, r16
    1a68:	a1 07       	cpc	r26, r17
    1a6a:	98 f4       	brcc	.+38     	; 0x1a92 <__udivmod64+0x46>
    1a6c:	ad 2f       	mov	r26, r29
    1a6e:	dc 2f       	mov	r29, r28
    1a70:	cf 2f       	mov	r28, r31
    1a72:	fe 2f       	mov	r31, r30
    1a74:	e9 2d       	mov	r30, r9
    1a76:	98 2c       	mov	r9, r8
    1a78:	89 2e       	mov	r8, r25
    1a7a:	98 2f       	mov	r25, r24
    1a7c:	87 2f       	mov	r24, r23
    1a7e:	76 2f       	mov	r23, r22
    1a80:	65 2f       	mov	r22, r21
    1a82:	54 2f       	mov	r21, r20
    1a84:	43 2f       	mov	r20, r19
    1a86:	32 2f       	mov	r19, r18
    1a88:	22 27       	eor	r18, r18
    1a8a:	b8 50       	subi	r27, 0x08	; 8
    1a8c:	31 f7       	brne	.-52     	; 0x1a5a <__udivmod64+0xe>
    1a8e:	bf 91       	pop	r27
    1a90:	27 c0       	rjmp	.+78     	; 0x1ae0 <__udivmod64+0x94>
    1a92:	1b 2e       	mov	r1, r27
    1a94:	bf 91       	pop	r27
    1a96:	bb 27       	eor	r27, r27
    1a98:	22 0f       	add	r18, r18
    1a9a:	33 1f       	adc	r19, r19
    1a9c:	44 1f       	adc	r20, r20
    1a9e:	55 1f       	adc	r21, r21
    1aa0:	66 1f       	adc	r22, r22
    1aa2:	77 1f       	adc	r23, r23
    1aa4:	88 1f       	adc	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	88 1c       	adc	r8, r8
    1aaa:	99 1c       	adc	r9, r9
    1aac:	ee 1f       	adc	r30, r30
    1aae:	ff 1f       	adc	r31, r31
    1ab0:	cc 1f       	adc	r28, r28
    1ab2:	dd 1f       	adc	r29, r29
    1ab4:	aa 1f       	adc	r26, r26
    1ab6:	bb 1f       	adc	r27, r27
    1ab8:	8a 14       	cp	r8, r10
    1aba:	9b 04       	cpc	r9, r11
    1abc:	ec 05       	cpc	r30, r12
    1abe:	fd 05       	cpc	r31, r13
    1ac0:	ce 05       	cpc	r28, r14
    1ac2:	df 05       	cpc	r29, r15
    1ac4:	a0 07       	cpc	r26, r16
    1ac6:	b1 07       	cpc	r27, r17
    1ac8:	48 f0       	brcs	.+18     	; 0x1adc <__udivmod64+0x90>
    1aca:	8a 18       	sub	r8, r10
    1acc:	9b 08       	sbc	r9, r11
    1ace:	ec 09       	sbc	r30, r12
    1ad0:	fd 09       	sbc	r31, r13
    1ad2:	ce 09       	sbc	r28, r14
    1ad4:	df 09       	sbc	r29, r15
    1ad6:	a0 0b       	sbc	r26, r16
    1ad8:	b1 0b       	sbc	r27, r17
    1ada:	21 60       	ori	r18, 0x01	; 1
    1adc:	1a 94       	dec	r1
    1ade:	e1 f6       	brne	.-72     	; 0x1a98 <__udivmod64+0x4c>
    1ae0:	2e f4       	brtc	.+10     	; 0x1aec <__udivmod64+0xa0>
    1ae2:	94 01       	movw	r18, r8
    1ae4:	af 01       	movw	r20, r30
    1ae6:	be 01       	movw	r22, r28
    1ae8:	cd 01       	movw	r24, r26
    1aea:	00 0c       	add	r0, r0
    1aec:	08 95       	ret

00001aee <__ashldi3>:
    1aee:	0f 93       	push	r16
    1af0:	08 30       	cpi	r16, 0x08	; 8
    1af2:	90 f0       	brcs	.+36     	; 0x1b18 <__ashldi3+0x2a>
    1af4:	98 2f       	mov	r25, r24
    1af6:	87 2f       	mov	r24, r23
    1af8:	76 2f       	mov	r23, r22
    1afa:	65 2f       	mov	r22, r21
    1afc:	54 2f       	mov	r21, r20
    1afe:	43 2f       	mov	r20, r19
    1b00:	32 2f       	mov	r19, r18
    1b02:	22 27       	eor	r18, r18
    1b04:	08 50       	subi	r16, 0x08	; 8
    1b06:	f4 cf       	rjmp	.-24     	; 0x1af0 <__ashldi3+0x2>
    1b08:	22 0f       	add	r18, r18
    1b0a:	33 1f       	adc	r19, r19
    1b0c:	44 1f       	adc	r20, r20
    1b0e:	55 1f       	adc	r21, r21
    1b10:	66 1f       	adc	r22, r22
    1b12:	77 1f       	adc	r23, r23
    1b14:	88 1f       	adc	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 95       	dec	r16
    1b1a:	b2 f7       	brpl	.-20     	; 0x1b08 <__ashldi3+0x1a>
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <__ashrdi3>:
    1b20:	97 fb       	bst	r25, 7
    1b22:	10 f8       	bld	r1, 0

00001b24 <__lshrdi3>:
    1b24:	16 94       	lsr	r1
    1b26:	00 08       	sbc	r0, r0
    1b28:	0f 93       	push	r16
    1b2a:	08 30       	cpi	r16, 0x08	; 8
    1b2c:	98 f0       	brcs	.+38     	; 0x1b54 <__lshrdi3+0x30>
    1b2e:	08 50       	subi	r16, 0x08	; 8
    1b30:	23 2f       	mov	r18, r19
    1b32:	34 2f       	mov	r19, r20
    1b34:	45 2f       	mov	r20, r21
    1b36:	56 2f       	mov	r21, r22
    1b38:	67 2f       	mov	r22, r23
    1b3a:	78 2f       	mov	r23, r24
    1b3c:	89 2f       	mov	r24, r25
    1b3e:	90 2d       	mov	r25, r0
    1b40:	f4 cf       	rjmp	.-24     	; 0x1b2a <__lshrdi3+0x6>
    1b42:	05 94       	asr	r0
    1b44:	97 95       	ror	r25
    1b46:	87 95       	ror	r24
    1b48:	77 95       	ror	r23
    1b4a:	67 95       	ror	r22
    1b4c:	57 95       	ror	r21
    1b4e:	47 95       	ror	r20
    1b50:	37 95       	ror	r19
    1b52:	27 95       	ror	r18
    1b54:	0a 95       	dec	r16
    1b56:	aa f7       	brpl	.-22     	; 0x1b42 <__lshrdi3+0x1e>
    1b58:	0f 91       	pop	r16
    1b5a:	08 95       	ret

00001b5c <__adddi3_s8>:
    1b5c:	00 24       	eor	r0, r0
    1b5e:	a7 fd       	sbrc	r26, 7
    1b60:	00 94       	com	r0
    1b62:	2a 0f       	add	r18, r26
    1b64:	30 1d       	adc	r19, r0
    1b66:	40 1d       	adc	r20, r0
    1b68:	50 1d       	adc	r21, r0
    1b6a:	60 1d       	adc	r22, r0
    1b6c:	70 1d       	adc	r23, r0
    1b6e:	80 1d       	adc	r24, r0
    1b70:	90 1d       	adc	r25, r0
    1b72:	08 95       	ret

00001b74 <__cmpdi2>:
    1b74:	2a 15       	cp	r18, r10
    1b76:	3b 05       	cpc	r19, r11
    1b78:	4c 05       	cpc	r20, r12
    1b7a:	5d 05       	cpc	r21, r13
    1b7c:	6e 05       	cpc	r22, r14
    1b7e:	7f 05       	cpc	r23, r15
    1b80:	80 07       	cpc	r24, r16
    1b82:	91 07       	cpc	r25, r17
    1b84:	08 95       	ret

00001b86 <__cmpdi2_s8>:
    1b86:	00 24       	eor	r0, r0
    1b88:	a7 fd       	sbrc	r26, 7
    1b8a:	00 94       	com	r0
    1b8c:	2a 17       	cp	r18, r26
    1b8e:	30 05       	cpc	r19, r0
    1b90:	40 05       	cpc	r20, r0
    1b92:	50 05       	cpc	r21, r0
    1b94:	60 05       	cpc	r22, r0
    1b96:	70 05       	cpc	r23, r0
    1b98:	80 05       	cpc	r24, r0
    1b9a:	90 05       	cpc	r25, r0
    1b9c:	08 95       	ret

00001b9e <_exit>:
    1b9e:	f8 94       	cli

00001ba0 <__stop_program>:
    1ba0:	ff cf       	rjmp	.-2      	; 0x1ba0 <__stop_program>
