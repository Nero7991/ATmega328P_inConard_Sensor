
ATmega328P_inConard_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00001914  000019a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001914  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d1  008001a2  008001a2  00001a4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000568  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006737  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001654  00000000  00000000  0000875b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c0d  00000000  00000000  00009daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011a0  00000000  00000000  0000c9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022c3  00000000  00000000  0000db5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c18  00000000  00000000  0000fe1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000520  00000000  00000000  00013a37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__ctors_end>
       4:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__vector_1>
       8:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__vector_2>
       c:	0c 94 45 09 	jmp	0x128a	; 0x128a <__vector_3>
      10:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_4>
      14:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_5>
      18:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_6>
      1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      2c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__vector_11>
      30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      44:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	49 6e       	ori	r20, 0xE9	; 233
      6a:	69 74       	andi	r22, 0x49	; 73
      6c:	69 61       	ori	r22, 0x19	; 25
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	7a 69       	ori	r23, 0x9A	; 154
      72:	6e 67       	ori	r22, 0x7E	; 126
      74:	20 73       	andi	r18, 0x30	; 48
      76:	75 63       	ori	r23, 0x35	; 53
      78:	63 65       	ori	r22, 0x53	; 83
      7a:	73 73       	andi	r23, 0x33	; 51
      7c:	66 75       	andi	r22, 0x56	; 86
      7e:	6c 2e       	mov	r6, r28
	...

00000081 <_ZZN8NRF24L017setModeEbE3__c_1>:
      81:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
      91:	61 69 6c 65 64 20 66 6f 72 20 6e 52 46 32 34 4c     ailed for nRF24L
      a1:	30 31 2e 20 43 68 65 63 6b 20 63 6f 6e 6e 65 63     01. Check connec
      b1:	74 69 6f 6e 73 00                                   tions.

000000b7 <_ZZN8NRF24L017setModeEbE3__c_0>:
      b7:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      c7:	31 20 69 6e 20 54 72 61 6e 73 6d 69 74 20 4d 6f     1 in Transmit Mo
      d7:	64 65 2e 2e 2e 00                                   de....

000000dd <_ZZN8NRF24L017setModeEbE3__c>:
      dd:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      ed:	31 20 69 6e 20 52 65 63 65 69 76 65 20 4d 6f 64     1 in Receive Mod
      fd:	65 2e 2e 2e 00                                      e....

00000102 <_ZZN8NRF24L0110initializeEvE3__c_0>:
     102:	4d 61 73 74 65 72 20 52 58 20 50 61 79 6c 6f 61     Master RX Payloa
     112:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     122:	3a 20 00                                            : .

00000125 <_ZZN8NRF24L0110initializeEvE3__c>:
     125:	4d 61 73 74 65 72 20 54 58 20 50 61 79 6c 6f 61     Master TX Payloa
     135:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     145:	3a 20 00                                            : .

00000148 <_ZZ4mainE3__c_0>:
     148:	44 6f 6e 65 00                                      Done.

0000014d <_ZZ4mainE3__c>:
     14d:	50 6f 77 65 72 69 6e 67 20 6f 6e 2e 2e 2e 00        Powering on....

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf ef       	ldi	r28, 0xFF	; 255
     162:	d8 e0       	ldi	r29, 0x08	; 8
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	11 e0       	ldi	r17, 0x01	; 1
     16a:	a0 e0       	ldi	r26, 0x00	; 0
     16c:	b1 e0       	ldi	r27, 0x01	; 1
     16e:	e4 e1       	ldi	r30, 0x14	; 20
     170:	f9 e1       	ldi	r31, 0x19	; 25
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	a2 3a       	cpi	r26, 0xA2	; 162
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	22 e0       	ldi	r18, 0x02	; 2
     180:	a2 ea       	ldi	r26, 0xA2	; 162
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a3 37       	cpi	r26, 0x73	; 115
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <main>
     192:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <_exit>

00000196 <__bad_interrupt>:
     196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019a <_Z15getReadyToSleepv>:
	MCUSR &= ~(1<<WDRF);
	/* Start timed sequence */
	WDTCR = (1<<WDCE) | (1<<WDE);
	/* Set new prescaler (time-out) value = 64K cycles (~0.5 s) */
	WDTCR = prescale;
	asm volatile("sei"::);
     19a:	8f ea       	ldi	r24, 0xAF	; 175
     19c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     1a0:	08 95       	ret

000001a2 <_Z6wakeUpv>:
     1a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     1a6:	08 95       	ret

000001a8 <_Z10allowSleepb>:
     1a8:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
     1ac:	08 95       	ret

000001ae <_Z12sleepAllowedv>:
     1ae:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
     1b2:	08 95       	ret

000001b4 <_Z14SPI_MasterInitv>:
     1b4:	24 98       	cbi	0x04, 4	; 4
     1b6:	84 b1       	in	r24, 0x04	; 4
     1b8:	8c 62       	ori	r24, 0x2C	; 44
     1ba:	84 b9       	out	0x04, r24	; 4
     1bc:	2a 9a       	sbi	0x05, 2	; 5
     1be:	8c b5       	in	r24, 0x2c	; 44
     1c0:	82 65       	ori	r24, 0x52	; 82
     1c2:	8c bd       	out	0x2c, r24	; 44
     1c4:	08 95       	ret

000001c6 <_Z18SPI_MasterTransmitc>:
     1c6:	8e bd       	out	0x2e, r24	; 46
     1c8:	0d b4       	in	r0, 0x2d	; 45
     1ca:	07 fe       	sbrs	r0, 7
     1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <_Z18SPI_MasterTransmitc+0x2>
     1ce:	8e b5       	in	r24, 0x2e	; 46
     1d0:	08 95       	ret

000001d2 <_Z11Init_CTC_T1hj>:
     1d2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1d6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     1da:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     1de:	87 70       	andi	r24, 0x07	; 7
     1e0:	88 60       	ori	r24, 0x08	; 8
     1e2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     1ec:	78 94       	sei
     1ee:	08 95       	ret

000001f0 <_Z11setPinStatehhb>:
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	e9 f0       	breq	.+58     	; 0x22e <_Z11setPinStatehhb+0x3e>
     1f4:	18 f0       	brcs	.+6      	; 0x1fc <_Z11setPinStatehhb+0xc>
     1f6:	82 30       	cpi	r24, 0x02	; 2
     1f8:	99 f1       	breq	.+102    	; 0x260 <_Z11setPinStatehhb+0x70>
     1fa:	08 95       	ret
     1fc:	44 23       	and	r20, r20
     1fe:	59 f0       	breq	.+22     	; 0x216 <_Z11setPinStatehhb+0x26>
     200:	25 b1       	in	r18, 0x05	; 5
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	02 c0       	rjmp	.+4      	; 0x20c <_Z11setPinStatehhb+0x1c>
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	6a 95       	dec	r22
     20e:	e2 f7       	brpl	.-8      	; 0x208 <_Z11setPinStatehhb+0x18>
     210:	82 2b       	or	r24, r18
     212:	85 b9       	out	0x05, r24	; 5
     214:	08 95       	ret
     216:	25 b1       	in	r18, 0x05	; 5
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <_Z11setPinStatehhb+0x32>
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	6a 95       	dec	r22
     224:	e2 f7       	brpl	.-8      	; 0x21e <_Z11setPinStatehhb+0x2e>
     226:	80 95       	com	r24
     228:	82 23       	and	r24, r18
     22a:	85 b9       	out	0x05, r24	; 5
     22c:	08 95       	ret
     22e:	44 23       	and	r20, r20
     230:	59 f0       	breq	.+22     	; 0x248 <_Z11setPinStatehhb+0x58>
     232:	28 b1       	in	r18, 0x08	; 8
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	02 c0       	rjmp	.+4      	; 0x23e <_Z11setPinStatehhb+0x4e>
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	6a 95       	dec	r22
     240:	e2 f7       	brpl	.-8      	; 0x23a <_Z11setPinStatehhb+0x4a>
     242:	82 2b       	or	r24, r18
     244:	88 b9       	out	0x08, r24	; 8
     246:	08 95       	ret
     248:	28 b1       	in	r18, 0x08	; 8
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	02 c0       	rjmp	.+4      	; 0x254 <_Z11setPinStatehhb+0x64>
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <_Z11setPinStatehhb+0x60>
     258:	80 95       	com	r24
     25a:	82 23       	and	r24, r18
     25c:	88 b9       	out	0x08, r24	; 8
     25e:	08 95       	ret
     260:	44 23       	and	r20, r20
     262:	59 f0       	breq	.+22     	; 0x27a <_Z11setPinStatehhb+0x8a>
     264:	2b b1       	in	r18, 0x0b	; 11
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <_Z11setPinStatehhb+0x80>
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	6a 95       	dec	r22
     272:	e2 f7       	brpl	.-8      	; 0x26c <_Z11setPinStatehhb+0x7c>
     274:	82 2b       	or	r24, r18
     276:	8b b9       	out	0x0b, r24	; 11
     278:	08 95       	ret
     27a:	2b b1       	in	r18, 0x0b	; 11
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	02 c0       	rjmp	.+4      	; 0x286 <_Z11setPinStatehhb+0x96>
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	6a 95       	dec	r22
     288:	e2 f7       	brpl	.-8      	; 0x282 <_Z11setPinStatehhb+0x92>
     28a:	80 95       	com	r24
     28c:	82 23       	and	r24, r18
     28e:	8b b9       	out	0x0b, r24	; 11
     290:	08 95       	ret

00000292 <_Z15setPinDirectionhhb>:
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	e9 f0       	breq	.+58     	; 0x2d0 <_Z15setPinDirectionhhb+0x3e>
     296:	18 f0       	brcs	.+6      	; 0x29e <_Z15setPinDirectionhhb+0xc>
     298:	82 30       	cpi	r24, 0x02	; 2
     29a:	99 f1       	breq	.+102    	; 0x302 <_Z15setPinDirectionhhb+0x70>
     29c:	08 95       	ret
     29e:	44 23       	and	r20, r20
     2a0:	59 f0       	breq	.+22     	; 0x2b8 <_Z15setPinDirectionhhb+0x26>
     2a2:	24 b1       	in	r18, 0x04	; 4
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <_Z15setPinDirectionhhb+0x1c>
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	6a 95       	dec	r22
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <_Z15setPinDirectionhhb+0x18>
     2b2:	82 2b       	or	r24, r18
     2b4:	84 b9       	out	0x04, r24	; 4
     2b6:	08 95       	ret
     2b8:	24 b1       	in	r18, 0x04	; 4
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <_Z15setPinDirectionhhb+0x32>
     2c0:	88 0f       	add	r24, r24
     2c2:	99 1f       	adc	r25, r25
     2c4:	6a 95       	dec	r22
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <_Z15setPinDirectionhhb+0x2e>
     2c8:	80 95       	com	r24
     2ca:	82 23       	and	r24, r18
     2cc:	84 b9       	out	0x04, r24	; 4
     2ce:	08 95       	ret
     2d0:	44 23       	and	r20, r20
     2d2:	59 f0       	breq	.+22     	; 0x2ea <_Z15setPinDirectionhhb+0x58>
     2d4:	27 b1       	in	r18, 0x07	; 7
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <_Z15setPinDirectionhhb+0x4e>
     2dc:	88 0f       	add	r24, r24
     2de:	99 1f       	adc	r25, r25
     2e0:	6a 95       	dec	r22
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <_Z15setPinDirectionhhb+0x4a>
     2e4:	82 2b       	or	r24, r18
     2e6:	87 b9       	out	0x07, r24	; 7
     2e8:	08 95       	ret
     2ea:	27 b1       	in	r18, 0x07	; 7
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <_Z15setPinDirectionhhb+0x64>
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	6a 95       	dec	r22
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <_Z15setPinDirectionhhb+0x60>
     2fa:	80 95       	com	r24
     2fc:	82 23       	and	r24, r18
     2fe:	87 b9       	out	0x07, r24	; 7
     300:	08 95       	ret
     302:	44 23       	and	r20, r20
     304:	59 f0       	breq	.+22     	; 0x31c <_Z15setPinDirectionhhb+0x8a>
     306:	2a b1       	in	r18, 0x0a	; 10
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	02 c0       	rjmp	.+4      	; 0x312 <_Z15setPinDirectionhhb+0x80>
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	6a 95       	dec	r22
     314:	e2 f7       	brpl	.-8      	; 0x30e <_Z15setPinDirectionhhb+0x7c>
     316:	82 2b       	or	r24, r18
     318:	8a b9       	out	0x0a, r24	; 10
     31a:	08 95       	ret
     31c:	2a b1       	in	r18, 0x0a	; 10
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	02 c0       	rjmp	.+4      	; 0x328 <_Z15setPinDirectionhhb+0x96>
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	6a 95       	dec	r22
     32a:	e2 f7       	brpl	.-8      	; 0x324 <_Z15setPinDirectionhhb+0x92>
     32c:	80 95       	com	r24
     32e:	82 23       	and	r24, r18
     330:	8a b9       	out	0x0a, r24	; 10
     332:	08 95       	ret

00000334 <_Z21setPinChangeInterrupthhb>:
     334:	e8 e6       	ldi	r30, 0x68	; 104
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	90 81       	ld	r25, Z
     33a:	21 e0       	ldi	r18, 0x01	; 1
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	08 2e       	mov	r0, r24
     340:	02 c0       	rjmp	.+4      	; 0x346 <_Z21setPinChangeInterrupthhb+0x12>
     342:	22 0f       	add	r18, r18
     344:	33 1f       	adc	r19, r19
     346:	0a 94       	dec	r0
     348:	e2 f7       	brpl	.-8      	; 0x342 <_Z21setPinChangeInterrupthhb+0xe>
     34a:	29 2b       	or	r18, r25
     34c:	20 83       	st	Z, r18
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	81 f0       	breq	.+32     	; 0x372 <_Z21setPinChangeInterrupthhb+0x3e>
     352:	18 f0       	brcs	.+6      	; 0x35a <_Z21setPinChangeInterrupthhb+0x26>
     354:	82 30       	cpi	r24, 0x02	; 2
     356:	c9 f0       	breq	.+50     	; 0x38a <_Z21setPinChangeInterrupthhb+0x56>
     358:	08 95       	ret
     35a:	eb e6       	ldi	r30, 0x6B	; 107
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	02 c0       	rjmp	.+4      	; 0x368 <_Z21setPinChangeInterrupthhb+0x34>
     364:	44 0f       	add	r20, r20
     366:	55 1f       	adc	r21, r21
     368:	6a 95       	dec	r22
     36a:	e2 f7       	brpl	.-8      	; 0x364 <_Z21setPinChangeInterrupthhb+0x30>
     36c:	48 2b       	or	r20, r24
     36e:	40 83       	st	Z, r20
     370:	08 95       	ret
     372:	ec e6       	ldi	r30, 0x6C	; 108
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	02 c0       	rjmp	.+4      	; 0x380 <_Z21setPinChangeInterrupthhb+0x4c>
     37c:	44 0f       	add	r20, r20
     37e:	55 1f       	adc	r21, r21
     380:	6a 95       	dec	r22
     382:	e2 f7       	brpl	.-8      	; 0x37c <_Z21setPinChangeInterrupthhb+0x48>
     384:	48 2b       	or	r20, r24
     386:	40 83       	st	Z, r20
     388:	08 95       	ret
     38a:	ed e6       	ldi	r30, 0x6D	; 109
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	02 c0       	rjmp	.+4      	; 0x398 <_Z21setPinChangeInterrupthhb+0x64>
     394:	44 0f       	add	r20, r20
     396:	55 1f       	adc	r21, r21
     398:	6a 95       	dec	r22
     39a:	e2 f7       	brpl	.-8      	; 0x394 <_Z21setPinChangeInterrupthhb+0x60>
     39c:	48 2b       	or	r20, r24
     39e:	40 83       	st	Z, r20
     3a0:	08 95       	ret

000003a2 <_Z10USART_Initj>:
     3a2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     3a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     3aa:	88 e1       	ldi	r24, 0x18	; 24
     3ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     3b0:	8e e0       	ldi	r24, 0x0E	; 14
     3b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     3b6:	08 95       	ret

000003b8 <_Z14USART_Transmith>:
     3b8:	e0 ec       	ldi	r30, 0xC0	; 192
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	90 81       	ld	r25, Z
     3be:	95 ff       	sbrs	r25, 5
     3c0:	fd cf       	rjmp	.-6      	; 0x3bc <_Z14USART_Transmith+0x4>
     3c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     3c6:	08 95       	ret

000003c8 <_Z6millisv>:
     3c8:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <time>
     3cc:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <time+0x1>
     3d0:	40 91 a7 01 	lds	r20, 0x01A7	; 0x8001a7 <time+0x2>
     3d4:	50 91 a8 01 	lds	r21, 0x01A8	; 0x8001a8 <time+0x3>
     3d8:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <time+0x4>
     3dc:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <time+0x5>
     3e0:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <time+0x6>
     3e4:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <time+0x7>
     3e8:	08 95       	ret

000003ea <_Z13milliHappenedv>:
}


void milliHappened(){
	time += 1;
     3ea:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <time>
     3ee:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <time+0x1>
     3f2:	40 91 a7 01 	lds	r20, 0x01A7	; 0x8001a7 <time+0x2>
     3f6:	50 91 a8 01 	lds	r21, 0x01A8	; 0x8001a8 <time+0x3>
     3fa:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <time+0x4>
     3fe:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <time+0x5>
     402:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <time+0x6>
     406:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <time+0x7>
     40a:	a1 e0       	ldi	r26, 0x01	; 1
     40c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__adddi3_s8>
     410:	20 93 a5 01 	sts	0x01A5, r18	; 0x8001a5 <time>
     414:	30 93 a6 01 	sts	0x01A6, r19	; 0x8001a6 <time+0x1>
     418:	40 93 a7 01 	sts	0x01A7, r20	; 0x8001a7 <time+0x2>
     41c:	50 93 a8 01 	sts	0x01A8, r21	; 0x8001a8 <time+0x3>
     420:	60 93 a9 01 	sts	0x01A9, r22	; 0x8001a9 <time+0x4>
     424:	70 93 aa 01 	sts	0x01AA, r23	; 0x8001aa <time+0x5>
     428:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <time+0x6>
     42c:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <time+0x7>
	if(cdown != 0){
     430:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <cdown>
     434:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <cdown+0x1>
     438:	89 2b       	or	r24, r25
     43a:	49 f0       	breq	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		cdown -= 1;
     43c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <cdown>
     440:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <cdown+0x1>
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <cdown+0x1>
     44a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <cdown>
     44e:	08 95       	ret

00000450 <__vector_6>:
	}
	count1 += 1;
}*/


ISR(WDT_vect){
     450:	1f 92       	push	r1
     452:	0f 92       	push	r0
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	0f 92       	push	r0
     458:	11 24       	eor	r1, r1
     45a:	8f 93       	push	r24
	MCUSR &= ~(1 << SE);
     45c:	84 b7       	in	r24, 0x34	; 52
     45e:	8e 7f       	andi	r24, 0xFE	; 254
     460:	84 bf       	out	0x34, r24	; 52
     462:	8f 91       	pop	r24
     464:	0f 90       	pop	r0
     466:	0f be       	out	0x3f, r0	; 63
     468:	0f 90       	pop	r0
     46a:	1f 90       	pop	r1
     46c:	18 95       	reti

0000046e <_Z10numToArrayy>:
	USART_Transmit('\n');
	while(*p != 0){
		USART_Transmit(*p);
		p++;
	}
}
     46e:	0f 93       	push	r16
     470:	ee ee       	ldi	r30, 0xEE	; 238
     472:	f1 e0       	ldi	r31, 0x01	; 1
     474:	a6 ef       	ldi	r26, 0xF6	; 246
     476:	b1 e0       	ldi	r27, 0x01	; 1
     478:	21 93       	st	Z+, r18
     47a:	08 e0       	ldi	r16, 0x08	; 8
     47c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__lshrdi3>
     480:	ea 17       	cp	r30, r26
     482:	fb 07       	cpc	r31, r27
     484:	c9 f7       	brne	.-14     	; 0x478 <_Z10numToArrayy+0xa>
     486:	8e ee       	ldi	r24, 0xEE	; 238
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <_Z10hexToASCIIh>:
     48e:	8a 30       	cpi	r24, 0x0A	; 10
     490:	10 f0       	brcs	.+4      	; 0x496 <_Z10hexToASCIIh+0x8>
     492:	89 5c       	subi	r24, 0xC9	; 201
     494:	08 95       	ret
     496:	80 5d       	subi	r24, 0xD0	; 208
     498:	08 95       	ret

0000049a <_Z11hexToStringh>:
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	18 2f       	mov	r17, r24
     4a2:	82 95       	swap	r24
     4a4:	8f 70       	andi	r24, 0x0F	; 15
     4a6:	0e 94 47 02 	call	0x48e	; 0x48e <_Z10hexToASCIIh>
     4aa:	c6 ef       	ldi	r28, 0xF6	; 246
     4ac:	d1 e0       	ldi	r29, 0x01	; 1
     4ae:	88 83       	st	Y, r24
     4b0:	81 2f       	mov	r24, r17
     4b2:	8f 70       	andi	r24, 0x0F	; 15
     4b4:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <_ZZ11hexToStringhE4temp>
     4b8:	0e 94 47 02 	call	0x48e	; 0x48e <_Z10hexToASCIIh>
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	1a 82       	std	Y+2, r1	; 0x02
     4c0:	ce 01       	movw	r24, r28
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	08 95       	ret

000004ca <_Z11printNumbery>:
     4ca:	2f 92       	push	r2
     4cc:	3f 92       	push	r3
     4ce:	4f 92       	push	r4
     4d0:	5f 92       	push	r5
     4d2:	6f 92       	push	r6
     4d4:	7f 92       	push	r7
     4d6:	8f 92       	push	r8
     4d8:	9f 92       	push	r9
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	c7 56       	subi	r28, 0x67	; 103
     4f4:	d1 09       	sbc	r29, r1
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	a6 96       	adiw	r28, 0x26	; 38
     502:	2f af       	std	Y+63, r18	; 0x3f
     504:	a6 97       	sbiw	r28, 0x26	; 38
     506:	83 2e       	mov	r8, r19
     508:	74 2e       	mov	r7, r20
     50a:	65 2e       	mov	r6, r21
     50c:	56 2e       	mov	r5, r22
     50e:	47 2e       	mov	r4, r23
     510:	38 2e       	mov	r3, r24
     512:	29 2e       	mov	r2, r25
     514:	a0 e0       	ldi	r26, 0x00	; 0
     516:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__cmpdi2_s8>
     51a:	21 f4       	brne	.+8      	; 0x524 <_Z11printNumbery+0x5a>
     51c:	80 e3       	ldi	r24, 0x30	; 48
     51e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14USART_Transmith>
     522:	52 c0       	rjmp	.+164    	; 0x5c8 <_Z11printNumbery+0xfe>
     524:	91 2c       	mov	r9, r1
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	8c 0f       	add	r24, r28
     52c:	9d 1f       	adc	r25, r29
     52e:	89 0d       	add	r24, r9
     530:	91 1d       	adc	r25, r1
     532:	a8 96       	adiw	r28, 0x28	; 40
     534:	9f af       	std	Y+63, r25	; 0x3f
     536:	8e af       	std	Y+62, r24	; 0x3e
     538:	a8 97       	sbiw	r28, 0x28	; 40
     53a:	0f 2e       	mov	r0, r31
     53c:	fa e0       	ldi	r31, 0x0A	; 10
     53e:	af 2e       	mov	r10, r31
     540:	f0 2d       	mov	r31, r0
     542:	b1 2c       	mov	r11, r1
     544:	c1 2c       	mov	r12, r1
     546:	d1 2c       	mov	r13, r1
     548:	e1 2c       	mov	r14, r1
     54a:	f1 2c       	mov	r15, r1
     54c:	00 e0       	ldi	r16, 0x00	; 0
     54e:	10 e0       	ldi	r17, 0x00	; 0
     550:	a6 96       	adiw	r28, 0x26	; 38
     552:	2f ad       	ldd	r18, Y+63	; 0x3f
     554:	a6 97       	sbiw	r28, 0x26	; 38
     556:	38 2d       	mov	r19, r8
     558:	47 2d       	mov	r20, r7
     55a:	56 2d       	mov	r21, r6
     55c:	65 2d       	mov	r22, r5
     55e:	74 2d       	mov	r23, r4
     560:	83 2d       	mov	r24, r3
     562:	92 2d       	mov	r25, r2
     564:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__umoddi3>
     568:	20 5d       	subi	r18, 0xD0	; 208
     56a:	a8 96       	adiw	r28, 0x28	; 40
     56c:	ee ad       	ldd	r30, Y+62	; 0x3e
     56e:	ff ad       	ldd	r31, Y+63	; 0x3f
     570:	a8 97       	sbiw	r28, 0x28	; 40
     572:	20 83       	st	Z, r18
     574:	a6 96       	adiw	r28, 0x26	; 38
     576:	2f ad       	ldd	r18, Y+63	; 0x3f
     578:	a6 97       	sbiw	r28, 0x26	; 38
     57a:	38 2d       	mov	r19, r8
     57c:	47 2d       	mov	r20, r7
     57e:	56 2d       	mov	r21, r6
     580:	65 2d       	mov	r22, r5
     582:	74 2d       	mov	r23, r4
     584:	83 2d       	mov	r24, r3
     586:	92 2d       	mov	r25, r2
     588:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__udivdi3>
     58c:	a6 96       	adiw	r28, 0x26	; 38
     58e:	2f af       	std	Y+63, r18	; 0x3f
     590:	a6 97       	sbiw	r28, 0x26	; 38
     592:	83 2e       	mov	r8, r19
     594:	74 2e       	mov	r7, r20
     596:	65 2e       	mov	r6, r21
     598:	56 2e       	mov	r5, r22
     59a:	47 2e       	mov	r4, r23
     59c:	38 2e       	mov	r3, r24
     59e:	29 2e       	mov	r2, r25
     5a0:	93 94       	inc	r9
     5a2:	a0 e0       	ldi	r26, 0x00	; 0
     5a4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__cmpdi2_s8>
     5a8:	09 f0       	breq	.+2      	; 0x5ac <_Z11printNumbery+0xe2>
     5aa:	bd cf       	rjmp	.-134    	; 0x526 <_Z11printNumbery+0x5c>
     5ac:	99 20       	and	r9, r9
     5ae:	61 f0       	breq	.+24     	; 0x5c8 <_Z11printNumbery+0xfe>
     5b0:	9a 94       	dec	r9
     5b2:	e1 e0       	ldi	r30, 0x01	; 1
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	ec 0f       	add	r30, r28
     5b8:	fd 1f       	adc	r31, r29
     5ba:	e9 0d       	add	r30, r9
     5bc:	f1 1d       	adc	r31, r1
     5be:	80 81       	ld	r24, Z
     5c0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14USART_Transmith>
     5c4:	91 10       	cpse	r9, r1
     5c6:	f4 cf       	rjmp	.-24     	; 0x5b0 <_Z11printNumbery+0xe6>
     5c8:	80 e2       	ldi	r24, 0x20	; 32
     5ca:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14USART_Transmith>
     5ce:	c9 59       	subi	r28, 0x99	; 153
     5d0:	df 4f       	sbci	r29, 0xFF	; 255
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	bf 90       	pop	r11
     5ee:	af 90       	pop	r10
     5f0:	9f 90       	pop	r9
     5f2:	8f 90       	pop	r8
     5f4:	7f 90       	pop	r7
     5f6:	6f 90       	pop	r6
     5f8:	5f 90       	pop	r5
     5fa:	4f 90       	pop	r4
     5fc:	3f 90       	pop	r3
     5fe:	2f 90       	pop	r2
     600:	08 95       	ret

00000602 <_Z6NotifyPKc>:
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	ec 01       	movw	r28, r24
     608:	8d e0       	ldi	r24, 0x0D	; 13
     60a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14USART_Transmith>
     60e:	8a e0       	ldi	r24, 0x0A	; 10
     610:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14USART_Transmith>
     614:	fe 01       	movw	r30, r28
     616:	84 91       	lpm	r24, Z
     618:	88 23       	and	r24, r24
     61a:	49 f0       	breq	.+18     	; 0x62e <_Z6NotifyPKc+0x2c>
     61c:	fe 01       	movw	r30, r28
     61e:	84 91       	lpm	r24, Z
     620:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14USART_Transmith>
     624:	21 96       	adiw	r28, 0x01	; 1
     626:	fe 01       	movw	r30, r28
     628:	84 91       	lpm	r24, Z
     62a:	81 11       	cpse	r24, r1
     62c:	f7 cf       	rjmp	.-18     	; 0x61c <_Z6NotifyPKc+0x1a>
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <_Z15printStringCRNLPKc>:

void printStringCRNL(const char *p){
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	ec 01       	movw	r28, r24
	USART_Transmit('\r');
     63a:	8d e0       	ldi	r24, 0x0D	; 13
     63c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14USART_Transmith>
	USART_Transmit('\n');
     640:	8a e0       	ldi	r24, 0x0A	; 10
     642:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14USART_Transmith>
	while(*p != 0){
     646:	88 81       	ld	r24, Y
     648:	88 23       	and	r24, r24
     64a:	31 f0       	breq	.+12     	; 0x658 <_Z15printStringCRNLPKc+0x24>
     64c:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     64e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14USART_Transmith>
}

void printStringCRNL(const char *p){
	USART_Transmit('\r');
	USART_Transmit('\n');
	while(*p != 0){
     652:	89 91       	ld	r24, Y+
     654:	81 11       	cpse	r24, r1
     656:	fb cf       	rjmp	.-10     	; 0x64e <_Z15printStringCRNLPKc+0x1a>
		USART_Transmit(*p);
		p++;
	}
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <_Z11printStringPKc>:

void printString(const char *p){
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	ec 01       	movw	r28, r24
	while(*p != 0){
     664:	88 81       	ld	r24, Y
     666:	88 23       	and	r24, r24
     668:	31 f0       	breq	.+12     	; 0x676 <_Z11printStringPKc+0x18>
     66a:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     66c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14USART_Transmith>
		p++;
	}
}

void printString(const char *p){
	while(*p != 0){
     670:	89 91       	ld	r24, Y+
     672:	81 11       	cpse	r24, r1
     674:	fb cf       	rjmp	.-10     	; 0x66c <_Z11printStringPKc+0xe>
		USART_Transmit(*p);
		p++;
	}
}
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <_Z16hexArrayToStringPhh>:
		data >>= 8;
	}
	return array;
} 

char* hexArrayToString(uint8_t *data, uint8_t length){
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	f6 2e       	mov	r15, r22
	static char str[64], t;
	data += length - 1;
     688:	06 2f       	mov	r16, r22
     68a:	10 e0       	ldi	r17, 0x00	; 0
     68c:	01 50       	subi	r16, 0x01	; 1
     68e:	11 09       	sbc	r17, r1
     690:	08 0f       	add	r16, r24
     692:	19 1f       	adc	r17, r25
		p++;
	}
}

void printChar(unsigned char data){
	USART_Transmit(data);
     694:	80 e3       	ldi	r24, 0x30	; 48
     696:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14USART_Transmith>
     69a:	88 e7       	ldi	r24, 0x78	; 120
     69c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14USART_Transmith>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     6a0:	ff 20       	and	r15, r15
     6a2:	81 f0       	breq	.+32     	; 0x6c4 <_Z16hexArrayToStringPhh+0x48>
     6a4:	e8 01       	movw	r28, r16
     6a6:	21 96       	adiw	r28, 0x01	; 1
     6a8:	8f ef       	ldi	r24, 0xFF	; 255
     6aa:	8f 0d       	add	r24, r15
     6ac:	08 1b       	sub	r16, r24
     6ae:	11 09       	sbc	r17, r1
	{	
		t = *data;
     6b0:	8a 91       	ld	r24, -Y
     6b2:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <_ZZ16hexArrayToStringPhhE1t>
		printString(hexToString(t));
     6b6:	0e 94 4d 02 	call	0x49a	; 0x49a <_Z11hexToStringh>
     6ba:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z11printStringPKc>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     6be:	c0 17       	cp	r28, r16
     6c0:	d1 07       	cpc	r29, r17
     6c2:	b1 f7       	brne	.-20     	; 0x6b0 <_Z16hexArrayToStringPhh+0x34>
	{	
		t = *data;
		printString(hexToString(t));
		data -= 1;
	}
	str[length + 2] = 0;
     6c4:	ef 2d       	mov	r30, r15
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	e3 55       	subi	r30, 0x53	; 83
     6ca:	fe 4f       	sbci	r31, 0xFE	; 254
     6cc:	12 82       	std	Z+2, r1	; 0x02
	return str;
}
     6ce:	8d ea       	ldi	r24, 0xAD	; 173
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	08 95       	ret

000006de <_Z14printHexNumberyh>:
	ascii[1] = hexToASCII(temp);
	ascii[2] = '\0';
	return ascii;
}

void printHexNumber(uint64_t data,uint8_t length){
     6de:	0f 93       	push	r16
	printString(hexArrayToString(numToArray((data)),length));
     6e0:	0e 94 37 02 	call	0x46e	; 0x46e <_Z10numToArrayy>
     6e4:	60 2f       	mov	r22, r16
     6e6:	0e 94 3e 03 	call	0x67c	; 0x67c <_Z16hexArrayToStringPhh>
     6ea:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z11printStringPKc>
}
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret

000006f2 <_ZN8NRF24L0114toggleActivateEv>:
}

NRF24L01::NRF24L01(uint8_t Bufferlength_MasterTX, bool mode){
	Mode = mode;
	BufferLength_MasterTX = Bufferlength_MasterTX;
	initialize();
     6f2:	41 98       	cbi	0x08, 1	; 8
     6f4:	80 e5       	ldi	r24, 0x50	; 80
     6f6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     6fa:	83 e7       	ldi	r24, 0x73	; 115
     6fc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     700:	41 9a       	sbi	0x08, 1	; 8
     702:	08 95       	ret

00000704 <_ZN8NRF24L0114sendSPICommandEh>:
     704:	86 2f       	mov	r24, r22
     706:	41 98       	cbi	0x08, 1	; 8
     708:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     70c:	41 9a       	sbi	0x08, 1	; 8
     70e:	08 95       	ret

00000710 <_ZN8NRF24L0115readSPIRegisterEhh>:
     710:	af 92       	push	r10
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	86 2f       	mov	r24, r22
     726:	a4 2e       	mov	r10, r20
     728:	41 98       	cbi	0x08, 1	; 8
     72a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     72e:	aa 20       	and	r10, r10
     730:	21 f1       	breq	.+72     	; 0x77a <_ZN8NRF24L0115readSPIRegisterEhh+0x6a>
     732:	d0 e0       	ldi	r29, 0x00	; 0
     734:	c0 e0       	ldi	r28, 0x00	; 0
     736:	b1 2c       	mov	r11, r1
     738:	c1 2c       	mov	r12, r1
     73a:	d1 2c       	mov	r13, r1
     73c:	e1 2c       	mov	r14, r1
     73e:	f1 2c       	mov	r15, r1
     740:	00 e0       	ldi	r16, 0x00	; 0
     742:	10 e0       	ldi	r17, 0x00	; 0
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     74a:	2c 2f       	mov	r18, r28
     74c:	28 2b       	or	r18, r24
     74e:	3b 2d       	mov	r19, r11
     750:	4c 2d       	mov	r20, r12
     752:	5d 2d       	mov	r21, r13
     754:	6e 2d       	mov	r22, r14
     756:	7f 2d       	mov	r23, r15
     758:	80 2f       	mov	r24, r16
     75a:	91 2f       	mov	r25, r17
     75c:	08 e0       	ldi	r16, 0x08	; 8
     75e:	0e 94 30 0c 	call	0x1860	; 0x1860 <__ashldi3>
     762:	c2 2f       	mov	r28, r18
     764:	b3 2e       	mov	r11, r19
     766:	c4 2e       	mov	r12, r20
     768:	d5 2e       	mov	r13, r21
     76a:	e6 2e       	mov	r14, r22
     76c:	f7 2e       	mov	r15, r23
     76e:	08 2f       	mov	r16, r24
     770:	19 2f       	mov	r17, r25
     772:	df 5f       	subi	r29, 0xFF	; 255
     774:	da 11       	cpse	r29, r10
     776:	e6 cf       	rjmp	.-52     	; 0x744 <_ZN8NRF24L0115readSPIRegisterEhh+0x34>
     778:	08 c0       	rjmp	.+16     	; 0x78a <_ZN8NRF24L0115readSPIRegisterEhh+0x7a>
     77a:	c0 e0       	ldi	r28, 0x00	; 0
     77c:	b1 2c       	mov	r11, r1
     77e:	c1 2c       	mov	r12, r1
     780:	d1 2c       	mov	r13, r1
     782:	e1 2c       	mov	r14, r1
     784:	f1 2c       	mov	r15, r1
     786:	00 e0       	ldi	r16, 0x00	; 0
     788:	10 e0       	ldi	r17, 0x00	; 0
     78a:	41 9a       	sbi	0x08, 1	; 8
     78c:	2c 2f       	mov	r18, r28
     78e:	3b 2d       	mov	r19, r11
     790:	4c 2d       	mov	r20, r12
     792:	5d 2d       	mov	r21, r13
     794:	6e 2d       	mov	r22, r14
     796:	7f 2d       	mov	r23, r15
     798:	80 2f       	mov	r24, r16
     79a:	91 2f       	mov	r25, r17
     79c:	08 e0       	ldi	r16, 0x08	; 8
     79e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__lshrdi3>
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	08 95       	ret

000007b8 <_ZN8NRF24L019printInfoEv>:
     7b8:	0f 93       	push	r16
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	ec 01       	movw	r28, r24
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	0e 94 1a 03 	call	0x634	; 0x634 <_Z15printStringCRNLPKc>
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	ce 01       	movw	r24, r28
     7ce:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     7d2:	01 e0       	ldi	r16, 0x01	; 1
     7d4:	0e 94 6f 03 	call	0x6de	; 0x6de <_Z14printHexNumberyh>
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z11printStringPKc>
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	67 e1       	ldi	r22, 0x17	; 23
     7e4:	ce 01       	movw	r24, r28
     7e6:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     7ea:	0e 94 6f 03 	call	0x6de	; 0x6de <_Z14printHexNumberyh>
     7ee:	8f e0       	ldi	r24, 0x0F	; 15
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z11printStringPKc>
     7f6:	6f ef       	ldi	r22, 0xFF	; 255
     7f8:	ce 01       	movw	r24, r28
     7fa:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0114sendSPICommandEh>
     7fe:	28 2f       	mov	r18, r24
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 6f 03 	call	0x6de	; 0x6de <_Z14printHexNumberyh>
     812:	89 e1       	ldi	r24, 0x19	; 25
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z11printStringPKc>
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	68 e0       	ldi	r22, 0x08	; 8
     81e:	ce 01       	movw	r24, r28
     820:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     824:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z11printNumbery>
     828:	87 e2       	ldi	r24, 0x27	; 39
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z11printStringPKc>
     830:	41 e0       	ldi	r20, 0x01	; 1
     832:	6d e1       	ldi	r22, 0x1D	; 29
     834:	ce 01       	movw	r24, r28
     836:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     83a:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z11printNumbery>
     83e:	82 e3       	ldi	r24, 0x32	; 50
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z11printStringPKc>
     846:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z6millisv>
     84a:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z11printNumbery>
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	0f 91       	pop	r16
     854:	08 95       	ret

00000856 <_ZN8NRF24L018isTXFullEv>:
     856:	41 e0       	ldi	r20, 0x01	; 1
     858:	67 e1       	ldi	r22, 0x17	; 23
     85a:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     85e:	82 2f       	mov	r24, r18
     860:	80 72       	andi	r24, 0x20	; 32
     862:	08 95       	ret

00000864 <_ZN8NRF24L0111isTX_DS_SetEv>:
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	67 e0       	ldi	r22, 0x07	; 7
     868:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     86c:	82 2f       	mov	r24, r18
     86e:	80 72       	andi	r24, 0x20	; 32
     870:	08 95       	ret

00000872 <_ZN8NRF24L0116writeSPIRegisterEhyh>:
     872:	9f 92       	push	r9
     874:	af 92       	push	r10
     876:	bf 92       	push	r11
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	c2 2f       	mov	r28, r18
     88a:	d3 2f       	mov	r29, r19
     88c:	b4 2e       	mov	r11, r20
     88e:	a5 2e       	mov	r10, r21
     890:	41 98       	cbi	0x08, 1	; 8
     892:	86 2f       	mov	r24, r22
     894:	80 62       	ori	r24, 0x20	; 32
     896:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     89a:	98 2e       	mov	r9, r24
     89c:	cc 20       	and	r12, r12
     89e:	d1 f0       	breq	.+52     	; 0x8d4 <_ZN8NRF24L0116writeSPIRegisterEhyh+0x62>
     8a0:	d1 2c       	mov	r13, r1
     8a2:	8e 2d       	mov	r24, r14
     8a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     8a8:	2e 2d       	mov	r18, r14
     8aa:	3f 2d       	mov	r19, r15
     8ac:	40 2f       	mov	r20, r16
     8ae:	51 2f       	mov	r21, r17
     8b0:	6c 2f       	mov	r22, r28
     8b2:	7d 2f       	mov	r23, r29
     8b4:	8b 2d       	mov	r24, r11
     8b6:	9a 2d       	mov	r25, r10
     8b8:	08 e0       	ldi	r16, 0x08	; 8
     8ba:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__lshrdi3>
     8be:	e2 2e       	mov	r14, r18
     8c0:	f3 2e       	mov	r15, r19
     8c2:	04 2f       	mov	r16, r20
     8c4:	15 2f       	mov	r17, r21
     8c6:	c6 2f       	mov	r28, r22
     8c8:	d7 2f       	mov	r29, r23
     8ca:	b8 2e       	mov	r11, r24
     8cc:	a9 2e       	mov	r10, r25
     8ce:	d3 94       	inc	r13
     8d0:	dc 10       	cpse	r13, r12
     8d2:	e7 cf       	rjmp	.-50     	; 0x8a2 <_ZN8NRF24L0116writeSPIRegisterEhyh+0x30>
     8d4:	41 9a       	sbi	0x08, 1	; 8
     8d6:	89 2d       	mov	r24, r9
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	9f 90       	pop	r9
     8ee:	08 95       	ret

000008f0 <_ZN8NRF24L017powerONEb>:
     8f0:	cf 92       	push	r12
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	ec 01       	movw	r28, r24
     900:	e6 2e       	mov	r14, r22
     902:	41 e0       	ldi	r20, 0x01	; 1
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     90a:	2d 7f       	andi	r18, 0xFD	; 253
     90c:	ee 0c       	add	r14, r14
     90e:	e2 2a       	or	r14, r18
     910:	eb 82       	std	Y+3, r14	; 0x03
     912:	cc 24       	eor	r12, r12
     914:	c3 94       	inc	r12
     916:	f1 2c       	mov	r15, r1
     918:	00 e0       	ldi	r16, 0x00	; 0
     91a:	10 e0       	ldi	r17, 0x00	; 0
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	ce 01       	movw	r24, r28
     928:	0e 94 39 04 	call	0x872	; 0x872 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	cf 90       	pop	r12
     93a:	08 95       	ret

0000093c <_ZN8NRF24L017setModeEb>:
     93c:	af 92       	push	r10
     93e:	bf 92       	push	r11
     940:	cf 92       	push	r12
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	ec 01       	movw	r28, r24
     952:	d6 2e       	mov	r13, r22
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     95c:	2b 83       	std	Y+3, r18	; 0x03
     95e:	01 e0       	ldi	r16, 0x01	; 1
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 6f 03 	call	0x6de	; 0x6de <_Z14printHexNumberyh>
     972:	8b 81       	ldd	r24, Y+3	; 0x03
     974:	8e 7f       	andi	r24, 0xFE	; 254
     976:	ed 2c       	mov	r14, r13
     978:	e8 2a       	or	r14, r24
     97a:	eb 82       	std	Y+3, r14	; 0x03
     97c:	cc 24       	eor	r12, r12
     97e:	c3 94       	inc	r12
     980:	f1 2c       	mov	r15, r1
     982:	00 e0       	ldi	r16, 0x00	; 0
     984:	10 e0       	ldi	r17, 0x00	; 0
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	ce 01       	movw	r24, r28
     992:	0e 94 39 04 	call	0x872	; 0x872 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     996:	dd 20       	and	r13, r13
     998:	29 f0       	breq	.+10     	; 0x9a4 <_ZN8NRF24L017setModeEb+0x68>
     99a:	8d ed       	ldi	r24, 0xDD	; 221
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 01 03 	call	0x602	; 0x602 <_Z6NotifyPKc>
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <_ZN8NRF24L017setModeEb+0x70>
     9a4:	87 eb       	ldi	r24, 0xB7	; 183
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 01 03 	call	0x602	; 0x602 <_Z6NotifyPKc>
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	ce 01       	movw	r24, r28
     9b2:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     9b6:	ab 80       	ldd	r10, Y+3	; 0x03
     9b8:	b1 2c       	mov	r11, r1
     9ba:	c1 2c       	mov	r12, r1
     9bc:	d1 2c       	mov	r13, r1
     9be:	e1 2c       	mov	r14, r1
     9c0:	f1 2c       	mov	r15, r1
     9c2:	00 e0       	ldi	r16, 0x00	; 0
     9c4:	10 e0       	ldi	r17, 0x00	; 0
     9c6:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__cmpdi2>
     9ca:	29 f0       	breq	.+10     	; 0x9d6 <_ZN8NRF24L017setModeEb+0x9a>
     9cc:	81 e8       	ldi	r24, 0x81	; 129
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 01 03 	call	0x602	; 0x602 <_Z6NotifyPKc>
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <_ZN8NRF24L017setModeEb+0xa2>
     9d6:	88 e6       	ldi	r24, 0x68	; 104
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 01 03 	call	0x602	; 0x602 <_Z6NotifyPKc>
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	cf 90       	pop	r12
     9ee:	bf 90       	pop	r11
     9f0:	af 90       	pop	r10
     9f2:	08 95       	ret

000009f4 <_ZN8NRF24L0120enableACKWithPayloadEb>:
     9f4:	cf 92       	push	r12
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ec 01       	movw	r28, r24
     a04:	e6 2e       	mov	r14, r22
     a06:	41 e0       	ldi	r20, 0x01	; 1
     a08:	6d e1       	ldi	r22, 0x1D	; 29
     a0a:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     a0e:	2d 7f       	andi	r18, 0xFD	; 253
     a10:	ee 0c       	add	r14, r14
     a12:	e2 2a       	or	r14, r18
     a14:	eb 82       	std	Y+3, r14	; 0x03
     a16:	cc 24       	eor	r12, r12
     a18:	c3 94       	inc	r12
     a1a:	f1 2c       	mov	r15, r1
     a1c:	00 e0       	ldi	r16, 0x00	; 0
     a1e:	10 e0       	ldi	r17, 0x00	; 0
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	6d e1       	ldi	r22, 0x1D	; 29
     a2a:	ce 01       	movw	r24, r28
     a2c:	0e 94 39 04 	call	0x872	; 0x872 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ff 90       	pop	r15
     a3a:	ef 90       	pop	r14
     a3c:	cf 90       	pop	r12
     a3e:	08 95       	ret

00000a40 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>:
     a40:	cf 92       	push	r12
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	ec 01       	movw	r28, r24
     a50:	e6 2e       	mov	r14, r22
     a52:	41 e0       	ldi	r20, 0x01	; 1
     a54:	6d e1       	ldi	r22, 0x1D	; 29
     a56:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     a5a:	2b 7f       	andi	r18, 0xFB	; 251
     a5c:	ee 0c       	add	r14, r14
     a5e:	ee 0c       	add	r14, r14
     a60:	e2 2a       	or	r14, r18
     a62:	eb 82       	std	Y+3, r14	; 0x03
     a64:	cc 24       	eor	r12, r12
     a66:	c3 94       	inc	r12
     a68:	f1 2c       	mov	r15, r1
     a6a:	00 e0       	ldi	r16, 0x00	; 0
     a6c:	10 e0       	ldi	r17, 0x00	; 0
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	6d e1       	ldi	r22, 0x1D	; 29
     a78:	ce 01       	movw	r24, r28
     a7a:	0e 94 39 04 	call	0x872	; 0x872 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	cf 90       	pop	r12
     a8c:	08 95       	ret

00000a8e <_ZN8NRF24L0118enableDPLForRXPipeEhb>:
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	cf 92       	push	r12
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	66 30       	cpi	r22, 0x06	; 6
     aa2:	48 f5       	brcc	.+82     	; 0xaf6 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x68>
     aa4:	c4 2f       	mov	r28, r20
     aa6:	d6 2f       	mov	r29, r22
     aa8:	5c 01       	movw	r10, r24
     aaa:	41 e0       	ldi	r20, 0x01	; 1
     aac:	6c e1       	ldi	r22, 0x1C	; 28
     aae:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0d 2e       	mov	r0, r29
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x30>
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	0a 94       	dec	r0
     ac0:	e2 f7       	brpl	.-8      	; 0xaba <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x2c>
     ac2:	80 95       	com	r24
     ac4:	82 23       	and	r24, r18
     ac6:	4c 2f       	mov	r20, r28
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x42>
     acc:	44 0f       	add	r20, r20
     ace:	55 1f       	adc	r21, r21
     ad0:	da 95       	dec	r29
     ad2:	e2 f7       	brpl	.-8      	; 0xacc <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x3e>
     ad4:	e8 2e       	mov	r14, r24
     ad6:	e4 2a       	or	r14, r20
     ad8:	f5 01       	movw	r30, r10
     ada:	e3 82       	std	Z+3, r14	; 0x03
     adc:	cc 24       	eor	r12, r12
     ade:	c3 94       	inc	r12
     ae0:	f1 2c       	mov	r15, r1
     ae2:	00 e0       	ldi	r16, 0x00	; 0
     ae4:	10 e0       	ldi	r17, 0x00	; 0
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	6c e1       	ldi	r22, 0x1C	; 28
     af0:	c5 01       	movw	r24, r10
     af2:	0e 94 39 04 	call	0x872	; 0x872 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	08 95       	ret

00000b0a <_ZN8NRF24L0110clearTX_DSEv>:
     b0a:	cf 92       	push	r12
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cc 24       	eor	r12, r12
     b16:	c3 94       	inc	r12
     b18:	68 94       	set
     b1a:	ee 24       	eor	r14, r14
     b1c:	e5 f8       	bld	r14, 5
     b1e:	f1 2c       	mov	r15, r1
     b20:	00 e0       	ldi	r16, 0x00	; 0
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	67 e0       	ldi	r22, 0x07	; 7
     b2e:	0e 94 39 04 	call	0x872	; 0x872 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	cf 90       	pop	r12
     b3c:	08 95       	ret

00000b3e <_ZN8NRF24L0113setRFDataRateEb>:
     b3e:	cf 92       	push	r12
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	ec 01       	movw	r28, r24
     b4e:	e6 2e       	mov	r14, r22
     b50:	41 e0       	ldi	r20, 0x01	; 1
     b52:	66 e0       	ldi	r22, 0x06	; 6
     b54:	0e 94 88 03 	call	0x710	; 0x710 <_ZN8NRF24L0115readSPIRegisterEhh>
     b58:	27 7f       	andi	r18, 0xF7	; 247
     b5a:	ee 0c       	add	r14, r14
     b5c:	ee 0c       	add	r14, r14
     b5e:	ee 0c       	add	r14, r14
     b60:	e2 2a       	or	r14, r18
     b62:	eb 82       	std	Y+3, r14	; 0x03
     b64:	cc 24       	eor	r12, r12
     b66:	c3 94       	inc	r12
     b68:	f1 2c       	mov	r15, r1
     b6a:	00 e0       	ldi	r16, 0x00	; 0
     b6c:	10 e0       	ldi	r17, 0x00	; 0
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	66 e0       	ldi	r22, 0x06	; 6
     b78:	ce 01       	movw	r24, r28
     b7a:	0e 94 39 04 	call	0x872	; 0x872 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
     b8a:	cf 90       	pop	r12
     b8c:	08 95       	ret

00000b8e <_ZN8NRF24L0119fastTransferPayloadEh>:
     b8e:	af 92       	push	r10
     b90:	bf 92       	push	r11
     b92:	cf 92       	push	r12
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	1f 92       	push	r1
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	5c 01       	movw	r10, r24
     ba8:	69 83       	std	Y+1, r22	; 0x01
     baa:	6f ef       	ldi	r22, 0xFF	; 255
     bac:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0114sendSPICommandEh>
     bb0:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <_ZZN8NRF24L0119fastTransferPayloadEhE6status>
     bb4:	80 fd       	sbrc	r24, 0
     bb6:	09 c0       	rjmp	.+18     	; 0xbca <_ZN8NRF24L0119fastTransferPayloadEh+0x3c>
     bb8:	41 98       	cbi	0x08, 1	; 8
     bba:	80 ea       	ldi	r24, 0xA0	; 160
     bbc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     bc6:	41 9a       	sbi	0x08, 1	; 8
     bc8:	12 c0       	rjmp	.+36     	; 0xbee <_ZN8NRF24L0119fastTransferPayloadEh+0x60>
     bca:	84 ff       	sbrs	r24, 4
     bcc:	10 c0       	rjmp	.+32     	; 0xbee <_ZN8NRF24L0119fastTransferPayloadEh+0x60>
     bce:	cc 24       	eor	r12, r12
     bd0:	c3 94       	inc	r12
     bd2:	68 94       	set
     bd4:	ee 24       	eor	r14, r14
     bd6:	e4 f8       	bld	r14, 4
     bd8:	f1 2c       	mov	r15, r1
     bda:	00 e0       	ldi	r16, 0x00	; 0
     bdc:	10 e0       	ldi	r17, 0x00	; 0
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	c5 01       	movw	r24, r10
     bea:	0e 94 39 04 	call	0x872	; 0x872 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     bee:	0f 90       	pop	r0
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	cf 90       	pop	r12
     bfe:	bf 90       	pop	r11
     c00:	af 90       	pop	r10
     c02:	08 95       	ret

00000c04 <_ZN8NRF24L0118setTransmitAddressEy>:
     c04:	cf 92       	push	r12
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	0f 2e       	mov	r0, r31
     c10:	f5 e0       	ldi	r31, 0x05	; 5
     c12:	cf 2e       	mov	r12, r31
     c14:	f0 2d       	mov	r31, r0
     c16:	e0 2e       	mov	r14, r16
     c18:	f1 2e       	mov	r15, r17
     c1a:	02 2f       	mov	r16, r18
     c1c:	13 2f       	mov	r17, r19
     c1e:	24 2f       	mov	r18, r20
     c20:	35 2f       	mov	r19, r21
     c22:	46 2f       	mov	r20, r22
     c24:	57 2f       	mov	r21, r23
     c26:	60 e1       	ldi	r22, 0x10	; 16
     c28:	0e 94 39 04 	call	0x872	; 0x872 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	cf 90       	pop	r12
     c36:	08 95       	ret

00000c38 <_ZN8NRF24L0118setReceive0AddressEy>:
     c38:	cf 92       	push	r12
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	0f 2e       	mov	r0, r31
     c44:	f5 e0       	ldi	r31, 0x05	; 5
     c46:	cf 2e       	mov	r12, r31
     c48:	f0 2d       	mov	r31, r0
     c4a:	e0 2e       	mov	r14, r16
     c4c:	f1 2e       	mov	r15, r17
     c4e:	02 2f       	mov	r16, r18
     c50:	13 2f       	mov	r17, r19
     c52:	24 2f       	mov	r18, r20
     c54:	35 2f       	mov	r19, r21
     c56:	46 2f       	mov	r20, r22
     c58:	57 2f       	mov	r21, r23
     c5a:	6a e0       	ldi	r22, 0x0A	; 10
     c5c:	0e 94 39 04 	call	0x872	; 0x872 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	cf 90       	pop	r12
     c6a:	08 95       	ret

00000c6c <_ZN8NRF24L0110initializeEv>:
     c6c:	cf 92       	push	r12
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	ec 01       	movw	r28, r24
     c7c:	39 9a       	sbi	0x07, 1	; 7
     c7e:	38 9a       	sbi	0x07, 0	; 7
     c80:	40 9a       	sbi	0x08, 0	; 8
     c82:	57 9a       	sbi	0x0a, 7	; 10
     c84:	1a 82       	std	Y+2, r1	; 0x02
     c86:	85 e2       	ldi	r24, 0x25	; 37
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 01 03 	call	0x602	; 0x602 <_Z6NotifyPKc>
     c8e:	28 81       	ld	r18, Y
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z11printNumbery>
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 01 03 	call	0x602	; 0x602 <_Z6NotifyPKc>
     caa:	29 81       	ldd	r18, Y+1	; 0x01
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z11printNumbery>
     cbe:	05 eb       	ldi	r16, 0xB5	; 181
     cc0:	1a eb       	ldi	r17, 0xBA	; 186
     cc2:	2a eb       	ldi	r18, 0xBA	; 186
     cc4:	3a eb       	ldi	r19, 0xBA	; 186
     cc6:	4a eb       	ldi	r20, 0xBA	; 186
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	ce 01       	movw	r24, r28
     cd0:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN8NRF24L0118setTransmitAddressEy>
     cd4:	2a eb       	ldi	r18, 0xBA	; 186
     cd6:	3a eb       	ldi	r19, 0xBA	; 186
     cd8:	4a eb       	ldi	r20, 0xBA	; 186
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	ce 01       	movw	r24, r28
     ce2:	0e 94 1c 06 	call	0xc38	; 0xc38 <_ZN8NRF24L0118setReceive0AddressEy>
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	ce 01       	movw	r24, r28
     cea:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN8NRF24L0113setRFDataRateEb>
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	ce 01       	movw	r24, r28
     cf2:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN8NRF24L017setModeEb>
     cf6:	88 85       	ldd	r24, Y+8	; 0x08
     cf8:	88 23       	and	r24, r24
     cfa:	99 f0       	breq	.+38     	; 0xd22 <_ZN8NRF24L0110initializeEv+0xb6>
     cfc:	ce 01       	movw	r24, r28
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_ZN8NRF24L0114toggleActivateEv>
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	ce 01       	movw	r24, r28
     d06:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	ce 01       	movw	r24, r28
     d10:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN8NRF24L0118enableDPLForRXPipeEhb>
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	ce 01       	movw	r24, r28
     d18:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN8NRF24L0120enableACKWithPayloadEb>
     d1c:	88 85       	ldd	r24, Y+8	; 0x08
     d1e:	81 11       	cpse	r24, r1
     d20:	0e c0       	rjmp	.+28     	; 0xd3e <_ZN8NRF24L0110initializeEv+0xd2>
     d22:	e8 80       	ld	r14, Y
     d24:	cc 24       	eor	r12, r12
     d26:	c3 94       	inc	r12
     d28:	f1 2c       	mov	r15, r1
     d2a:	00 e0       	ldi	r16, 0x00	; 0
     d2c:	10 e0       	ldi	r17, 0x00	; 0
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	61 e1       	ldi	r22, 0x11	; 17
     d38:	ce 01       	movw	r24, r28
     d3a:	0e 94 39 04 	call	0x872	; 0x872 <_ZN8NRF24L0116writeSPIRegisterEhyh>
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	ce 01       	movw	r24, r28
     d42:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_ZN8NRF24L017powerONEb>
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	ff 90       	pop	r15
     d50:	ef 90       	pop	r14
     d52:	cf 90       	pop	r12
     d54:	08 95       	ret

00000d56 <_ZN8NRF24L01C1Ehhb>:
     d56:	3f ef       	ldi	r19, 0xFF	; 255
     d58:	50 e7       	ldi	r21, 0x70	; 112
     d5a:	72 e0       	ldi	r23, 0x02	; 2
     d5c:	31 50       	subi	r19, 0x01	; 1
     d5e:	50 40       	sbci	r21, 0x00	; 0
     d60:	70 40       	sbci	r23, 0x00	; 0
     d62:	e1 f7       	brne	.-8      	; 0xd5c <_ZN8NRF24L01C1Ehhb+0x6>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <_ZN8NRF24L01C1Ehhb+0x10>
     d66:	00 00       	nop
     d68:	fc 01       	movw	r30, r24
     d6a:	27 83       	std	Z+7, r18	; 0x07
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	20 87       	std	Z+8, r18	; 0x08
     d70:	60 83       	st	Z, r22
     d72:	41 83       	std	Z+1, r20	; 0x01
     d74:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN8NRF24L0110initializeEv>
     d78:	08 95       	ret

00000d7a <_ZN8NRF24L017flushTXEv>:
void NRF24L01::setReceive0Address(uint64_t address){
	writeSPIRegister(RX_ADDR_P0, address, 5);
}

void NRF24L01::flushTX(){
	sendSPICommand(FLUSH_TX);
     d7a:	61 ee       	ldi	r22, 0xE1	; 225
     d7c:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0114sendSPICommandEh>
     d80:	08 95       	ret

00000d82 <_ZN11SwitchClass9doNothingEh>:
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     d82:	08 95       	ret

00000d84 <_ZN11SwitchClass5beginEv>:
     d84:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <_ZN11SwitchClass1iE>
     d88:	81 ec       	ldi	r24, 0xC1	; 193
     d8a:	96 e0       	ldi	r25, 0x06	; 6
     d8c:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <_ZN11SwitchClass17PinStateChangePtrE+0x1>
     d90:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <_ZN11SwitchClass17PinStateChangePtrE>
     d94:	08 95       	ret

00000d96 <_ZN11SwitchClass10shortPressEPFvhE>:
     d96:	fc 01       	movw	r30, r24
     d98:	77 87       	std	Z+15, r23	; 0x0f
     d9a:	66 87       	std	Z+14, r22	; 0x0e
     d9c:	70 93 00 02 	sts	0x0200, r23	; 0x800200 <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     da0:	60 93 ff 01 	sts	0x01FF, r22	; 0x8001ff <_ZN11SwitchClass16AllShortPressPtrE>
     da4:	21 e0       	ldi	r18, 0x01	; 1
     da6:	24 8f       	std	Z+28, r18	; 0x1c
     da8:	08 95       	ret

00000daa <_ZN11SwitchClass18doubleWaitCompleteEv>:
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	ec 01       	movw	r28, r24
     db0:	1b a2       	std	Y+35, r1	; 0x23
     db2:	1c a2       	std	Y+36, r1	; 0x24
     db4:	0e 94 20 0a 	call	0x1440	; 0x1440 <_ZN10TimerClass10resetTimerEv>
     db8:	ce 01       	movw	r24, r28
     dba:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN10TimerClass18resetCallbackTimerEv>
     dbe:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dc0:	81 11       	cpse	r24, r1
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <_ZN11SwitchClass18doubleWaitCompleteEv+0x22>
     dc4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_ZN11SwitchClass11AllShort_ENE>
     dc8:	88 23       	and	r24, r24
     dca:	c9 f0       	breq	.+50     	; 0xdfe <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     dcc:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_ZN11SwitchClass13AllSamePtr_ENE>
     dd0:	88 23       	and	r24, r24
     dd2:	61 f0       	breq	.+24     	; 0xdec <_ZN11SwitchClass18doubleWaitCompleteEv+0x42>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
     dda:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <_ZN11SwitchClass16AllShortPressPtrE>
     dde:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     de2:	30 97       	sbiw	r30, 0x00	; 0
     de4:	61 f0       	breq	.+24     	; 0xdfe <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     de6:	8e a1       	ldd	r24, Y+38	; 0x26
     de8:	09 95       	icall
     dea:	09 c0       	rjmp	.+18     	; 0xdfe <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
     df2:	ee 85       	ldd	r30, Y+14	; 0x0e
     df4:	ff 85       	ldd	r31, Y+15	; 0x0f
     df6:	30 97       	sbiw	r30, 0x00	; 0
     df8:	11 f0       	breq	.+4      	; 0xdfe <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     dfa:	8e a1       	ldd	r24, Y+38	; 0x26
     dfc:	09 95       	icall
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <_ZN11SwitchClass17callAllDoubleWaitEh>:
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <_ZN11SwitchClass1iE>
     e0c:	99 23       	and	r25, r25
     e0e:	c1 f0       	breq	.+48     	; 0xe40 <_ZN11SwitchClass17callAllDoubleWaitEh+0x3c>
     e10:	d8 2f       	mov	r29, r24
     e12:	c0 e0       	ldi	r28, 0x00	; 0
     e14:	ec 2f       	mov	r30, r28
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	ef 5e       	subi	r30, 0xEF	; 239
     e1e:	fd 4f       	sbci	r31, 0xFD	; 253
     e20:	01 90       	ld	r0, Z+
     e22:	f0 81       	ld	r31, Z
     e24:	e0 2d       	mov	r30, r0
     e26:	91 a5       	ldd	r25, Z+41	; 0x29
     e28:	9d 13       	cpse	r25, r29
     e2a:	05 c0       	rjmp	.+10     	; 0xe36 <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     e2c:	30 97       	sbiw	r30, 0x00	; 0
     e2e:	19 f0       	breq	.+6      	; 0xe36 <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     e30:	cf 01       	movw	r24, r30
     e32:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN11SwitchClass18doubleWaitCompleteEv>
     e36:	cf 5f       	subi	r28, 0xFF	; 255
     e38:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <_ZN11SwitchClass1iE>
     e3c:	c9 17       	cp	r28, r25
     e3e:	50 f3       	brcs	.-44     	; 0xe14 <_ZN11SwitchClass17callAllDoubleWaitEh+0x10>
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <_ZN11SwitchClass17enableSamePtrModeEb>:
     e46:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_ZN11SwitchClass13AllSamePtr_ENE>
     e4a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_ZN11SwitchClass11AllShort_ENE>
     e4e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_ZN11SwitchClass12AllDouble_ENE>
     e52:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_ZN11SwitchClass10AllLong_ENE>
     e56:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZN11SwitchClass20AllContinuousLong_ENE>
     e5a:	08 95       	ret

00000e5c <_ZN11SwitchClass16updatePinBuffersEv>:
     e5c:	83 b1       	in	r24, 0x03	; 3
     e5e:	ec e0       	ldi	r30, 0x0C	; 12
     e60:	f2 e0       	ldi	r31, 0x02	; 2
     e62:	80 83       	st	Z, r24
     e64:	86 b1       	in	r24, 0x06	; 6
     e66:	81 83       	std	Z+1, r24	; 0x01
     e68:	89 b1       	in	r24, 0x09	; 9
     e6a:	82 83       	std	Z+2, r24	; 0x02
     e6c:	08 95       	ret

00000e6e <_ZN11SwitchClass10pollSwitchEv>:
     e6e:	fc 01       	movw	r30, r24
     e70:	80 a5       	ldd	r24, Z+40	; 0x28
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	49 f0       	breq	.+18     	; 0xe88 <_ZN11SwitchClass10pollSwitchEv+0x1a>
     e76:	18 f0       	brcs	.+6      	; 0xe7e <_ZN11SwitchClass10pollSwitchEv+0x10>
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	59 f0       	breq	.+22     	; 0xe92 <_ZN11SwitchClass10pollSwitchEv+0x24>
     e7c:	0e c0       	rjmp	.+28     	; 0xe9a <_ZN11SwitchClass10pollSwitchEv+0x2c>
     e7e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <_ZN11SwitchClass9PinBufferE>
     e82:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_ZN11SwitchClass11SwitchStateE>
     e86:	09 c0       	rjmp	.+18     	; 0xe9a <_ZN11SwitchClass10pollSwitchEv+0x2c>
     e88:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <_ZN11SwitchClass9PinBufferE+0x1>
     e8c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_ZN11SwitchClass11SwitchStateE>
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <_ZN11SwitchClass10pollSwitchEv+0x2c>
     e92:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <_ZN11SwitchClass9PinBufferE+0x2>
     e96:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_ZN11SwitchClass11SwitchStateE>
     e9a:	82 8d       	ldd	r24, Z+26	; 0x1a
     e9c:	81 a3       	std	Z+33, r24	; 0x21
     e9e:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <_ZN11SwitchClass11SwitchStateE>
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	07 a0       	ldd	r0, Z+39	; 0x27
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <_ZN11SwitchClass10pollSwitchEv+0x3e>
     ea8:	35 95       	asr	r19
     eaa:	27 95       	ror	r18
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <_ZN11SwitchClass10pollSwitchEv+0x3a>
     eb0:	21 70       	andi	r18, 0x01	; 1
     eb2:	22 8f       	std	Z+26, r18	; 0x1a
     eb4:	08 95       	ret

00000eb6 <_ZN11SwitchClass16initializeSwitchEhhPS_>:
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	ec 01       	movw	r28, r24
     ec4:	f6 2e       	mov	r15, r22
     ec6:	e4 2e       	mov	r14, r20
     ec8:	89 01       	movw	r16, r18
     eca:	1f 86       	std	Y+15, r1	; 0x0f
     ecc:	1e 86       	std	Y+14, r1	; 0x0e
     ece:	1b 8a       	std	Y+19, r1	; 0x13
     ed0:	1a 8a       	std	Y+18, r1	; 0x12
     ed2:	19 8a       	std	Y+17, r1	; 0x11
     ed4:	18 8a       	std	Y+16, r1	; 0x10
     ed6:	1d 8a       	std	Y+21, r1	; 0x15
     ed8:	1c 8a       	std	Y+20, r1	; 0x14
     eda:	1f 8a       	std	Y+23, r1	; 0x17
     edc:	1e 8a       	std	Y+22, r1	; 0x16
     ede:	19 8e       	std	Y+25, r1	; 0x19
     ee0:	18 8e       	std	Y+24, r1	; 0x18
     ee2:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <_ZN10TimerClass15initializeTimerEv>
     ee6:	ef a2       	std	Y+39, r14	; 0x27
     ee8:	f8 a6       	std	Y+40, r15	; 0x28
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	6e 2d       	mov	r22, r14
     eee:	8f 2d       	mov	r24, r15
     ef0:	0e 94 49 01 	call	0x292	; 0x292 <_Z15setPinDirectionhhb>
     ef4:	41 e0       	ldi	r20, 0x01	; 1
     ef6:	6f a1       	ldd	r22, Y+39	; 0x27
     ef8:	88 a5       	ldd	r24, Y+40	; 0x28
     efa:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z11setPinStatehhb>
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	6e 2d       	mov	r22, r14
     f02:	8f 2d       	mov	r24, r15
     f04:	0e 94 9a 01 	call	0x334	; 0x334 <_Z21setPinChangeInterrupthhb>
     f08:	88 a5       	ldd	r24, Y+40	; 0x28
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	41 f0       	breq	.+16     	; 0xf1e <_ZN11SwitchClass16initializeSwitchEhhPS_+0x68>
     f0e:	18 f0       	brcs	.+6      	; 0xf16 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x60>
     f10:	82 30       	cpi	r24, 0x02	; 2
     f12:	49 f0       	breq	.+18     	; 0xf26 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x70>
     f14:	0b c0       	rjmp	.+22     	; 0xf2c <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     f16:	83 b1       	in	r24, 0x03	; 3
     f18:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_ZN11SwitchClass11SwitchStateE>
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     f1e:	86 b1       	in	r24, 0x06	; 6
     f20:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_ZN11SwitchClass11SwitchStateE>
     f24:	03 c0       	rjmp	.+6      	; 0xf2c <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     f26:	89 b1       	in	r24, 0x09	; 9
     f28:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_ZN11SwitchClass11SwitchStateE>
     f2c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_ZN11SwitchClass1iE>
     f30:	e8 2f       	mov	r30, r24
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	ef 5e       	subi	r30, 0xEF	; 239
     f3a:	fd 4f       	sbci	r31, 0xFD	; 253
     f3c:	11 83       	std	Z+1, r17	; 0x01
     f3e:	00 83       	st	Z, r16
     f40:	8e a3       	std	Y+38, r24	; 0x26
     f42:	8f 5f       	subi	r24, 0xFF	; 255
     f44:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <_ZN11SwitchClass1iE>
     f48:	ce 01       	movw	r24, r28
     f4a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZN11SwitchClass16updatePinBuffersEv>
     f4e:	ce 01       	movw	r24, r28
     f50:	0e 94 37 07 	call	0xe6e	; 0xe6e <_ZN11SwitchClass10pollSwitchEv>
     f54:	1f 8e       	std	Y+31, r1	; 0x1f
     f56:	ce 01       	movw	r24, r28
     f58:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_ZN10TimerClass10getTimerIDEv>
     f5c:	89 a7       	std	Y+41, r24	; 0x29
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	08 95       	ret

00000f6c <_ZN11SwitchClass18processStateChangeEv>:
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
     f72:	0e 94 37 07 	call	0xe6e	; 0xe6e <_ZN11SwitchClass10pollSwitchEv>
     f76:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f78:	81 11       	cpse	r24, r1
     f7a:	20 c0       	rjmp	.+64     	; 0xfbc <_ZN11SwitchClass18processStateChangeEv+0x50>
     f7c:	89 a1       	ldd	r24, Y+33	; 0x21
     f7e:	88 23       	and	r24, r24
     f80:	09 f4       	brne	.+2      	; 0xf84 <_ZN11SwitchClass18processStateChangeEv+0x18>
     f82:	78 c0       	rjmp	.+240    	; 0x1074 <_ZN11SwitchClass18processStateChangeEv+0x108>
     f84:	8b a1       	ldd	r24, Y+35	; 0x23
     f86:	81 11       	cpse	r24, r1
     f88:	08 c0       	rjmp	.+16     	; 0xf9a <_ZN11SwitchClass18processStateChangeEv+0x2e>
     f8a:	2a ec       	ldi	r18, 0xCA	; 202
     f8c:	38 e0       	ldi	r19, 0x08	; 8
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	6c eb       	ldi	r22, 0xBC	; 188
     f92:	72 e0       	ldi	r23, 0x02	; 2
     f94:	ce 01       	movw	r24, r28
     f96:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	8a a3       	std	Y+34, r24	; 0x22
     f9e:	8b a1       	ldd	r24, Y+35	; 0x23
     fa0:	88 23       	and	r24, r24
     fa2:	41 f0       	breq	.+16     	; 0xfb4 <_ZN11SwitchClass18processStateChangeEv+0x48>
     fa4:	68 e5       	ldi	r22, 0x58	; 88
     fa6:	72 e0       	ldi	r23, 0x02	; 2
     fa8:	ce 01       	movw	r24, r28
     faa:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN10TimerClass7setTimeEj>
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	8c a3       	std	Y+36, r24	; 0x24
     fb2:	1b a2       	std	Y+35, r1	; 0x23
     fb4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fb6:	88 23       	and	r24, r24
     fb8:	09 f4       	brne	.+2      	; 0xfbc <_ZN11SwitchClass18processStateChangeEv+0x50>
     fba:	5c c0       	rjmp	.+184    	; 0x1074 <_ZN11SwitchClass18processStateChangeEv+0x108>
     fbc:	89 a1       	ldd	r24, Y+33	; 0x21
     fbe:	81 11       	cpse	r24, r1
     fc0:	59 c0       	rjmp	.+178    	; 0x1074 <_ZN11SwitchClass18processStateChangeEv+0x108>
     fc2:	8c a1       	ldd	r24, Y+36	; 0x24
     fc4:	81 11       	cpse	r24, r1
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <_ZN11SwitchClass18processStateChangeEv+0x68>
     fc8:	ce 01       	movw	r24, r28
     fca:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN10TimerClass15getCallBackTimeEv>
     fce:	9d a7       	std	Y+45, r25	; 0x2d
     fd0:	8c a7       	std	Y+44, r24	; 0x2c
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <_ZN11SwitchClass18processStateChangeEv+0x72>
     fd4:	ce 01       	movw	r24, r28
     fd6:	0e 94 18 0a 	call	0x1430	; 0x1430 <_ZN10TimerClass7getTimeEv>
     fda:	9d a7       	std	Y+45, r25	; 0x2d
     fdc:	8c a7       	std	Y+44, r24	; 0x2c
     fde:	ce 01       	movw	r24, r28
     fe0:	0e 94 20 0a 	call	0x1440	; 0x1440 <_ZN10TimerClass10resetTimerEv>
     fe4:	ce 01       	movw	r24, r28
     fe6:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN10TimerClass18resetCallbackTimerEv>
     fea:	1a a2       	std	Y+34, r1	; 0x22
     fec:	8c a5       	ldd	r24, Y+44	; 0x2c
     fee:	9d a5       	ldd	r25, Y+45	; 0x2d
     ff0:	0b 97       	sbiw	r24, 0x0b	; 11
     ff2:	8d 34       	cpi	r24, 0x4D	; 77
     ff4:	92 40       	sbci	r25, 0x02	; 2
     ff6:	98 f5       	brcc	.+102    	; 0x105e <_ZN11SwitchClass18processStateChangeEv+0xf2>
     ff8:	8c a1       	ldd	r24, Y+36	; 0x24
     ffa:	81 11       	cpse	r24, r1
     ffc:	17 c0       	rjmp	.+46     	; 0x102c <_ZN11SwitchClass18processStateChangeEv+0xc0>
     ffe:	8d a1       	ldd	r24, Y+37	; 0x25
    1000:	81 11       	cpse	r24, r1
    1002:	2f c0       	rjmp	.+94     	; 0x1062 <_ZN11SwitchClass18processStateChangeEv+0xf6>
    1004:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1006:	88 23       	and	r24, r24
    1008:	59 f0       	breq	.+22     	; 0x1020 <_ZN11SwitchClass18processStateChangeEv+0xb4>
    100a:	22 e0       	ldi	r18, 0x02	; 2
    100c:	37 e0       	ldi	r19, 0x07	; 7
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	64 e6       	ldi	r22, 0x64	; 100
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	ce 01       	movw	r24, r28
    1016:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	8b a3       	std	Y+35, r24	; 0x23
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <_ZN11SwitchClass18processStateChangeEv+0xba>
    1020:	ce 01       	movw	r24, r28
    1022:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN11SwitchClass18doubleWaitCompleteEv>
    1026:	8c a1       	ldd	r24, Y+36	; 0x24
    1028:	88 23       	and	r24, r24
    102a:	09 f1       	breq	.+66     	; 0x106e <_ZN11SwitchClass18processStateChangeEv+0x102>
    102c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_ZN11SwitchClass13AllSamePtr_ENE>
    1030:	88 23       	and	r24, r24
    1032:	61 f0       	breq	.+24     	; 0x104c <_ZN11SwitchClass18processStateChangeEv+0xe0>
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    103a:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <_ZN11SwitchClass17AllDoublePressPtrE>
    103e:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <_ZN11SwitchClass17AllDoublePressPtrE+0x1>
    1042:	30 97       	sbiw	r30, 0x00	; 0
    1044:	61 f0       	breq	.+24     	; 0x105e <_ZN11SwitchClass18processStateChangeEv+0xf2>
    1046:	8e a1       	ldd	r24, Y+38	; 0x26
    1048:	09 95       	icall
    104a:	09 c0       	rjmp	.+18     	; 0x105e <_ZN11SwitchClass18processStateChangeEv+0xf2>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    1052:	ea 89       	ldd	r30, Y+18	; 0x12
    1054:	fb 89       	ldd	r31, Y+19	; 0x13
    1056:	30 97       	sbiw	r30, 0x00	; 0
    1058:	11 f0       	breq	.+4      	; 0x105e <_ZN11SwitchClass18processStateChangeEv+0xf2>
    105a:	8e a1       	ldd	r24, Y+38	; 0x26
    105c:	09 95       	icall
    105e:	8d a1       	ldd	r24, Y+37	; 0x25
    1060:	81 11       	cpse	r24, r1
    1062:	1d a2       	std	Y+37, r1	; 0x25
    1064:	8c a1       	ldd	r24, Y+36	; 0x24
    1066:	88 23       	and	r24, r24
    1068:	29 f0       	breq	.+10     	; 0x1074 <_ZN11SwitchClass18processStateChangeEv+0x108>
    106a:	1c a2       	std	Y+36, r1	; 0x24
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <_ZN11SwitchClass18processStateChangeEv+0x108>
    106e:	8d a1       	ldd	r24, Y+37	; 0x25
    1070:	81 11       	cpse	r24, r1
    1072:	f7 cf       	rjmp	.-18     	; 0x1062 <_ZN11SwitchClass18processStateChangeEv+0xf6>
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <_ZN11SwitchClass25callAllProcessStateChangeEv>:
    107a:	cf 93       	push	r28
    107c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_ZN11SwitchClass1iE>
    1080:	88 23       	and	r24, r24
    1082:	91 f0       	breq	.+36     	; 0x10a8 <_ZN11SwitchClass25callAllProcessStateChangeEv+0x2e>
    1084:	c0 e0       	ldi	r28, 0x00	; 0
    1086:	ec 2f       	mov	r30, r28
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	ef 5e       	subi	r30, 0xEF	; 239
    1090:	fd 4f       	sbci	r31, 0xFD	; 253
    1092:	80 81       	ld	r24, Z
    1094:	91 81       	ldd	r25, Z+1	; 0x01
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	11 f0       	breq	.+4      	; 0x109e <_ZN11SwitchClass25callAllProcessStateChangeEv+0x24>
    109a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN11SwitchClass18processStateChangeEv>
    109e:	cf 5f       	subi	r28, 0xFF	; 255
    10a0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_ZN11SwitchClass1iE>
    10a4:	c8 17       	cp	r28, r24
    10a6:	78 f3       	brcs	.-34     	; 0x1086 <_ZN11SwitchClass25callAllProcessStateChangeEv+0xc>
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <_ZN11SwitchClass16longWaitCompleteEv>:
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24
    10b2:	18 a2       	std	Y+32, r1	; 0x20
    10b4:	1b a2       	std	Y+35, r1	; 0x23
    10b6:	1c a2       	std	Y+36, r1	; 0x24
    10b8:	8d a1       	ldd	r24, Y+37	; 0x25
    10ba:	88 23       	and	r24, r24
    10bc:	89 f1       	breq	.+98     	; 0x1120 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10be:	ce 01       	movw	r24, r28
    10c0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZN11SwitchClass16updatePinBuffersEv>
    10c4:	ce 01       	movw	r24, r28
    10c6:	0e 94 37 07 	call	0xe6e	; 0xe6e <_ZN11SwitchClass10pollSwitchEv>
    10ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10cc:	81 11       	cpse	r24, r1
    10ce:	28 c0       	rjmp	.+80     	; 0x1120 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10d2:	81 11       	cpse	r24, r1
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <_ZN11SwitchClass16longWaitCompleteEv+0x32>
    10d6:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZN11SwitchClass20AllContinuousLong_ENE>
    10da:	88 23       	and	r24, r24
    10dc:	09 f1       	breq	.+66     	; 0x1120 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10de:	2a ec       	ldi	r18, 0xCA	; 202
    10e0:	38 e0       	ldi	r19, 0x08	; 8
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	66 e4       	ldi	r22, 0x46	; 70
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	ce 01       	movw	r24, r28
    10ea:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    10ee:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_ZN11SwitchClass13AllSamePtr_ENE>
    10f2:	88 23       	and	r24, r24
    10f4:	61 f0       	breq	.+24     	; 0x110e <_ZN11SwitchClass16longWaitCompleteEv+0x62>
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    10fc:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <_ZN11SwitchClass25AllContinuousLongPressPtrE>
    1100:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <_ZN11SwitchClass25AllContinuousLongPressPtrE+0x1>
    1104:	30 97       	sbiw	r30, 0x00	; 0
    1106:	61 f0       	breq	.+24     	; 0x1120 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    1108:	8e a1       	ldd	r24, Y+38	; 0x26
    110a:	09 95       	icall
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    1114:	ec 89       	ldd	r30, Y+20	; 0x14
    1116:	fd 89       	ldd	r31, Y+21	; 0x15
    1118:	30 97       	sbiw	r30, 0x00	; 0
    111a:	11 f0       	breq	.+4      	; 0x1120 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    111c:	8e a1       	ldd	r24, Y+38	; 0x26
    111e:	09 95       	icall
    1120:	8a a1       	ldd	r24, Y+34	; 0x22
    1122:	88 23       	and	r24, r24
    1124:	a1 f1       	breq	.+104    	; 0x118e <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    1126:	ce 01       	movw	r24, r28
    1128:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZN11SwitchClass16updatePinBuffersEv>
    112c:	ce 01       	movw	r24, r28
    112e:	0e 94 37 07 	call	0xe6e	; 0xe6e <_ZN11SwitchClass10pollSwitchEv>
    1132:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1134:	81 11       	cpse	r24, r1
    1136:	2b c0       	rjmp	.+86     	; 0x118e <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    1138:	8d 8d       	ldd	r24, Y+29	; 0x1d
    113a:	81 11       	cpse	r24, r1
    113c:	04 c0       	rjmp	.+8      	; 0x1146 <_ZN11SwitchClass16longWaitCompleteEv+0x9a>
    113e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_ZN11SwitchClass10AllLong_ENE>
    1142:	88 23       	and	r24, r24
    1144:	21 f1       	breq	.+72     	; 0x118e <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    1146:	1a a2       	std	Y+34, r1	; 0x22
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	8d a3       	std	Y+37, r24	; 0x25
    114c:	2a ec       	ldi	r18, 0xCA	; 202
    114e:	38 e0       	ldi	r19, 0x08	; 8
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	62 e3       	ldi	r22, 0x32	; 50
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	ce 01       	movw	r24, r28
    1158:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    115c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_ZN11SwitchClass13AllSamePtr_ENE>
    1160:	88 23       	and	r24, r24
    1162:	61 f0       	breq	.+24     	; 0x117c <_ZN11SwitchClass16longWaitCompleteEv+0xd0>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    116a:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <_ZN11SwitchClass15AllLongPressPtrE>
    116e:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <_ZN11SwitchClass15AllLongPressPtrE+0x1>
    1172:	30 97       	sbiw	r30, 0x00	; 0
    1174:	61 f0       	breq	.+24     	; 0x118e <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    1176:	8e a1       	ldd	r24, Y+38	; 0x26
    1178:	09 95       	icall
    117a:	09 c0       	rjmp	.+18     	; 0x118e <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    1182:	e8 89       	ldd	r30, Y+16	; 0x10
    1184:	f9 89       	ldd	r31, Y+17	; 0x11
    1186:	30 97       	sbiw	r30, 0x00	; 0
    1188:	11 f0       	breq	.+4      	; 0x118e <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    118a:	8e a1       	ldd	r24, Y+38	; 0x26
    118c:	09 95       	icall
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <_ZN11SwitchClass20callAllOjectLongWaitEh>:
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <_ZN11SwitchClass1iE>
    119c:	99 23       	and	r25, r25
    119e:	c1 f0       	breq	.+48     	; 0x11d0 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x3c>
    11a0:	d8 2f       	mov	r29, r24
    11a2:	c0 e0       	ldi	r28, 0x00	; 0
    11a4:	ec 2f       	mov	r30, r28
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	ee 0f       	add	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	ef 5e       	subi	r30, 0xEF	; 239
    11ae:	fd 4f       	sbci	r31, 0xFD	; 253
    11b0:	01 90       	ld	r0, Z+
    11b2:	f0 81       	ld	r31, Z
    11b4:	e0 2d       	mov	r30, r0
    11b6:	91 a5       	ldd	r25, Z+41	; 0x29
    11b8:	9d 13       	cpse	r25, r29
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    11bc:	30 97       	sbiw	r30, 0x00	; 0
    11be:	19 f0       	breq	.+6      	; 0x11c6 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    11c0:	cf 01       	movw	r24, r30
    11c2:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN11SwitchClass16longWaitCompleteEv>
    11c6:	cf 5f       	subi	r28, 0xFF	; 255
    11c8:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <_ZN11SwitchClass1iE>
    11cc:	c9 17       	cp	r28, r25
    11ce:	50 f3       	brcs	.-44     	; 0x11a4 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x10>
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	08 95       	ret

000011d6 <__vector_1>:
}

ISR(INT0_vect){
    11d6:	1f 92       	push	r1
    11d8:	0f 92       	push	r0
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	0f 92       	push	r0
    11de:	11 24       	eor	r1, r1
    11e0:	2f 93       	push	r18
    11e2:	3f 93       	push	r19
    11e4:	4f 93       	push	r20
    11e6:	5f 93       	push	r21
    11e8:	6f 93       	push	r22
    11ea:	7f 93       	push	r23
    11ec:	8f 93       	push	r24
    11ee:	9f 93       	push	r25
    11f0:	af 93       	push	r26
    11f2:	bf 93       	push	r27
    11f4:	ef 93       	push	r30
    11f6:	ff 93       	push	r31
	Switch.PinBuffer[0] = PINB;
    11f8:	83 b1       	in	r24, 0x03	; 3
    11fa:	ec e0       	ldi	r30, 0x0C	; 12
    11fc:	f2 e0       	ldi	r31, 0x02	; 2
    11fe:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    1200:	86 b1       	in	r24, 0x06	; 6
    1202:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    1204:	89 b1       	in	r24, 0x09	; 9
    1206:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1208:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1212:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    1216:	ff 91       	pop	r31
    1218:	ef 91       	pop	r30
    121a:	bf 91       	pop	r27
    121c:	af 91       	pop	r26
    121e:	9f 91       	pop	r25
    1220:	8f 91       	pop	r24
    1222:	7f 91       	pop	r23
    1224:	6f 91       	pop	r22
    1226:	5f 91       	pop	r21
    1228:	4f 91       	pop	r20
    122a:	3f 91       	pop	r19
    122c:	2f 91       	pop	r18
    122e:	0f 90       	pop	r0
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	0f 90       	pop	r0
    1234:	1f 90       	pop	r1
    1236:	18 95       	reti

00001238 <__vector_2>:

ISR(INT1_vect){
    1238:	1f 92       	push	r1
    123a:	0f 92       	push	r0
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	0f 92       	push	r0
    1240:	11 24       	eor	r1, r1
    1242:	2f 93       	push	r18
    1244:	3f 93       	push	r19
    1246:	4f 93       	push	r20
    1248:	5f 93       	push	r21
    124a:	6f 93       	push	r22
    124c:	7f 93       	push	r23
    124e:	8f 93       	push	r24
    1250:	9f 93       	push	r25
    1252:	af 93       	push	r26
    1254:	bf 93       	push	r27
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
	wakeUp();
    125a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1264:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    1268:	ff 91       	pop	r31
    126a:	ef 91       	pop	r30
    126c:	bf 91       	pop	r27
    126e:	af 91       	pop	r26
    1270:	9f 91       	pop	r25
    1272:	8f 91       	pop	r24
    1274:	7f 91       	pop	r23
    1276:	6f 91       	pop	r22
    1278:	5f 91       	pop	r21
    127a:	4f 91       	pop	r20
    127c:	3f 91       	pop	r19
    127e:	2f 91       	pop	r18
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	0f 90       	pop	r0
    1286:	1f 90       	pop	r1
    1288:	18 95       	reti

0000128a <__vector_3>:

ISR(PCINT0_vect){
    128a:	1f 92       	push	r1
    128c:	0f 92       	push	r0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	0f 92       	push	r0
    1292:	11 24       	eor	r1, r1
    1294:	2f 93       	push	r18
    1296:	3f 93       	push	r19
    1298:	4f 93       	push	r20
    129a:	5f 93       	push	r21
    129c:	6f 93       	push	r22
    129e:	7f 93       	push	r23
    12a0:	8f 93       	push	r24
    12a2:	9f 93       	push	r25
    12a4:	af 93       	push	r26
    12a6:	bf 93       	push	r27
    12a8:	ef 93       	push	r30
    12aa:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_B);
	Switch.PinBuffer[0] = PINB;
    12ac:	83 b1       	in	r24, 0x03	; 3
    12ae:	ec e0       	ldi	r30, 0x0C	; 12
    12b0:	f2 e0       	ldi	r31, 0x02	; 2
    12b2:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    12b4:	86 b1       	in	r24, 0x06	; 6
    12b6:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    12b8:	89 b1       	in	r24, 0x09	; 9
    12ba:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    12bc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    12c6:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    12ca:	ff 91       	pop	r31
    12cc:	ef 91       	pop	r30
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_4>:

ISR(PCINT1_vect){
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_C);
	Switch.PinBuffer[0] = PINB;
    130e:	83 b1       	in	r24, 0x03	; 3
    1310:	ec e0       	ldi	r30, 0x0C	; 12
    1312:	f2 e0       	ldi	r31, 0x02	; 2
    1314:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    1316:	86 b1       	in	r24, 0x06	; 6
    1318:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    131a:	89 b1       	in	r24, 0x09	; 9
    131c:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    131e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1328:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
	Switch.pinStateChanged();
}
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	bf 91       	pop	r27
    1332:	af 91       	pop	r26
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	7f 91       	pop	r23
    133a:	6f 91       	pop	r22
    133c:	5f 91       	pop	r21
    133e:	4f 91       	pop	r20
    1340:	3f 91       	pop	r19
    1342:	2f 91       	pop	r18
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <__vector_5>:

ISR(PCINT2_vect){
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	2f 93       	push	r18
    135a:	3f 93       	push	r19
    135c:	4f 93       	push	r20
    135e:	5f 93       	push	r21
    1360:	6f 93       	push	r22
    1362:	7f 93       	push	r23
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25
    1368:	af 93       	push	r26
    136a:	bf 93       	push	r27
    136c:	ef 93       	push	r30
    136e:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_D);
	Switch.PinBuffer[0] = PINB;
    1370:	83 b1       	in	r24, 0x03	; 3
    1372:	ec e0       	ldi	r30, 0x0C	; 12
    1374:	f2 e0       	ldi	r31, 0x02	; 2
    1376:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    1378:	86 b1       	in	r24, 0x06	; 6
    137a:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    137c:	89 b1       	in	r24, 0x09	; 9
    137e:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1380:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    138a:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    138e:	ff 91       	pop	r31
    1390:	ef 91       	pop	r30
    1392:	bf 91       	pop	r27
    1394:	af 91       	pop	r26
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	7f 91       	pop	r23
    139c:	6f 91       	pop	r22
    139e:	5f 91       	pop	r21
    13a0:	4f 91       	pop	r20
    13a2:	3f 91       	pop	r19
    13a4:	2f 91       	pop	r18
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <_ZN10TimerClass5beginEv>:
}


uint64_t TimerClass::millis(){
	return Time;
}
    13b0:	60 e4       	ldi	r22, 0x40	; 64
    13b2:	7f e1       	ldi	r23, 0x1F	; 31
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z11Init_CTC_T1hj>
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <_ZN10TimerClass1iE>
    13c0:	08 95       	ret

000013c2 <_ZN10TimerClass15initializeTimerEv>:
    13c2:	dc 01       	movw	r26, r24
    13c4:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <_ZN10TimerClass1iE>
    13c8:	e9 2f       	mov	r30, r25
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	ee 0f       	add	r30, r30
    13ce:	ff 1f       	adc	r31, r31
    13d0:	ea 5d       	subi	r30, 0xDA	; 218
    13d2:	fd 4f       	sbci	r31, 0xFD	; 253
    13d4:	b1 83       	std	Z+1, r27	; 0x01
    13d6:	a0 83       	st	Z, r26
    13d8:	15 96       	adiw	r26, 0x05	; 5
    13da:	9c 93       	st	X, r25
    13dc:	9f 5f       	subi	r25, 0xFF	; 255
    13de:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_ZN10TimerClass1iE>
    13e2:	08 95       	ret

000013e4 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>:
    13e4:	fc 01       	movw	r30, r24
    13e6:	71 83       	std	Z+1, r23	; 0x01
    13e8:	60 83       	st	Z, r22
    13ea:	73 83       	std	Z+3, r23	; 0x03
    13ec:	62 83       	std	Z+2, r22	; 0x02
    13ee:	35 87       	std	Z+13, r19	; 0x0d
    13f0:	24 87       	std	Z+12, r18	; 0x0c
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	83 87       	std	Z+11, r24	; 0x0b
    13f6:	44 83       	std	Z+4, r20	; 0x04
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    13fe:	08 95       	ret

00001400 <_ZN10TimerClass18resetCallbackTimerEv>:
    1400:	fc 01       	movw	r30, r24
    1402:	13 86       	std	Z+11, r1	; 0x0b
    1404:	11 82       	std	Z+1, r1	; 0x01
    1406:	10 82       	st	Z, r1
    1408:	08 95       	ret

0000140a <_ZN10TimerClass15getCallBackTimeEv>:
    140a:	fc 01       	movw	r30, r24
    140c:	82 81       	ldd	r24, Z+2	; 0x02
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	20 81       	ld	r18, Z
    1412:	31 81       	ldd	r19, Z+1	; 0x01
    1414:	82 1b       	sub	r24, r18
    1416:	93 0b       	sbc	r25, r19
    1418:	08 95       	ret

0000141a <_ZN10TimerClass7setTimeEj>:
    141a:	fc 01       	movw	r30, r24
    141c:	77 83       	std	Z+7, r23	; 0x07
    141e:	66 83       	std	Z+6, r22	; 0x06
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	82 87       	std	Z+10, r24	; 0x0a
    1424:	71 87       	std	Z+9, r23	; 0x09
    1426:	60 87       	std	Z+8, r22	; 0x08
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    142e:	08 95       	ret

00001430 <_ZN10TimerClass7getTimeEv>:
    1430:	fc 01       	movw	r30, r24
    1432:	80 85       	ldd	r24, Z+8	; 0x08
    1434:	91 85       	ldd	r25, Z+9	; 0x09
    1436:	26 81       	ldd	r18, Z+6	; 0x06
    1438:	37 81       	ldd	r19, Z+7	; 0x07
    143a:	82 1b       	sub	r24, r18
    143c:	93 0b       	sbc	r25, r19
    143e:	08 95       	ret

00001440 <_ZN10TimerClass10resetTimerEv>:
    1440:	fc 01       	movw	r30, r24
    1442:	17 82       	std	Z+7, r1	; 0x07
    1444:	16 82       	std	Z+6, r1	; 0x06
    1446:	12 86       	std	Z+10, r1	; 0x0a
    1448:	08 95       	ret

0000144a <_ZN10TimerClass11milliPassedEv>:

void TimerClass::milliPassed(){
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	ec 01       	movw	r28, r24
	if(Count_EN){
    1450:	8b 85       	ldd	r24, Y+11	; 0x0b
    1452:	88 23       	and	r24, r24
    1454:	e1 f0       	breq	.+56     	; 0x148e <_ZN10TimerClass11milliPassedEv+0x44>
		#ifdef DEBUG_TIMER
		//printChar('T');
		#endif
		if(Count)
    1456:	88 81       	ld	r24, Y
    1458:	99 81       	ldd	r25, Y+1	; 0x01
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	29 f0       	breq	.+10     	; 0x1468 <_ZN10TimerClass11milliPassedEv+0x1e>
		Count -= 1;
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	99 83       	std	Y+1, r25	; 0x01
    1462:	88 83       	st	Y, r24
		if(!Count){
    1464:	89 2b       	or	r24, r25
    1466:	99 f4       	brne	.+38     	; 0x148e <_ZN10TimerClass11milliPassedEv+0x44>
			if(Mode == TIMER_MODE_REPEAT){
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	29 f4       	brne	.+10     	; 0x1478 <_ZN10TimerClass11milliPassedEv+0x2e>
				Count = Count_Save;
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	9b 81       	ldd	r25, Y+3	; 0x03
    1472:	99 83       	std	Y+1, r25	; 0x01
    1474:	88 83       	st	Y, r24
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <_ZN10TimerClass11milliPassedEv+0x38>
			}
			if(Mode == TIMER_MODE_ONCE){
    1478:	81 11       	cpse	r24, r1
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <_ZN10TimerClass11milliPassedEv+0x38>
				Count_EN = 0;
    147c:	1b 86       	std	Y+11, r1	; 0x0b
				Count = 0;
    147e:	19 82       	std	Y+1, r1	; 0x01
    1480:	18 82       	st	Y, r1
			}
			if(CallBackPtr != NULL){
    1482:	ec 85       	ldd	r30, Y+12	; 0x0c
    1484:	fd 85       	ldd	r31, Y+13	; 0x0d
    1486:	30 97       	sbiw	r30, 0x00	; 0
    1488:	11 f0       	breq	.+4      	; 0x148e <_ZN10TimerClass11milliPassedEv+0x44>
				#ifdef DEBUG_TIMER
				printStringCRNL("Timer Done : ");
				printNumber(Timer_ID);
				#endif
				//allowSleep(1);
				CallBackPtr(Timer_ID);
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	09 95       	icall
			}
		}
	}
	if(NCount_EN){
    148e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1490:	88 23       	and	r24, r24
    1492:	51 f0       	breq	.+20     	; 0x14a8 <_ZN10TimerClass11milliPassedEv+0x5e>
		if(NCount)
    1494:	8e 81       	ldd	r24, Y+6	; 0x06
    1496:	9f 81       	ldd	r25, Y+7	; 0x07
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	29 f0       	breq	.+10     	; 0x14a6 <_ZN10TimerClass11milliPassedEv+0x5c>
		NCount -= 1;
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	9f 83       	std	Y+7, r25	; 0x07
    14a0:	8e 83       	std	Y+6, r24	; 0x06
		if(!NCount){
    14a2:	89 2b       	or	r24, r25
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <_ZN10TimerClass11milliPassedEv+0x5e>
			NCount_EN = 0;
    14a6:	1a 86       	std	Y+10, r1	; 0x0a
		}
	}
}
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <_ZN10TimerClass19callAllTimerObjectsEv>:

void TimerClass::callAllTimerObjects(){
    14ae:	cf 93       	push	r28
	for(uint8_t a = 0; a < i; a += 1){
    14b0:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <_ZN10TimerClass1iE>
    14b4:	88 23       	and	r24, r24
    14b6:	91 f0       	breq	.+36     	; 0x14dc <_ZN10TimerClass19callAllTimerObjectsEv+0x2e>
    14b8:	c0 e0       	ldi	r28, 0x00	; 0
		if(Timers[a] != NULL)
    14ba:	ec 2f       	mov	r30, r28
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	ee 0f       	add	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	ea 5d       	subi	r30, 0xDA	; 218
    14c4:	fd 4f       	sbci	r31, 0xFD	; 253
    14c6:	80 81       	ld	r24, Z
    14c8:	91 81       	ldd	r25, Z+1	; 0x01
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	11 f0       	breq	.+4      	; 0x14d2 <_ZN10TimerClass19callAllTimerObjectsEv+0x24>
		Timers[a]->milliPassed();
    14ce:	0e 94 25 0a 	call	0x144a	; 0x144a <_ZN10TimerClass11milliPassedEv>
		}
	}
}

void TimerClass::callAllTimerObjects(){
	for(uint8_t a = 0; a < i; a += 1){
    14d2:	cf 5f       	subi	r28, 0xFF	; 255
    14d4:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <_ZN10TimerClass1iE>
    14d8:	c8 17       	cp	r28, r24
    14da:	78 f3       	brcs	.-34     	; 0x14ba <_ZN10TimerClass19callAllTimerObjectsEv+0xc>
		if(Timers[a] != NULL)
		Timers[a]->milliPassed();
	}
}
    14dc:	cf 91       	pop	r28
    14de:	08 95       	ret

000014e0 <_ZN10TimerClass10getTimerIDEv>:

uint8_t TimerClass::getTimerID(){
	return Timer_ID;
}
    14e0:	fc 01       	movw	r30, r24
    14e2:	85 81       	ldd	r24, Z+5	; 0x05
    14e4:	08 95       	ret

000014e6 <__vector_11>:



ISR(TIMER1_COMPA_vect){
    14e6:	1f 92       	push	r1
    14e8:	0f 92       	push	r0
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	0f 92       	push	r0
    14ee:	11 24       	eor	r1, r1
    14f0:	2f 93       	push	r18
    14f2:	3f 93       	push	r19
    14f4:	4f 93       	push	r20
    14f6:	5f 93       	push	r21
    14f8:	6f 93       	push	r22
    14fa:	7f 93       	push	r23
    14fc:	8f 93       	push	r24
    14fe:	9f 93       	push	r25
    1500:	af 93       	push	r26
    1502:	bf 93       	push	r27
    1504:	ef 93       	push	r30
    1506:	ff 93       	push	r31
	//printChar('I');
	milliHappened();
    1508:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z13milliHappenedv>
	Timer.Time += 1;
    150c:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <_ZN10TimerClass4TimeE>
    1510:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <_ZN10TimerClass4TimeE+0x1>
    1514:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <_ZN10TimerClass4TimeE+0x2>
    1518:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <_ZN10TimerClass4TimeE+0x3>
    151c:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <_ZN10TimerClass4TimeE+0x4>
    1520:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <_ZN10TimerClass4TimeE+0x5>
    1524:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <_ZN10TimerClass4TimeE+0x6>
    1528:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <_ZN10TimerClass4TimeE+0x7>
    152c:	a1 e0       	ldi	r26, 0x01	; 1
    152e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__adddi3_s8>
    1532:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <_ZN10TimerClass4TimeE>
    1536:	30 93 1f 02 	sts	0x021F, r19	; 0x80021f <_ZN10TimerClass4TimeE+0x1>
    153a:	40 93 20 02 	sts	0x0220, r20	; 0x800220 <_ZN10TimerClass4TimeE+0x2>
    153e:	50 93 21 02 	sts	0x0221, r21	; 0x800221 <_ZN10TimerClass4TimeE+0x3>
    1542:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <_ZN10TimerClass4TimeE+0x4>
    1546:	70 93 23 02 	sts	0x0223, r23	; 0x800223 <_ZN10TimerClass4TimeE+0x5>
    154a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_ZN10TimerClass4TimeE+0x6>
    154e:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <_ZN10TimerClass4TimeE+0x7>
	Timer.callAllTimerObjects();
    1552:	0e 94 57 0a 	call	0x14ae	; 0x14ae <_ZN10TimerClass19callAllTimerObjectsEv>
	//printChar('O');
}
    1556:	ff 91       	pop	r31
    1558:	ef 91       	pop	r30
    155a:	bf 91       	pop	r27
    155c:	af 91       	pop	r26
    155e:	9f 91       	pop	r25
    1560:	8f 91       	pop	r24
    1562:	7f 91       	pop	r23
    1564:	6f 91       	pop	r22
    1566:	5f 91       	pop	r21
    1568:	4f 91       	pop	r20
    156a:	3f 91       	pop	r19
    156c:	2f 91       	pop	r18
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	0f 90       	pop	r0
    1574:	1f 90       	pop	r1
    1576:	18 95       	reti

00001578 <_Z13switchPressedh>:
void portStateChange(uint8_t PortNo){
	printStringCRNL("Pin state changed");
	if(PortNo == PORT_C){
		setPinState(PORT_C, 2, getPinState(PORT_C, 0));
	}
}
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <SwitchPressedFlag>
    157e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <SwitchID>
    1582:	08 95       	ret

00001584 <_Z9timerDoneh>:
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <TimeOut>
    158a:	5a 98       	cbi	0x0b, 2	; 11
    158c:	08 95       	ret

0000158e <_Z8runSetupv>:

void runSetup(){
	
	USART_Init(MYUBRR);
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z10USART_Initj>
	Init_CTC_T1(2,1000);
    1596:	68 ee       	ldi	r22, 0xE8	; 232
    1598:	73 e0       	ldi	r23, 0x03	; 3
    159a:	82 e0       	ldi	r24, 0x02	; 2
    159c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z11Init_CTC_T1hj>
	SPI_MasterInit();
    15a0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z14SPI_MasterInitv>
	setPinDirection(PORT_D, 2, 1);
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	62 e0       	ldi	r22, 0x02	; 2
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	0e 94 49 01 	call	0x292	; 0x292 <_Z15setPinDirectionhhb>
    15ae:	08 95       	ret

000015b0 <main>:
volatile uint8_t SPIdata, SwitchID;
volatile bool SwitchPressedFlag, TimeOut;
uint8_t Socket, State;
TimerClass Timer1;
int main(void)
{
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	cd 51       	subi	r28, 0x1D	; 29
    15ba:	d1 40       	sbci	r29, 0x01	; 1
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
	runSetup();
    15c6:	0e 94 c7 0a 	call	0x158e	; 0x158e <_Z8runSetupv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15ca:	2f ef       	ldi	r18, 0xFF	; 255
    15cc:	84 e3       	ldi	r24, 0x34	; 52
    15ce:	9c e0       	ldi	r25, 0x0C	; 12
    15d0:	21 50       	subi	r18, 0x01	; 1
    15d2:	80 40       	sbci	r24, 0x00	; 0
    15d4:	90 40       	sbci	r25, 0x00	; 0
    15d6:	e1 f7       	brne	.-8      	; 0x15d0 <main+0x20>
    15d8:	00 c0       	rjmp	.+0      	; 0x15da <main+0x2a>
    15da:	00 00       	nop
	_delay_ms(500);
	Notify(PSTR("Powering on..."));
    15dc:	8d e4       	ldi	r24, 0x4D	; 77
    15de:	91 e0       	ldi	r25, 0x01	; 1
    15e0:	0e 94 01 03 	call	0x602	; 0x602 <_Z6NotifyPKc>
	sei();
    15e4:	78 94       	sei
	TimeOut = false;
    15e6:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <TimeOut>
	NRF24L01 Radio(1,1,0);
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	ce 01       	movw	r24, r28
    15f2:	8b 5e       	subi	r24, 0xEB	; 235
    15f4:	9e 4f       	sbci	r25, 0xFE	; 254
    15f6:	0e 94 ab 06 	call	0xd56	; 0xd56 <_ZN8NRF24L01C1Ehhb>
	SwitchClass S1, S2, S3, S4, S5, S6;
	Timer1.begin();
    15fa:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN10TimerClass5beginEv>
	S1.begin();
    15fe:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN11SwitchClass5beginEv>
	S1.initializeSwitch(PORT_B, 1, &S1);
    1602:	9e 01       	movw	r18, r28
    1604:	29 51       	subi	r18, 0x19	; 25
    1606:	3f 4f       	sbci	r19, 0xFF	; 255
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	c9 01       	movw	r24, r18
    160e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S2.initializeSwitch(PORT_B, 0, &S2);
    1612:	9e 01       	movw	r18, r28
    1614:	27 54       	subi	r18, 0x47	; 71
    1616:	3f 4f       	sbci	r19, 0xFF	; 255
    1618:	40 e0       	ldi	r20, 0x00	; 0
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	c9 01       	movw	r24, r18
    161e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S3.initializeSwitch(PORT_B, 6, &S3);
    1622:	9e 01       	movw	r18, r28
    1624:	25 57       	subi	r18, 0x75	; 117
    1626:	3f 4f       	sbci	r19, 0xFF	; 255
    1628:	46 e0       	ldi	r20, 0x06	; 6
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	c9 01       	movw	r24, r18
    162e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S4.initializeSwitch(PORT_B, 7, &S4);
    1632:	9e 01       	movw	r18, r28
    1634:	23 5a       	subi	r18, 0xA3	; 163
    1636:	3f 4f       	sbci	r19, 0xFF	; 255
    1638:	47 e0       	ldi	r20, 0x07	; 7
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	c9 01       	movw	r24, r18
    163e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S5.initializeSwitch(PORT_D, 6, &S5);
    1642:	9e 01       	movw	r18, r28
    1644:	21 5d       	subi	r18, 0xD1	; 209
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	46 e0       	ldi	r20, 0x06	; 6
    164a:	62 e0       	ldi	r22, 0x02	; 2
    164c:	c9 01       	movw	r24, r18
    164e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S6.initializeSwitch(PORT_D, 7, &S6);
    1652:	9e 01       	movw	r18, r28
    1654:	2f 5f       	subi	r18, 0xFF	; 255
    1656:	3f 4f       	sbci	r19, 0xFF	; 255
    1658:	47 e0       	ldi	r20, 0x07	; 7
    165a:	62 e0       	ldi	r22, 0x02	; 2
    165c:	c9 01       	movw	r24, r18
    165e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S1.shortPress(switchPressed);
    1662:	6c eb       	ldi	r22, 0xBC	; 188
    1664:	7a e0       	ldi	r23, 0x0A	; 10
    1666:	ce 01       	movw	r24, r28
    1668:	89 51       	subi	r24, 0x19	; 25
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN11SwitchClass10shortPressEPFvhE>
	S1.enableSamePtrMode(true);
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN11SwitchClass17enableSamePtrModeEb>
	Timer1.initializeTimer();
    1676:	82 e6       	ldi	r24, 0x62	; 98
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <_ZN10TimerClass15initializeTimerEv>
	Timer1.setCallBackTime(100, 0, timerDone);
    167e:	22 ec       	ldi	r18, 0xC2	; 194
    1680:	3a e0       	ldi	r19, 0x0A	; 10
    1682:	40 e0       	ldi	r20, 0x00	; 0
    1684:	64 e6       	ldi	r22, 0x64	; 100
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	82 e6       	ldi	r24, 0x62	; 98
    168a:	92 e0       	ldi	r25, 0x02	; 2
    168c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
	Notify(PSTR("Done"));
    1690:	88 e4       	ldi	r24, 0x48	; 72
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	0e 94 01 03 	call	0x602	; 0x602 <_Z6NotifyPKc>
	allowSleep(true);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
	while (1)
	{	
		if(SwitchPressedFlag){
    169e:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <SwitchPressedFlag>
    16a2:	88 23       	and	r24, r24
    16a4:	e1 f3       	breq	.-8      	; 0x169e <main+0xee>
			SwitchPressedFlag = false;
    16a6:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <SwitchPressedFlag>
			if(Radio.isTXFull())
    16aa:	ce 01       	movw	r24, r28
    16ac:	8b 5e       	subi	r24, 0xEB	; 235
    16ae:	9e 4f       	sbci	r25, 0xFE	; 254
    16b0:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN8NRF24L018isTXFullEv>
    16b4:	88 23       	and	r24, r24
    16b6:	29 f0       	breq	.+10     	; 0x16c2 <main+0x112>
			Radio.flushTX();
    16b8:	ce 01       	movw	r24, r28
    16ba:	8b 5e       	subi	r24, 0xEB	; 235
    16bc:	9e 4f       	sbci	r25, 0xFE	; 254
    16be:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_ZN8NRF24L017flushTXEv>
			if(Radio.isTX_DS_Set())
    16c2:	ce 01       	movw	r24, r28
    16c4:	8b 5e       	subi	r24, 0xEB	; 235
    16c6:	9e 4f       	sbci	r25, 0xFE	; 254
    16c8:	0e 94 32 04 	call	0x864	; 0x864 <_ZN8NRF24L0111isTX_DS_SetEv>
    16cc:	88 23       	and	r24, r24
    16ce:	29 f0       	breq	.+10     	; 0x16da <main+0x12a>
			Radio.clearTX_DS();
    16d0:	ce 01       	movw	r24, r28
    16d2:	8b 5e       	subi	r24, 0xEB	; 235
    16d4:	9e 4f       	sbci	r25, 0xFE	; 254
    16d6:	0e 94 85 05 	call	0xb0a	; 0xb0a <_ZN8NRF24L0110clearTX_DSEv>
			#ifdef STATS
			printStringCRNL("Switch Pressed: ");
    16da:	8f e6       	ldi	r24, 0x6F	; 111
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	0e 94 1a 03 	call	0x634	; 0x634 <_Z15printStringCRNLPKc>
			#endif
			printNumber(SwitchID);
    16e2:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <SwitchID>
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z11printNumbery>
			Radio.fastTransferPayload(SwitchID);
    16f8:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <SwitchID>
    16fc:	ce 01       	movw	r24, r28
    16fe:	8b 5e       	subi	r24, 0xEB	; 235
    1700:	9e 4f       	sbci	r25, 0xFE	; 254
    1702:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN8NRF24L0119fastTransferPayloadEh>
			Timer1.setCallBackTime(25, 0, timerDone);
    1706:	22 ec       	ldi	r18, 0xC2	; 194
    1708:	3a e0       	ldi	r19, 0x0A	; 10
    170a:	40 e0       	ldi	r20, 0x00	; 0
    170c:	69 e1       	ldi	r22, 0x19	; 25
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	82 e6       	ldi	r24, 0x62	; 98
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
			while(!TimeOut && !Radio.isTX_DS_Set()){
    1718:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <TimeOut>
    171c:	81 11       	cpse	r24, r1
    171e:	07 c0       	rjmp	.+14     	; 0x172e <main+0x17e>
    1720:	ce 01       	movw	r24, r28
    1722:	8b 5e       	subi	r24, 0xEB	; 235
    1724:	9e 4f       	sbci	r25, 0xFE	; 254
    1726:	0e 94 32 04 	call	0x864	; 0x864 <_ZN8NRF24L0111isTX_DS_SetEv>
    172a:	88 23       	and	r24, r24
    172c:	a9 f3       	breq	.-22     	; 0x1718 <main+0x168>
				
			}
			if(TimeOut){
    172e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <TimeOut>
    1732:	88 23       	and	r24, r24
    1734:	19 f0       	breq	.+6      	; 0x173c <main+0x18c>
				TimeOut = false;
    1736:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <TimeOut>
    173a:	13 c0       	rjmp	.+38     	; 0x1762 <main+0x1b2>
			}
			else{
				LED = 1;
    173c:	5a 9a       	sbi	0x0b, 2	; 11
				Timer1.setCallBackTime(200, 0, timerDone);
    173e:	22 ec       	ldi	r18, 0xC2	; 194
    1740:	3a e0       	ldi	r19, 0x0A	; 10
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	68 ec       	ldi	r22, 0xC8	; 200
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	82 e6       	ldi	r24, 0x62	; 98
    174a:	92 e0       	ldi	r25, 0x02	; 2
    174c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
				printStringCRNL("Payload transmitted.");
    1750:	80 e8       	ldi	r24, 0x80	; 128
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	0e 94 1a 03 	call	0x634	; 0x634 <_Z15printStringCRNLPKc>
				Radio.clearTX_DS();
    1758:	ce 01       	movw	r24, r28
    175a:	8b 5e       	subi	r24, 0xEB	; 235
    175c:	9e 4f       	sbci	r25, 0xFE	; 254
    175e:	0e 94 85 05 	call	0xb0a	; 0xb0a <_ZN8NRF24L0110clearTX_DSEv>
			}
			#ifdef STATS
			Radio.printInfo();
    1762:	ce 01       	movw	r24, r28
    1764:	8b 5e       	subi	r24, 0xEB	; 235
    1766:	9e 4f       	sbci	r25, 0xFE	; 254
    1768:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN8NRF24L019printInfoEv>
			#endif
			if(sleepAllowed()){
    176c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z12sleepAllowedv>
    1770:	88 23       	and	r24, r24
    1772:	09 f4       	brne	.+2      	; 0x1776 <main+0x1c6>
    1774:	94 cf       	rjmp	.-216    	; 0x169e <main+0xee>
				set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1776:	83 b7       	in	r24, 0x33	; 51
    1778:	81 7f       	andi	r24, 0xF1	; 241
    177a:	84 60       	ori	r24, 0x04	; 4
    177c:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
    177e:	83 b7       	in	r24, 0x33	; 51
    1780:	81 60       	ori	r24, 0x01	; 1
    1782:	83 bf       	out	0x33, r24	; 51
				sei();
    1784:	78 94       	sei
				getReadyToSleep();
    1786:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z15getReadyToSleepv>
				#ifdef STATS
				printStringCRNL("Sleeping...");
    178a:	85 e9       	ldi	r24, 0x95	; 149
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	0e 94 1a 03 	call	0x634	; 0x634 <_Z15printStringCRNLPKc>
				#endif
				//FLASH = 0;
				sleep_mode();
    1792:	83 b7       	in	r24, 0x33	; 51
    1794:	81 60       	ori	r24, 0x01	; 1
    1796:	83 bf       	out	0x33, r24	; 51
    1798:	88 95       	sleep
    179a:	83 b7       	in	r24, 0x33	; 51
    179c:	8e 7f       	andi	r24, 0xFE	; 254
    179e:	83 bf       	out	0x33, r24	; 51
    17a0:	7e cf       	rjmp	.-260    	; 0x169e <main+0xee>

000017a2 <__umoddi3>:
    17a2:	68 94       	set
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <__udivdi3_umoddi3>

000017a6 <__udivdi3>:
    17a6:	e8 94       	clt

000017a8 <__udivdi3_umoddi3>:
    17a8:	8f 92       	push	r8
    17aa:	9f 92       	push	r9
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	0e 94 df 0b 	call	0x17be	; 0x17be <__udivmod64>
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	9f 90       	pop	r9
    17ba:	8f 90       	pop	r8
    17bc:	08 95       	ret

000017be <__udivmod64>:
    17be:	88 24       	eor	r8, r8
    17c0:	99 24       	eor	r9, r9
    17c2:	f4 01       	movw	r30, r8
    17c4:	e4 01       	movw	r28, r8
    17c6:	b0 e4       	ldi	r27, 0x40	; 64
    17c8:	9f 93       	push	r25
    17ca:	aa 27       	eor	r26, r26
    17cc:	9a 15       	cp	r25, r10
    17ce:	8b 04       	cpc	r8, r11
    17d0:	9c 04       	cpc	r9, r12
    17d2:	ed 05       	cpc	r30, r13
    17d4:	fe 05       	cpc	r31, r14
    17d6:	cf 05       	cpc	r28, r15
    17d8:	d0 07       	cpc	r29, r16
    17da:	a1 07       	cpc	r26, r17
    17dc:	98 f4       	brcc	.+38     	; 0x1804 <__udivmod64+0x46>
    17de:	ad 2f       	mov	r26, r29
    17e0:	dc 2f       	mov	r29, r28
    17e2:	cf 2f       	mov	r28, r31
    17e4:	fe 2f       	mov	r31, r30
    17e6:	e9 2d       	mov	r30, r9
    17e8:	98 2c       	mov	r9, r8
    17ea:	89 2e       	mov	r8, r25
    17ec:	98 2f       	mov	r25, r24
    17ee:	87 2f       	mov	r24, r23
    17f0:	76 2f       	mov	r23, r22
    17f2:	65 2f       	mov	r22, r21
    17f4:	54 2f       	mov	r21, r20
    17f6:	43 2f       	mov	r20, r19
    17f8:	32 2f       	mov	r19, r18
    17fa:	22 27       	eor	r18, r18
    17fc:	b8 50       	subi	r27, 0x08	; 8
    17fe:	31 f7       	brne	.-52     	; 0x17cc <__udivmod64+0xe>
    1800:	bf 91       	pop	r27
    1802:	27 c0       	rjmp	.+78     	; 0x1852 <__udivmod64+0x94>
    1804:	1b 2e       	mov	r1, r27
    1806:	bf 91       	pop	r27
    1808:	bb 27       	eor	r27, r27
    180a:	22 0f       	add	r18, r18
    180c:	33 1f       	adc	r19, r19
    180e:	44 1f       	adc	r20, r20
    1810:	55 1f       	adc	r21, r21
    1812:	66 1f       	adc	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	88 1f       	adc	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	88 1c       	adc	r8, r8
    181c:	99 1c       	adc	r9, r9
    181e:	ee 1f       	adc	r30, r30
    1820:	ff 1f       	adc	r31, r31
    1822:	cc 1f       	adc	r28, r28
    1824:	dd 1f       	adc	r29, r29
    1826:	aa 1f       	adc	r26, r26
    1828:	bb 1f       	adc	r27, r27
    182a:	8a 14       	cp	r8, r10
    182c:	9b 04       	cpc	r9, r11
    182e:	ec 05       	cpc	r30, r12
    1830:	fd 05       	cpc	r31, r13
    1832:	ce 05       	cpc	r28, r14
    1834:	df 05       	cpc	r29, r15
    1836:	a0 07       	cpc	r26, r16
    1838:	b1 07       	cpc	r27, r17
    183a:	48 f0       	brcs	.+18     	; 0x184e <__udivmod64+0x90>
    183c:	8a 18       	sub	r8, r10
    183e:	9b 08       	sbc	r9, r11
    1840:	ec 09       	sbc	r30, r12
    1842:	fd 09       	sbc	r31, r13
    1844:	ce 09       	sbc	r28, r14
    1846:	df 09       	sbc	r29, r15
    1848:	a0 0b       	sbc	r26, r16
    184a:	b1 0b       	sbc	r27, r17
    184c:	21 60       	ori	r18, 0x01	; 1
    184e:	1a 94       	dec	r1
    1850:	e1 f6       	brne	.-72     	; 0x180a <__udivmod64+0x4c>
    1852:	2e f4       	brtc	.+10     	; 0x185e <__udivmod64+0xa0>
    1854:	94 01       	movw	r18, r8
    1856:	af 01       	movw	r20, r30
    1858:	be 01       	movw	r22, r28
    185a:	cd 01       	movw	r24, r26
    185c:	00 0c       	add	r0, r0
    185e:	08 95       	ret

00001860 <__ashldi3>:
    1860:	0f 93       	push	r16
    1862:	08 30       	cpi	r16, 0x08	; 8
    1864:	90 f0       	brcs	.+36     	; 0x188a <__ashldi3+0x2a>
    1866:	98 2f       	mov	r25, r24
    1868:	87 2f       	mov	r24, r23
    186a:	76 2f       	mov	r23, r22
    186c:	65 2f       	mov	r22, r21
    186e:	54 2f       	mov	r21, r20
    1870:	43 2f       	mov	r20, r19
    1872:	32 2f       	mov	r19, r18
    1874:	22 27       	eor	r18, r18
    1876:	08 50       	subi	r16, 0x08	; 8
    1878:	f4 cf       	rjmp	.-24     	; 0x1862 <__ashldi3+0x2>
    187a:	22 0f       	add	r18, r18
    187c:	33 1f       	adc	r19, r19
    187e:	44 1f       	adc	r20, r20
    1880:	55 1f       	adc	r21, r21
    1882:	66 1f       	adc	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	88 1f       	adc	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 95       	dec	r16
    188c:	b2 f7       	brpl	.-20     	; 0x187a <__ashldi3+0x1a>
    188e:	0f 91       	pop	r16
    1890:	08 95       	ret

00001892 <__ashrdi3>:
    1892:	97 fb       	bst	r25, 7
    1894:	10 f8       	bld	r1, 0

00001896 <__lshrdi3>:
    1896:	16 94       	lsr	r1
    1898:	00 08       	sbc	r0, r0
    189a:	0f 93       	push	r16
    189c:	08 30       	cpi	r16, 0x08	; 8
    189e:	98 f0       	brcs	.+38     	; 0x18c6 <__lshrdi3+0x30>
    18a0:	08 50       	subi	r16, 0x08	; 8
    18a2:	23 2f       	mov	r18, r19
    18a4:	34 2f       	mov	r19, r20
    18a6:	45 2f       	mov	r20, r21
    18a8:	56 2f       	mov	r21, r22
    18aa:	67 2f       	mov	r22, r23
    18ac:	78 2f       	mov	r23, r24
    18ae:	89 2f       	mov	r24, r25
    18b0:	90 2d       	mov	r25, r0
    18b2:	f4 cf       	rjmp	.-24     	; 0x189c <__lshrdi3+0x6>
    18b4:	05 94       	asr	r0
    18b6:	97 95       	ror	r25
    18b8:	87 95       	ror	r24
    18ba:	77 95       	ror	r23
    18bc:	67 95       	ror	r22
    18be:	57 95       	ror	r21
    18c0:	47 95       	ror	r20
    18c2:	37 95       	ror	r19
    18c4:	27 95       	ror	r18
    18c6:	0a 95       	dec	r16
    18c8:	aa f7       	brpl	.-22     	; 0x18b4 <__lshrdi3+0x1e>
    18ca:	0f 91       	pop	r16
    18cc:	08 95       	ret

000018ce <__adddi3_s8>:
    18ce:	00 24       	eor	r0, r0
    18d0:	a7 fd       	sbrc	r26, 7
    18d2:	00 94       	com	r0
    18d4:	2a 0f       	add	r18, r26
    18d6:	30 1d       	adc	r19, r0
    18d8:	40 1d       	adc	r20, r0
    18da:	50 1d       	adc	r21, r0
    18dc:	60 1d       	adc	r22, r0
    18de:	70 1d       	adc	r23, r0
    18e0:	80 1d       	adc	r24, r0
    18e2:	90 1d       	adc	r25, r0
    18e4:	08 95       	ret

000018e6 <__cmpdi2>:
    18e6:	2a 15       	cp	r18, r10
    18e8:	3b 05       	cpc	r19, r11
    18ea:	4c 05       	cpc	r20, r12
    18ec:	5d 05       	cpc	r21, r13
    18ee:	6e 05       	cpc	r22, r14
    18f0:	7f 05       	cpc	r23, r15
    18f2:	80 07       	cpc	r24, r16
    18f4:	91 07       	cpc	r25, r17
    18f6:	08 95       	ret

000018f8 <__cmpdi2_s8>:
    18f8:	00 24       	eor	r0, r0
    18fa:	a7 fd       	sbrc	r26, 7
    18fc:	00 94       	com	r0
    18fe:	2a 17       	cp	r18, r26
    1900:	30 05       	cpc	r19, r0
    1902:	40 05       	cpc	r20, r0
    1904:	50 05       	cpc	r21, r0
    1906:	60 05       	cpc	r22, r0
    1908:	70 05       	cpc	r23, r0
    190a:	80 05       	cpc	r24, r0
    190c:	90 05       	cpc	r25, r0
    190e:	08 95       	ret

00001910 <_exit>:
    1910:	f8 94       	cli

00001912 <__stop_program>:
    1912:	ff cf       	rjmp	.-2      	; 0x1912 <__stop_program>
