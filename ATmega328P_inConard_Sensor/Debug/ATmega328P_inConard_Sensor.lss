
ATmega328P_inConard_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  000019ce  00001a62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f3  008001ac  008001ac  00001b0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d40  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000166f  00000000  00000000  00008e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d75  00000000  00000000  0000a4cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012b8  00000000  00000000  0000d244  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023d7  00000000  00000000  0000e4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040b5  00000000  00000000  000108d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  00014988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__ctors_end>
       4:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__vector_1>
       8:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_2>
       c:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_3>
      10:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__vector_4>
      14:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_5>
      18:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_6>
      1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      2c:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_11>
      30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      44:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	49 6e       	ori	r20, 0xE9	; 233
      6a:	69 74       	andi	r22, 0x49	; 73
      6c:	69 61       	ori	r22, 0x19	; 25
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	7a 69       	ori	r23, 0x9A	; 154
      72:	6e 67       	ori	r22, 0x7E	; 126
      74:	20 73       	andi	r18, 0x30	; 48
      76:	75 63       	ori	r23, 0x35	; 53
      78:	63 65       	ori	r22, 0x53	; 83
      7a:	73 73       	andi	r23, 0x33	; 51
      7c:	66 75       	andi	r22, 0x56	; 86
      7e:	6c 2e       	mov	r6, r28
	...

00000081 <_ZZN8NRF24L017setModeEbE3__c_1>:
      81:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
      91:	61 69 6c 65 64 20 66 6f 72 20 6e 52 46 32 34 4c     ailed for nRF24L
      a1:	30 31 2e 20 43 68 65 63 6b 20 63 6f 6e 6e 65 63     01. Check connec
      b1:	74 69 6f 6e 73 00                                   tions.

000000b7 <_ZZN8NRF24L017setModeEbE3__c_0>:
      b7:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      c7:	31 20 69 6e 20 54 72 61 6e 73 6d 69 74 20 4d 6f     1 in Transmit Mo
      d7:	64 65 2e 2e 2e 00                                   de....

000000dd <_ZZN8NRF24L017setModeEbE3__c>:
      dd:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      ed:	31 20 69 6e 20 52 65 63 65 69 76 65 20 4d 6f 64     1 in Receive Mod
      fd:	65 2e 2e 2e 00                                      e....

00000102 <_ZZN8NRF24L0110initializeEvE3__c_0>:
     102:	4d 61 73 74 65 72 20 52 58 20 50 61 79 6c 6f 61     Master RX Payloa
     112:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     122:	3a 20 00                                            : .

00000125 <_ZZN8NRF24L0110initializeEvE3__c>:
     125:	4d 61 73 74 65 72 20 54 58 20 50 61 79 6c 6f 61     Master TX Payloa
     135:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     145:	3a 20 00                                            : .

00000148 <_ZZ4mainE3__c_0>:
     148:	44 6f 6e 65 00                                      Done.

0000014d <_ZZ4mainE3__c>:
     14d:	50 6f 77 65 72 69 6e 67 20 6f 6e 2e 2e 2e 00        Powering on....

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf ef       	ldi	r28, 0xFF	; 255
     162:	d8 e0       	ldi	r29, 0x08	; 8
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	11 e0       	ldi	r17, 0x01	; 1
     16a:	a0 e0       	ldi	r26, 0x00	; 0
     16c:	b1 e0       	ldi	r27, 0x01	; 1
     16e:	ee ec       	ldi	r30, 0xCE	; 206
     170:	f9 e1       	ldi	r31, 0x19	; 25
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	ac 3a       	cpi	r26, 0xAC	; 172
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	23 e0       	ldi	r18, 0x03	; 3
     180:	ac ea       	ldi	r26, 0xAC	; 172
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	af 39       	cpi	r26, 0x9F	; 159
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <main>
     192:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <_exit>

00000196 <__bad_interrupt>:
     196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019a <_Z15getReadyToSleepv>:
	MCUSR &= ~(1<<WDRF);
	/* Start timed sequence */
	WDTCR = (1<<WDCE) | (1<<WDE);
	/* Set new prescaler (time-out) value = 64K cycles (~0.5 s) */
	WDTCR = prescale;
	asm volatile("sei"::);
     19a:	8f ea       	ldi	r24, 0xAF	; 175
     19c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     1a0:	08 95       	ret

000001a2 <_Z6wakeUpv>:
     1a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     1a6:	08 95       	ret

000001a8 <_Z10allowSleepb>:
     1a8:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
     1ac:	08 95       	ret

000001ae <_Z12sleepAllowedv>:
     1ae:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
     1b2:	08 95       	ret

000001b4 <_Z14SPI_MasterInitv>:
     1b4:	24 98       	cbi	0x04, 4	; 4
     1b6:	84 b1       	in	r24, 0x04	; 4
     1b8:	8c 62       	ori	r24, 0x2C	; 44
     1ba:	84 b9       	out	0x04, r24	; 4
     1bc:	2a 9a       	sbi	0x05, 2	; 5
     1be:	8c b5       	in	r24, 0x2c	; 44
     1c0:	82 65       	ori	r24, 0x52	; 82
     1c2:	8c bd       	out	0x2c, r24	; 44
     1c4:	08 95       	ret

000001c6 <_Z18SPI_MasterTransmitc>:
     1c6:	8e bd       	out	0x2e, r24	; 46
     1c8:	0d b4       	in	r0, 0x2d	; 45
     1ca:	07 fe       	sbrs	r0, 7
     1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <_Z18SPI_MasterTransmitc+0x2>
     1ce:	8e b5       	in	r24, 0x2e	; 46
     1d0:	08 95       	ret

000001d2 <_Z11Init_CTC_T1hj>:
     1d2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1d6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     1da:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     1de:	87 70       	andi	r24, 0x07	; 7
     1e0:	88 60       	ori	r24, 0x08	; 8
     1e2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     1ec:	78 94       	sei
     1ee:	08 95       	ret

000001f0 <_Z11setPinStatehhb>:
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	e9 f0       	breq	.+58     	; 0x22e <_Z11setPinStatehhb+0x3e>
     1f4:	18 f0       	brcs	.+6      	; 0x1fc <_Z11setPinStatehhb+0xc>
     1f6:	82 30       	cpi	r24, 0x02	; 2
     1f8:	99 f1       	breq	.+102    	; 0x260 <_Z11setPinStatehhb+0x70>
     1fa:	08 95       	ret
     1fc:	44 23       	and	r20, r20
     1fe:	59 f0       	breq	.+22     	; 0x216 <_Z11setPinStatehhb+0x26>
     200:	25 b1       	in	r18, 0x05	; 5
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	02 c0       	rjmp	.+4      	; 0x20c <_Z11setPinStatehhb+0x1c>
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	6a 95       	dec	r22
     20e:	e2 f7       	brpl	.-8      	; 0x208 <_Z11setPinStatehhb+0x18>
     210:	82 2b       	or	r24, r18
     212:	85 b9       	out	0x05, r24	; 5
     214:	08 95       	ret
     216:	25 b1       	in	r18, 0x05	; 5
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <_Z11setPinStatehhb+0x32>
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	6a 95       	dec	r22
     224:	e2 f7       	brpl	.-8      	; 0x21e <_Z11setPinStatehhb+0x2e>
     226:	80 95       	com	r24
     228:	82 23       	and	r24, r18
     22a:	85 b9       	out	0x05, r24	; 5
     22c:	08 95       	ret
     22e:	44 23       	and	r20, r20
     230:	59 f0       	breq	.+22     	; 0x248 <_Z11setPinStatehhb+0x58>
     232:	28 b1       	in	r18, 0x08	; 8
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	02 c0       	rjmp	.+4      	; 0x23e <_Z11setPinStatehhb+0x4e>
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	6a 95       	dec	r22
     240:	e2 f7       	brpl	.-8      	; 0x23a <_Z11setPinStatehhb+0x4a>
     242:	82 2b       	or	r24, r18
     244:	88 b9       	out	0x08, r24	; 8
     246:	08 95       	ret
     248:	28 b1       	in	r18, 0x08	; 8
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	02 c0       	rjmp	.+4      	; 0x254 <_Z11setPinStatehhb+0x64>
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <_Z11setPinStatehhb+0x60>
     258:	80 95       	com	r24
     25a:	82 23       	and	r24, r18
     25c:	88 b9       	out	0x08, r24	; 8
     25e:	08 95       	ret
     260:	44 23       	and	r20, r20
     262:	59 f0       	breq	.+22     	; 0x27a <_Z11setPinStatehhb+0x8a>
     264:	2b b1       	in	r18, 0x0b	; 11
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <_Z11setPinStatehhb+0x80>
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	6a 95       	dec	r22
     272:	e2 f7       	brpl	.-8      	; 0x26c <_Z11setPinStatehhb+0x7c>
     274:	82 2b       	or	r24, r18
     276:	8b b9       	out	0x0b, r24	; 11
     278:	08 95       	ret
     27a:	2b b1       	in	r18, 0x0b	; 11
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	02 c0       	rjmp	.+4      	; 0x286 <_Z11setPinStatehhb+0x96>
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	6a 95       	dec	r22
     288:	e2 f7       	brpl	.-8      	; 0x282 <_Z11setPinStatehhb+0x92>
     28a:	80 95       	com	r24
     28c:	82 23       	and	r24, r18
     28e:	8b b9       	out	0x0b, r24	; 11
     290:	08 95       	ret

00000292 <_Z15setPinDirectionhhb>:
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	e9 f0       	breq	.+58     	; 0x2d0 <_Z15setPinDirectionhhb+0x3e>
     296:	18 f0       	brcs	.+6      	; 0x29e <_Z15setPinDirectionhhb+0xc>
     298:	82 30       	cpi	r24, 0x02	; 2
     29a:	99 f1       	breq	.+102    	; 0x302 <_Z15setPinDirectionhhb+0x70>
     29c:	08 95       	ret
     29e:	44 23       	and	r20, r20
     2a0:	59 f0       	breq	.+22     	; 0x2b8 <_Z15setPinDirectionhhb+0x26>
     2a2:	24 b1       	in	r18, 0x04	; 4
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <_Z15setPinDirectionhhb+0x1c>
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	6a 95       	dec	r22
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <_Z15setPinDirectionhhb+0x18>
     2b2:	82 2b       	or	r24, r18
     2b4:	84 b9       	out	0x04, r24	; 4
     2b6:	08 95       	ret
     2b8:	24 b1       	in	r18, 0x04	; 4
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <_Z15setPinDirectionhhb+0x32>
     2c0:	88 0f       	add	r24, r24
     2c2:	99 1f       	adc	r25, r25
     2c4:	6a 95       	dec	r22
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <_Z15setPinDirectionhhb+0x2e>
     2c8:	80 95       	com	r24
     2ca:	82 23       	and	r24, r18
     2cc:	84 b9       	out	0x04, r24	; 4
     2ce:	08 95       	ret
     2d0:	44 23       	and	r20, r20
     2d2:	59 f0       	breq	.+22     	; 0x2ea <_Z15setPinDirectionhhb+0x58>
     2d4:	27 b1       	in	r18, 0x07	; 7
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <_Z15setPinDirectionhhb+0x4e>
     2dc:	88 0f       	add	r24, r24
     2de:	99 1f       	adc	r25, r25
     2e0:	6a 95       	dec	r22
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <_Z15setPinDirectionhhb+0x4a>
     2e4:	82 2b       	or	r24, r18
     2e6:	87 b9       	out	0x07, r24	; 7
     2e8:	08 95       	ret
     2ea:	27 b1       	in	r18, 0x07	; 7
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <_Z15setPinDirectionhhb+0x64>
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	6a 95       	dec	r22
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <_Z15setPinDirectionhhb+0x60>
     2fa:	80 95       	com	r24
     2fc:	82 23       	and	r24, r18
     2fe:	87 b9       	out	0x07, r24	; 7
     300:	08 95       	ret
     302:	44 23       	and	r20, r20
     304:	59 f0       	breq	.+22     	; 0x31c <_Z15setPinDirectionhhb+0x8a>
     306:	2a b1       	in	r18, 0x0a	; 10
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	02 c0       	rjmp	.+4      	; 0x312 <_Z15setPinDirectionhhb+0x80>
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	6a 95       	dec	r22
     314:	e2 f7       	brpl	.-8      	; 0x30e <_Z15setPinDirectionhhb+0x7c>
     316:	82 2b       	or	r24, r18
     318:	8a b9       	out	0x0a, r24	; 10
     31a:	08 95       	ret
     31c:	2a b1       	in	r18, 0x0a	; 10
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	02 c0       	rjmp	.+4      	; 0x328 <_Z15setPinDirectionhhb+0x96>
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	6a 95       	dec	r22
     32a:	e2 f7       	brpl	.-8      	; 0x324 <_Z15setPinDirectionhhb+0x92>
     32c:	80 95       	com	r24
     32e:	82 23       	and	r24, r18
     330:	8a b9       	out	0x0a, r24	; 10
     332:	08 95       	ret

00000334 <_Z21setPinChangeInterrupthhb>:
     334:	e8 e6       	ldi	r30, 0x68	; 104
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	90 81       	ld	r25, Z
     33a:	21 e0       	ldi	r18, 0x01	; 1
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	08 2e       	mov	r0, r24
     340:	02 c0       	rjmp	.+4      	; 0x346 <_Z21setPinChangeInterrupthhb+0x12>
     342:	22 0f       	add	r18, r18
     344:	33 1f       	adc	r19, r19
     346:	0a 94       	dec	r0
     348:	e2 f7       	brpl	.-8      	; 0x342 <_Z21setPinChangeInterrupthhb+0xe>
     34a:	29 2b       	or	r18, r25
     34c:	20 83       	st	Z, r18
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	81 f0       	breq	.+32     	; 0x372 <_Z21setPinChangeInterrupthhb+0x3e>
     352:	18 f0       	brcs	.+6      	; 0x35a <_Z21setPinChangeInterrupthhb+0x26>
     354:	82 30       	cpi	r24, 0x02	; 2
     356:	c9 f0       	breq	.+50     	; 0x38a <_Z21setPinChangeInterrupthhb+0x56>
     358:	08 95       	ret
     35a:	eb e6       	ldi	r30, 0x6B	; 107
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	02 c0       	rjmp	.+4      	; 0x368 <_Z21setPinChangeInterrupthhb+0x34>
     364:	44 0f       	add	r20, r20
     366:	55 1f       	adc	r21, r21
     368:	6a 95       	dec	r22
     36a:	e2 f7       	brpl	.-8      	; 0x364 <_Z21setPinChangeInterrupthhb+0x30>
     36c:	48 2b       	or	r20, r24
     36e:	40 83       	st	Z, r20
     370:	08 95       	ret
     372:	ec e6       	ldi	r30, 0x6C	; 108
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	02 c0       	rjmp	.+4      	; 0x380 <_Z21setPinChangeInterrupthhb+0x4c>
     37c:	44 0f       	add	r20, r20
     37e:	55 1f       	adc	r21, r21
     380:	6a 95       	dec	r22
     382:	e2 f7       	brpl	.-8      	; 0x37c <_Z21setPinChangeInterrupthhb+0x48>
     384:	48 2b       	or	r20, r24
     386:	40 83       	st	Z, r20
     388:	08 95       	ret
     38a:	ed e6       	ldi	r30, 0x6D	; 109
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	02 c0       	rjmp	.+4      	; 0x398 <_Z21setPinChangeInterrupthhb+0x64>
     394:	44 0f       	add	r20, r20
     396:	55 1f       	adc	r21, r21
     398:	6a 95       	dec	r22
     39a:	e2 f7       	brpl	.-8      	; 0x394 <_Z21setPinChangeInterrupthhb+0x60>
     39c:	48 2b       	or	r20, r24
     39e:	40 83       	st	Z, r20
     3a0:	08 95       	ret

000003a2 <_Z14USART_Transmith>:
     3a2:	e0 ec       	ldi	r30, 0xC0	; 192
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	90 81       	ld	r25, Z
     3a8:	95 ff       	sbrs	r25, 5
     3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <_Z14USART_Transmith+0x4>
     3ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     3b0:	08 95       	ret

000003b2 <_Z6millisv>:
     3b2:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <time>
     3b6:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <time+0x1>
     3ba:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <time+0x2>
     3be:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <time+0x3>
     3c2:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <time+0x4>
     3c6:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <time+0x5>
     3ca:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <time+0x6>
     3ce:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <time+0x7>
     3d2:	08 95       	ret

000003d4 <_Z13milliHappenedv>:
}


void milliHappened(){
	time += 1;
     3d4:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <time>
     3d8:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <time+0x1>
     3dc:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <time+0x2>
     3e0:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <time+0x3>
     3e4:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <time+0x4>
     3e8:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <time+0x5>
     3ec:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <time+0x6>
     3f0:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <time+0x7>
     3f4:	a1 e0       	ldi	r26, 0x01	; 1
     3f6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__adddi3_s8>
     3fa:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <time>
     3fe:	30 93 b0 01 	sts	0x01B0, r19	; 0x8001b0 <time+0x1>
     402:	40 93 b1 01 	sts	0x01B1, r20	; 0x8001b1 <time+0x2>
     406:	50 93 b2 01 	sts	0x01B2, r21	; 0x8001b2 <time+0x3>
     40a:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <time+0x4>
     40e:	70 93 b4 01 	sts	0x01B4, r23	; 0x8001b4 <time+0x5>
     412:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <time+0x6>
     416:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <time+0x7>
	if(cdown != 0){
     41a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <cdown>
     41e:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <cdown+0x1>
     422:	89 2b       	or	r24, r25
     424:	49 f0       	breq	.+18     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		cdown -= 1;
     426:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <cdown>
     42a:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <cdown+0x1>
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <cdown+0x1>
     434:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <cdown>
     438:	08 95       	ret

0000043a <__vector_6>:
	}
	count1 += 1;
}*/


ISR(WDT_vect){
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	8f 93       	push	r24
	MCUSR &= ~(1 << SE);
     446:	84 b7       	in	r24, 0x34	; 52
     448:	8e 7f       	andi	r24, 0xFE	; 254
     44a:	84 bf       	out	0x34, r24	; 52
     44c:	8f 91       	pop	r24
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <_Z10numToArrayy>:
	USART_Transmit('\n');
	while(*p != 0){
		USART_Transmit(*p);
		p++;
	}
}
     458:	0f 93       	push	r16
     45a:	e8 ef       	ldi	r30, 0xF8	; 248
     45c:	f1 e0       	ldi	r31, 0x01	; 1
     45e:	a0 e0       	ldi	r26, 0x00	; 0
     460:	b2 e0       	ldi	r27, 0x02	; 2
     462:	21 93       	st	Z+, r18
     464:	08 e0       	ldi	r16, 0x08	; 8
     466:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__lshrdi3>
     46a:	ea 17       	cp	r30, r26
     46c:	fb 07       	cpc	r31, r27
     46e:	c9 f7       	brne	.-14     	; 0x462 <_Z10numToArrayy+0xa>
     470:	88 ef       	ldi	r24, 0xF8	; 248
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0f 91       	pop	r16
     476:	08 95       	ret

00000478 <_Z10hexToASCIIh>:
     478:	8a 30       	cpi	r24, 0x0A	; 10
     47a:	10 f0       	brcs	.+4      	; 0x480 <_Z10hexToASCIIh+0x8>
     47c:	89 5c       	subi	r24, 0xC9	; 201
     47e:	08 95       	ret
     480:	80 5d       	subi	r24, 0xD0	; 208
     482:	08 95       	ret

00000484 <_Z11hexToStringh>:
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	18 2f       	mov	r17, r24
     48c:	82 95       	swap	r24
     48e:	8f 70       	andi	r24, 0x0F	; 15
     490:	0e 94 3c 02 	call	0x478	; 0x478 <_Z10hexToASCIIh>
     494:	c0 e0       	ldi	r28, 0x00	; 0
     496:	d2 e0       	ldi	r29, 0x02	; 2
     498:	88 83       	st	Y, r24
     49a:	81 2f       	mov	r24, r17
     49c:	8f 70       	andi	r24, 0x0F	; 15
     49e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_ZZ11hexToStringhE4temp>
     4a2:	0e 94 3c 02 	call	0x478	; 0x478 <_Z10hexToASCIIh>
     4a6:	89 83       	std	Y+1, r24	; 0x01
     4a8:	1a 82       	std	Y+2, r1	; 0x02
     4aa:	ce 01       	movw	r24, r28
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	08 95       	ret

000004b4 <_Z11printNumbery>:
     4b4:	2f 92       	push	r2
     4b6:	3f 92       	push	r3
     4b8:	4f 92       	push	r4
     4ba:	5f 92       	push	r5
     4bc:	6f 92       	push	r6
     4be:	7f 92       	push	r7
     4c0:	8f 92       	push	r8
     4c2:	9f 92       	push	r9
     4c4:	af 92       	push	r10
     4c6:	bf 92       	push	r11
     4c8:	cf 92       	push	r12
     4ca:	df 92       	push	r13
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	c7 56       	subi	r28, 0x67	; 103
     4de:	d1 09       	sbc	r29, r1
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	a6 96       	adiw	r28, 0x26	; 38
     4ec:	2f af       	std	Y+63, r18	; 0x3f
     4ee:	a6 97       	sbiw	r28, 0x26	; 38
     4f0:	83 2e       	mov	r8, r19
     4f2:	74 2e       	mov	r7, r20
     4f4:	65 2e       	mov	r6, r21
     4f6:	56 2e       	mov	r5, r22
     4f8:	47 2e       	mov	r4, r23
     4fa:	38 2e       	mov	r3, r24
     4fc:	29 2e       	mov	r2, r25
     4fe:	a0 e0       	ldi	r26, 0x00	; 0
     500:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__cmpdi2_s8>
     504:	21 f4       	brne	.+8      	; 0x50e <_Z11printNumbery+0x5a>
     506:	80 e3       	ldi	r24, 0x30	; 48
     508:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z14USART_Transmith>
     50c:	52 c0       	rjmp	.+164    	; 0x5b2 <_Z11printNumbery+0xfe>
     50e:	91 2c       	mov	r9, r1
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	8c 0f       	add	r24, r28
     516:	9d 1f       	adc	r25, r29
     518:	89 0d       	add	r24, r9
     51a:	91 1d       	adc	r25, r1
     51c:	a8 96       	adiw	r28, 0x28	; 40
     51e:	9f af       	std	Y+63, r25	; 0x3f
     520:	8e af       	std	Y+62, r24	; 0x3e
     522:	a8 97       	sbiw	r28, 0x28	; 40
     524:	0f 2e       	mov	r0, r31
     526:	fa e0       	ldi	r31, 0x0A	; 10
     528:	af 2e       	mov	r10, r31
     52a:	f0 2d       	mov	r31, r0
     52c:	b1 2c       	mov	r11, r1
     52e:	c1 2c       	mov	r12, r1
     530:	d1 2c       	mov	r13, r1
     532:	e1 2c       	mov	r14, r1
     534:	f1 2c       	mov	r15, r1
     536:	00 e0       	ldi	r16, 0x00	; 0
     538:	10 e0       	ldi	r17, 0x00	; 0
     53a:	a6 96       	adiw	r28, 0x26	; 38
     53c:	2f ad       	ldd	r18, Y+63	; 0x3f
     53e:	a6 97       	sbiw	r28, 0x26	; 38
     540:	38 2d       	mov	r19, r8
     542:	47 2d       	mov	r20, r7
     544:	56 2d       	mov	r21, r6
     546:	65 2d       	mov	r22, r5
     548:	74 2d       	mov	r23, r4
     54a:	83 2d       	mov	r24, r3
     54c:	92 2d       	mov	r25, r2
     54e:	0e 94 2e 0c 	call	0x185c	; 0x185c <__umoddi3>
     552:	20 5d       	subi	r18, 0xD0	; 208
     554:	a8 96       	adiw	r28, 0x28	; 40
     556:	ee ad       	ldd	r30, Y+62	; 0x3e
     558:	ff ad       	ldd	r31, Y+63	; 0x3f
     55a:	a8 97       	sbiw	r28, 0x28	; 40
     55c:	20 83       	st	Z, r18
     55e:	a6 96       	adiw	r28, 0x26	; 38
     560:	2f ad       	ldd	r18, Y+63	; 0x3f
     562:	a6 97       	sbiw	r28, 0x26	; 38
     564:	38 2d       	mov	r19, r8
     566:	47 2d       	mov	r20, r7
     568:	56 2d       	mov	r21, r6
     56a:	65 2d       	mov	r22, r5
     56c:	74 2d       	mov	r23, r4
     56e:	83 2d       	mov	r24, r3
     570:	92 2d       	mov	r25, r2
     572:	0e 94 30 0c 	call	0x1860	; 0x1860 <__udivdi3>
     576:	a6 96       	adiw	r28, 0x26	; 38
     578:	2f af       	std	Y+63, r18	; 0x3f
     57a:	a6 97       	sbiw	r28, 0x26	; 38
     57c:	83 2e       	mov	r8, r19
     57e:	74 2e       	mov	r7, r20
     580:	65 2e       	mov	r6, r21
     582:	56 2e       	mov	r5, r22
     584:	47 2e       	mov	r4, r23
     586:	38 2e       	mov	r3, r24
     588:	29 2e       	mov	r2, r25
     58a:	93 94       	inc	r9
     58c:	a0 e0       	ldi	r26, 0x00	; 0
     58e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__cmpdi2_s8>
     592:	09 f0       	breq	.+2      	; 0x596 <_Z11printNumbery+0xe2>
     594:	bd cf       	rjmp	.-134    	; 0x510 <_Z11printNumbery+0x5c>
     596:	99 20       	and	r9, r9
     598:	61 f0       	breq	.+24     	; 0x5b2 <_Z11printNumbery+0xfe>
     59a:	9a 94       	dec	r9
     59c:	e1 e0       	ldi	r30, 0x01	; 1
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	ec 0f       	add	r30, r28
     5a2:	fd 1f       	adc	r31, r29
     5a4:	e9 0d       	add	r30, r9
     5a6:	f1 1d       	adc	r31, r1
     5a8:	80 81       	ld	r24, Z
     5aa:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z14USART_Transmith>
     5ae:	91 10       	cpse	r9, r1
     5b0:	f4 cf       	rjmp	.-24     	; 0x59a <_Z11printNumbery+0xe6>
     5b2:	80 e2       	ldi	r24, 0x20	; 32
     5b4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z14USART_Transmith>
     5b8:	c9 59       	subi	r28, 0x99	; 153
     5ba:	df 4f       	sbci	r29, 0xFF	; 255
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	bf 90       	pop	r11
     5d8:	af 90       	pop	r10
     5da:	9f 90       	pop	r9
     5dc:	8f 90       	pop	r8
     5de:	7f 90       	pop	r7
     5e0:	6f 90       	pop	r6
     5e2:	5f 90       	pop	r5
     5e4:	4f 90       	pop	r4
     5e6:	3f 90       	pop	r3
     5e8:	2f 90       	pop	r2
     5ea:	08 95       	ret

000005ec <_Z6NotifyPKc>:
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
     5f2:	8d e0       	ldi	r24, 0x0D	; 13
     5f4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z14USART_Transmith>
     5f8:	8a e0       	ldi	r24, 0x0A	; 10
     5fa:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z14USART_Transmith>
     5fe:	fe 01       	movw	r30, r28
     600:	84 91       	lpm	r24, Z
     602:	88 23       	and	r24, r24
     604:	49 f0       	breq	.+18     	; 0x618 <_Z6NotifyPKc+0x2c>
     606:	fe 01       	movw	r30, r28
     608:	84 91       	lpm	r24, Z
     60a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z14USART_Transmith>
     60e:	21 96       	adiw	r28, 0x01	; 1
     610:	fe 01       	movw	r30, r28
     612:	84 91       	lpm	r24, Z
     614:	81 11       	cpse	r24, r1
     616:	f7 cf       	rjmp	.-18     	; 0x606 <_Z6NotifyPKc+0x1a>
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <_Z15printStringCRNLPKc>:

void printStringCRNL(const char *p){
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	ec 01       	movw	r28, r24
	USART_Transmit('\r');
     624:	8d e0       	ldi	r24, 0x0D	; 13
     626:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z14USART_Transmith>
	USART_Transmit('\n');
     62a:	8a e0       	ldi	r24, 0x0A	; 10
     62c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z14USART_Transmith>
	while(*p != 0){
     630:	88 81       	ld	r24, Y
     632:	88 23       	and	r24, r24
     634:	31 f0       	breq	.+12     	; 0x642 <_Z15printStringCRNLPKc+0x24>
     636:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     638:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z14USART_Transmith>
}

void printStringCRNL(const char *p){
	USART_Transmit('\r');
	USART_Transmit('\n');
	while(*p != 0){
     63c:	89 91       	ld	r24, Y+
     63e:	81 11       	cpse	r24, r1
     640:	fb cf       	rjmp	.-10     	; 0x638 <_Z15printStringCRNLPKc+0x1a>
		USART_Transmit(*p);
		p++;
	}
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <_Z11printStringPKc>:

void printString(const char *p){
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	ec 01       	movw	r28, r24
	while(*p != 0){
     64e:	88 81       	ld	r24, Y
     650:	88 23       	and	r24, r24
     652:	31 f0       	breq	.+12     	; 0x660 <_Z11printStringPKc+0x18>
     654:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     656:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z14USART_Transmith>
		p++;
	}
}

void printString(const char *p){
	while(*p != 0){
     65a:	89 91       	ld	r24, Y+
     65c:	81 11       	cpse	r24, r1
     65e:	fb cf       	rjmp	.-10     	; 0x656 <_Z11printStringPKc+0xe>
		USART_Transmit(*p);
		p++;
	}
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <_Z16hexArrayToStringPhh>:
		data >>= 8;
	}
	return array;
} 

char* hexArrayToString(uint8_t *data, uint8_t length){
     666:	ff 92       	push	r15
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	f6 2e       	mov	r15, r22
	static char str[64], t;
	data += length - 1;
     672:	06 2f       	mov	r16, r22
     674:	10 e0       	ldi	r17, 0x00	; 0
     676:	01 50       	subi	r16, 0x01	; 1
     678:	11 09       	sbc	r17, r1
     67a:	08 0f       	add	r16, r24
     67c:	19 1f       	adc	r17, r25
		p++;
	}
}

void printChar(unsigned char data){
	USART_Transmit(data);
     67e:	80 e3       	ldi	r24, 0x30	; 48
     680:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z14USART_Transmith>
     684:	88 e7       	ldi	r24, 0x78	; 120
     686:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z14USART_Transmith>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     68a:	ff 20       	and	r15, r15
     68c:	81 f0       	breq	.+32     	; 0x6ae <_Z16hexArrayToStringPhh+0x48>
     68e:	e8 01       	movw	r28, r16
     690:	21 96       	adiw	r28, 0x01	; 1
     692:	8f ef       	ldi	r24, 0xFF	; 255
     694:	8f 0d       	add	r24, r15
     696:	08 1b       	sub	r16, r24
     698:	11 09       	sbc	r17, r1
	{	
		t = *data;
     69a:	8a 91       	ld	r24, -Y
     69c:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <_ZZ16hexArrayToStringPhhE1t>
		printString(hexToString(t));
     6a0:	0e 94 42 02 	call	0x484	; 0x484 <_Z11hexToStringh>
     6a4:	0e 94 24 03 	call	0x648	; 0x648 <_Z11printStringPKc>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     6a8:	c0 17       	cp	r28, r16
     6aa:	d1 07       	cpc	r29, r17
     6ac:	b1 f7       	brne	.-20     	; 0x69a <_Z16hexArrayToStringPhh+0x34>
	{	
		t = *data;
		printString(hexToString(t));
		data -= 1;
	}
	str[length + 2] = 0;
     6ae:	ef 2d       	mov	r30, r15
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	e9 54       	subi	r30, 0x49	; 73
     6b4:	fe 4f       	sbci	r31, 0xFE	; 254
     6b6:	12 82       	std	Z+2, r1	; 0x02
	return str;
}
     6b8:	87 eb       	ldi	r24, 0xB7	; 183
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	08 95       	ret

000006c8 <_Z14printHexNumberyh>:
	ascii[1] = hexToASCII(temp);
	ascii[2] = '\0';
	return ascii;
}

void printHexNumber(uint64_t data,uint8_t length){
     6c8:	0f 93       	push	r16
	printString(hexArrayToString(numToArray((data)),length));
     6ca:	0e 94 2c 02 	call	0x458	; 0x458 <_Z10numToArrayy>
     6ce:	60 2f       	mov	r22, r16
     6d0:	0e 94 33 03 	call	0x666	; 0x666 <_Z16hexArrayToStringPhh>
     6d4:	0e 94 24 03 	call	0x648	; 0x648 <_Z11printStringPKc>
}
     6d8:	0f 91       	pop	r16
     6da:	08 95       	ret

000006dc <_ZN8NRF24L0114toggleActivateEv>:
}

NRF24L01::NRF24L01(uint8_t Bufferlength_MasterTX, bool mode){
	Mode = mode;
	BufferLength_MasterTX = Bufferlength_MasterTX;
	initialize();
     6dc:	41 98       	cbi	0x08, 1	; 8
     6de:	80 e5       	ldi	r24, 0x50	; 80
     6e0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     6e4:	83 e7       	ldi	r24, 0x73	; 115
     6e6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     6ea:	41 9a       	sbi	0x08, 1	; 8
     6ec:	08 95       	ret

000006ee <_ZN8NRF24L0114sendSPICommandEh>:
     6ee:	86 2f       	mov	r24, r22
     6f0:	41 98       	cbi	0x08, 1	; 8
     6f2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     6f6:	41 9a       	sbi	0x08, 1	; 8
     6f8:	08 95       	ret

000006fa <_ZN8NRF24L0115readSPIRegisterEhh>:
     6fa:	af 92       	push	r10
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	86 2f       	mov	r24, r22
     710:	a4 2e       	mov	r10, r20
     712:	41 98       	cbi	0x08, 1	; 8
     714:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     718:	aa 20       	and	r10, r10
     71a:	21 f1       	breq	.+72     	; 0x764 <_ZN8NRF24L0115readSPIRegisterEhh+0x6a>
     71c:	d0 e0       	ldi	r29, 0x00	; 0
     71e:	c0 e0       	ldi	r28, 0x00	; 0
     720:	b1 2c       	mov	r11, r1
     722:	c1 2c       	mov	r12, r1
     724:	d1 2c       	mov	r13, r1
     726:	e1 2c       	mov	r14, r1
     728:	f1 2c       	mov	r15, r1
     72a:	00 e0       	ldi	r16, 0x00	; 0
     72c:	10 e0       	ldi	r17, 0x00	; 0
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     734:	2c 2f       	mov	r18, r28
     736:	28 2b       	or	r18, r24
     738:	3b 2d       	mov	r19, r11
     73a:	4c 2d       	mov	r20, r12
     73c:	5d 2d       	mov	r21, r13
     73e:	6e 2d       	mov	r22, r14
     740:	7f 2d       	mov	r23, r15
     742:	80 2f       	mov	r24, r16
     744:	91 2f       	mov	r25, r17
     746:	08 e0       	ldi	r16, 0x08	; 8
     748:	0e 94 8d 0c 	call	0x191a	; 0x191a <__ashldi3>
     74c:	c2 2f       	mov	r28, r18
     74e:	b3 2e       	mov	r11, r19
     750:	c4 2e       	mov	r12, r20
     752:	d5 2e       	mov	r13, r21
     754:	e6 2e       	mov	r14, r22
     756:	f7 2e       	mov	r15, r23
     758:	08 2f       	mov	r16, r24
     75a:	19 2f       	mov	r17, r25
     75c:	df 5f       	subi	r29, 0xFF	; 255
     75e:	da 11       	cpse	r29, r10
     760:	e6 cf       	rjmp	.-52     	; 0x72e <_ZN8NRF24L0115readSPIRegisterEhh+0x34>
     762:	08 c0       	rjmp	.+16     	; 0x774 <_ZN8NRF24L0115readSPIRegisterEhh+0x7a>
     764:	c0 e0       	ldi	r28, 0x00	; 0
     766:	b1 2c       	mov	r11, r1
     768:	c1 2c       	mov	r12, r1
     76a:	d1 2c       	mov	r13, r1
     76c:	e1 2c       	mov	r14, r1
     76e:	f1 2c       	mov	r15, r1
     770:	00 e0       	ldi	r16, 0x00	; 0
     772:	10 e0       	ldi	r17, 0x00	; 0
     774:	41 9a       	sbi	0x08, 1	; 8
     776:	2c 2f       	mov	r18, r28
     778:	3b 2d       	mov	r19, r11
     77a:	4c 2d       	mov	r20, r12
     77c:	5d 2d       	mov	r21, r13
     77e:	6e 2d       	mov	r22, r14
     780:	7f 2d       	mov	r23, r15
     782:	80 2f       	mov	r24, r16
     784:	91 2f       	mov	r25, r17
     786:	08 e0       	ldi	r16, 0x08	; 8
     788:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__lshrdi3>
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	bf 90       	pop	r11
     79e:	af 90       	pop	r10
     7a0:	08 95       	ret

000007a2 <_ZN8NRF24L019printInfoEv>:
     7a2:	0f 93       	push	r16
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 0f 03 	call	0x61e	; 0x61e <_Z15printStringCRNLPKc>
     7b2:	41 e0       	ldi	r20, 0x01	; 1
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	ce 01       	movw	r24, r28
     7b8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     7bc:	01 e0       	ldi	r16, 0x01	; 1
     7be:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z14printHexNumberyh>
     7c2:	8a e0       	ldi	r24, 0x0A	; 10
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 24 03 	call	0x648	; 0x648 <_Z11printStringPKc>
     7ca:	41 e0       	ldi	r20, 0x01	; 1
     7cc:	67 e1       	ldi	r22, 0x17	; 23
     7ce:	ce 01       	movw	r24, r28
     7d0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     7d4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z14printHexNumberyh>
     7d8:	8f e0       	ldi	r24, 0x0F	; 15
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 24 03 	call	0x648	; 0x648 <_Z11printStringPKc>
     7e0:	6f ef       	ldi	r22, 0xFF	; 255
     7e2:	ce 01       	movw	r24, r28
     7e4:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN8NRF24L0114sendSPICommandEh>
     7e8:	28 2f       	mov	r18, r24
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z14printHexNumberyh>
     7fc:	89 e1       	ldi	r24, 0x19	; 25
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 24 03 	call	0x648	; 0x648 <_Z11printStringPKc>
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	68 e0       	ldi	r22, 0x08	; 8
     808:	ce 01       	movw	r24, r28
     80a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     80e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_Z11printNumbery>
     812:	87 e2       	ldi	r24, 0x27	; 39
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 24 03 	call	0x648	; 0x648 <_Z11printStringPKc>
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	6d e1       	ldi	r22, 0x1D	; 29
     81e:	ce 01       	movw	r24, r28
     820:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     824:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_Z11printNumbery>
     828:	82 e3       	ldi	r24, 0x32	; 50
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 24 03 	call	0x648	; 0x648 <_Z11printStringPKc>
     830:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_Z6millisv>
     834:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_Z11printNumbery>
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	0f 91       	pop	r16
     83e:	08 95       	ret

00000840 <_ZN8NRF24L018isTXFullEv>:
     840:	41 e0       	ldi	r20, 0x01	; 1
     842:	67 e1       	ldi	r22, 0x17	; 23
     844:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     848:	82 2f       	mov	r24, r18
     84a:	80 72       	andi	r24, 0x20	; 32
     84c:	08 95       	ret

0000084e <_ZN8NRF24L0111isTX_DS_SetEv>:
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	67 e0       	ldi	r22, 0x07	; 7
     852:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     856:	82 2f       	mov	r24, r18
     858:	80 72       	andi	r24, 0x20	; 32
     85a:	08 95       	ret

0000085c <_ZN8NRF24L0112isRT_Max_SetEv>:
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	67 e0       	ldi	r22, 0x07	; 7
     860:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     864:	82 2f       	mov	r24, r18
     866:	80 71       	andi	r24, 0x10	; 16
     868:	08 95       	ret

0000086a <_ZN8NRF24L0116writeSPIRegisterEhyh>:
     86a:	9f 92       	push	r9
     86c:	af 92       	push	r10
     86e:	bf 92       	push	r11
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	c2 2f       	mov	r28, r18
     882:	d3 2f       	mov	r29, r19
     884:	b4 2e       	mov	r11, r20
     886:	a5 2e       	mov	r10, r21
     888:	41 98       	cbi	0x08, 1	; 8
     88a:	86 2f       	mov	r24, r22
     88c:	80 62       	ori	r24, 0x20	; 32
     88e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     892:	98 2e       	mov	r9, r24
     894:	cc 20       	and	r12, r12
     896:	d1 f0       	breq	.+52     	; 0x8cc <_ZN8NRF24L0116writeSPIRegisterEhyh+0x62>
     898:	d1 2c       	mov	r13, r1
     89a:	8e 2d       	mov	r24, r14
     89c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     8a0:	2e 2d       	mov	r18, r14
     8a2:	3f 2d       	mov	r19, r15
     8a4:	40 2f       	mov	r20, r16
     8a6:	51 2f       	mov	r21, r17
     8a8:	6c 2f       	mov	r22, r28
     8aa:	7d 2f       	mov	r23, r29
     8ac:	8b 2d       	mov	r24, r11
     8ae:	9a 2d       	mov	r25, r10
     8b0:	08 e0       	ldi	r16, 0x08	; 8
     8b2:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__lshrdi3>
     8b6:	e2 2e       	mov	r14, r18
     8b8:	f3 2e       	mov	r15, r19
     8ba:	04 2f       	mov	r16, r20
     8bc:	15 2f       	mov	r17, r21
     8be:	c6 2f       	mov	r28, r22
     8c0:	d7 2f       	mov	r29, r23
     8c2:	b8 2e       	mov	r11, r24
     8c4:	a9 2e       	mov	r10, r25
     8c6:	d3 94       	inc	r13
     8c8:	dc 10       	cpse	r13, r12
     8ca:	e7 cf       	rjmp	.-50     	; 0x89a <_ZN8NRF24L0116writeSPIRegisterEhyh+0x30>
     8cc:	41 9a       	sbi	0x08, 1	; 8
     8ce:	89 2d       	mov	r24, r9
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	9f 90       	pop	r9
     8e6:	08 95       	ret

000008e8 <_ZN8NRF24L017powerONEb>:
     8e8:	cf 92       	push	r12
     8ea:	ef 92       	push	r14
     8ec:	ff 92       	push	r15
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	ec 01       	movw	r28, r24
     8f8:	e6 2e       	mov	r14, r22
     8fa:	41 e0       	ldi	r20, 0x01	; 1
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     902:	2d 7f       	andi	r18, 0xFD	; 253
     904:	ee 0c       	add	r14, r14
     906:	e2 2a       	or	r14, r18
     908:	eb 82       	std	Y+3, r14	; 0x03
     90a:	cc 24       	eor	r12, r12
     90c:	c3 94       	inc	r12
     90e:	f1 2c       	mov	r15, r1
     910:	00 e0       	ldi	r16, 0x00	; 0
     912:	10 e0       	ldi	r17, 0x00	; 0
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	ce 01       	movw	r24, r28
     920:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	cf 90       	pop	r12
     932:	08 95       	ret

00000934 <_ZN8NRF24L017setModeEb>:
     934:	af 92       	push	r10
     936:	bf 92       	push	r11
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
     94a:	d6 2e       	mov	r13, r22
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     954:	2b 83       	std	Y+3, r18	; 0x03
     956:	01 e0       	ldi	r16, 0x01	; 1
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z14printHexNumberyh>
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	8e 7f       	andi	r24, 0xFE	; 254
     96e:	ed 2c       	mov	r14, r13
     970:	e8 2a       	or	r14, r24
     972:	eb 82       	std	Y+3, r14	; 0x03
     974:	cc 24       	eor	r12, r12
     976:	c3 94       	inc	r12
     978:	f1 2c       	mov	r15, r1
     97a:	00 e0       	ldi	r16, 0x00	; 0
     97c:	10 e0       	ldi	r17, 0x00	; 0
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	ce 01       	movw	r24, r28
     98a:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     98e:	dd 20       	and	r13, r13
     990:	29 f0       	breq	.+10     	; 0x99c <_ZN8NRF24L017setModeEb+0x68>
     992:	8d ed       	ldi	r24, 0xDD	; 221
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z6NotifyPKc>
     99a:	04 c0       	rjmp	.+8      	; 0x9a4 <_ZN8NRF24L017setModeEb+0x70>
     99c:	87 eb       	ldi	r24, 0xB7	; 183
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z6NotifyPKc>
     9a4:	41 e0       	ldi	r20, 0x01	; 1
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	ce 01       	movw	r24, r28
     9aa:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     9ae:	ab 80       	ldd	r10, Y+3	; 0x03
     9b0:	b1 2c       	mov	r11, r1
     9b2:	c1 2c       	mov	r12, r1
     9b4:	d1 2c       	mov	r13, r1
     9b6:	e1 2c       	mov	r14, r1
     9b8:	f1 2c       	mov	r15, r1
     9ba:	00 e0       	ldi	r16, 0x00	; 0
     9bc:	10 e0       	ldi	r17, 0x00	; 0
     9be:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__cmpdi2>
     9c2:	29 f0       	breq	.+10     	; 0x9ce <_ZN8NRF24L017setModeEb+0x9a>
     9c4:	81 e8       	ldi	r24, 0x81	; 129
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z6NotifyPKc>
     9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <_ZN8NRF24L017setModeEb+0xa2>
     9ce:	88 e6       	ldi	r24, 0x68	; 104
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z6NotifyPKc>
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	df 90       	pop	r13
     9e4:	cf 90       	pop	r12
     9e6:	bf 90       	pop	r11
     9e8:	af 90       	pop	r10
     9ea:	08 95       	ret

000009ec <_ZN8NRF24L0120enableACKWithPayloadEb>:
     9ec:	cf 92       	push	r12
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	ec 01       	movw	r28, r24
     9fc:	e6 2e       	mov	r14, r22
     9fe:	41 e0       	ldi	r20, 0x01	; 1
     a00:	6d e1       	ldi	r22, 0x1D	; 29
     a02:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     a06:	2d 7f       	andi	r18, 0xFD	; 253
     a08:	ee 0c       	add	r14, r14
     a0a:	e2 2a       	or	r14, r18
     a0c:	eb 82       	std	Y+3, r14	; 0x03
     a0e:	cc 24       	eor	r12, r12
     a10:	c3 94       	inc	r12
     a12:	f1 2c       	mov	r15, r1
     a14:	00 e0       	ldi	r16, 0x00	; 0
     a16:	10 e0       	ldi	r17, 0x00	; 0
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	6d e1       	ldi	r22, 0x1D	; 29
     a22:	ce 01       	movw	r24, r28
     a24:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	cf 90       	pop	r12
     a36:	08 95       	ret

00000a38 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>:
     a38:	cf 92       	push	r12
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	ec 01       	movw	r28, r24
     a48:	e6 2e       	mov	r14, r22
     a4a:	41 e0       	ldi	r20, 0x01	; 1
     a4c:	6d e1       	ldi	r22, 0x1D	; 29
     a4e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     a52:	2b 7f       	andi	r18, 0xFB	; 251
     a54:	ee 0c       	add	r14, r14
     a56:	ee 0c       	add	r14, r14
     a58:	e2 2a       	or	r14, r18
     a5a:	eb 82       	std	Y+3, r14	; 0x03
     a5c:	cc 24       	eor	r12, r12
     a5e:	c3 94       	inc	r12
     a60:	f1 2c       	mov	r15, r1
     a62:	00 e0       	ldi	r16, 0x00	; 0
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	6d e1       	ldi	r22, 0x1D	; 29
     a70:	ce 01       	movw	r24, r28
     a72:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	cf 90       	pop	r12
     a84:	08 95       	ret

00000a86 <_ZN8NRF24L0118enableDPLForRXPipeEhb>:
     a86:	af 92       	push	r10
     a88:	bf 92       	push	r11
     a8a:	cf 92       	push	r12
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	66 30       	cpi	r22, 0x06	; 6
     a9a:	48 f5       	brcc	.+82     	; 0xaee <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x68>
     a9c:	c4 2f       	mov	r28, r20
     a9e:	d6 2f       	mov	r29, r22
     aa0:	5c 01       	movw	r10, r24
     aa2:	41 e0       	ldi	r20, 0x01	; 1
     aa4:	6c e1       	ldi	r22, 0x1C	; 28
     aa6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0d 2e       	mov	r0, r29
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x30>
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	0a 94       	dec	r0
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x2c>
     aba:	80 95       	com	r24
     abc:	82 23       	and	r24, r18
     abe:	4c 2f       	mov	r20, r28
     ac0:	50 e0       	ldi	r21, 0x00	; 0
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x42>
     ac4:	44 0f       	add	r20, r20
     ac6:	55 1f       	adc	r21, r21
     ac8:	da 95       	dec	r29
     aca:	e2 f7       	brpl	.-8      	; 0xac4 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x3e>
     acc:	e8 2e       	mov	r14, r24
     ace:	e4 2a       	or	r14, r20
     ad0:	f5 01       	movw	r30, r10
     ad2:	e3 82       	std	Z+3, r14	; 0x03
     ad4:	cc 24       	eor	r12, r12
     ad6:	c3 94       	inc	r12
     ad8:	f1 2c       	mov	r15, r1
     ada:	00 e0       	ldi	r16, 0x00	; 0
     adc:	10 e0       	ldi	r17, 0x00	; 0
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	6c e1       	ldi	r22, 0x1C	; 28
     ae8:	c5 01       	movw	r24, r10
     aea:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	cf 90       	pop	r12
     afc:	bf 90       	pop	r11
     afe:	af 90       	pop	r10
     b00:	08 95       	ret

00000b02 <_ZN8NRF24L0110clearTX_DSEv>:
     b02:	cf 92       	push	r12
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cc 24       	eor	r12, r12
     b0e:	c3 94       	inc	r12
     b10:	68 94       	set
     b12:	ee 24       	eor	r14, r14
     b14:	e5 f8       	bld	r14, 5
     b16:	f1 2c       	mov	r15, r1
     b18:	00 e0       	ldi	r16, 0x00	; 0
     b1a:	10 e0       	ldi	r17, 0x00	; 0
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	67 e0       	ldi	r22, 0x07	; 7
     b26:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	cf 90       	pop	r12
     b34:	08 95       	ret

00000b36 <_ZN8NRF24L0111clearRT_MaxEv>:
     b36:	cf 92       	push	r12
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	cc 24       	eor	r12, r12
     b42:	c3 94       	inc	r12
     b44:	68 94       	set
     b46:	ee 24       	eor	r14, r14
     b48:	e4 f8       	bld	r14, 4
     b4a:	f1 2c       	mov	r15, r1
     b4c:	00 e0       	ldi	r16, 0x00	; 0
     b4e:	10 e0       	ldi	r17, 0x00	; 0
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	67 e0       	ldi	r22, 0x07	; 7
     b5a:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	cf 90       	pop	r12
     b68:	08 95       	ret

00000b6a <_ZN8NRF24L0113setRFDataRateEb>:
     b6a:	cf 92       	push	r12
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	ec 01       	movw	r28, r24
     b7a:	e6 2e       	mov	r14, r22
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	66 e0       	ldi	r22, 0x06	; 6
     b80:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN8NRF24L0115readSPIRegisterEhh>
     b84:	27 7f       	andi	r18, 0xF7	; 247
     b86:	ee 0c       	add	r14, r14
     b88:	ee 0c       	add	r14, r14
     b8a:	ee 0c       	add	r14, r14
     b8c:	e2 2a       	or	r14, r18
     b8e:	eb 82       	std	Y+3, r14	; 0x03
     b90:	cc 24       	eor	r12, r12
     b92:	c3 94       	inc	r12
     b94:	f1 2c       	mov	r15, r1
     b96:	00 e0       	ldi	r16, 0x00	; 0
     b98:	10 e0       	ldi	r17, 0x00	; 0
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	66 e0       	ldi	r22, 0x06	; 6
     ba4:	ce 01       	movw	r24, r28
     ba6:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	cf 90       	pop	r12
     bb8:	08 95       	ret

00000bba <_ZN8NRF24L0119fastTransferPayloadEh>:
     bba:	af 92       	push	r10
     bbc:	bf 92       	push	r11
     bbe:	cf 92       	push	r12
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	1f 92       	push	r1
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	5c 01       	movw	r10, r24
     bd4:	69 83       	std	Y+1, r22	; 0x01
     bd6:	6f ef       	ldi	r22, 0xFF	; 255
     bd8:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN8NRF24L0114sendSPICommandEh>
     bdc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZN8NRF24L0119fastTransferPayloadEhE6status>
     be0:	80 fd       	sbrc	r24, 0
     be2:	09 c0       	rjmp	.+18     	; 0xbf6 <_ZN8NRF24L0119fastTransferPayloadEh+0x3c>
     be4:	41 98       	cbi	0x08, 1	; 8
     be6:	80 ea       	ldi	r24, 0xA0	; 160
     be8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z18SPI_MasterTransmitc>
     bf2:	41 9a       	sbi	0x08, 1	; 8
     bf4:	12 c0       	rjmp	.+36     	; 0xc1a <_ZN8NRF24L0119fastTransferPayloadEh+0x60>
     bf6:	84 ff       	sbrs	r24, 4
     bf8:	10 c0       	rjmp	.+32     	; 0xc1a <_ZN8NRF24L0119fastTransferPayloadEh+0x60>
     bfa:	cc 24       	eor	r12, r12
     bfc:	c3 94       	inc	r12
     bfe:	68 94       	set
     c00:	ee 24       	eor	r14, r14
     c02:	e4 f8       	bld	r14, 4
     c04:	f1 2c       	mov	r15, r1
     c06:	00 e0       	ldi	r16, 0x00	; 0
     c08:	10 e0       	ldi	r17, 0x00	; 0
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	67 e0       	ldi	r22, 0x07	; 7
     c14:	c5 01       	movw	r24, r10
     c16:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     c1a:	0f 90       	pop	r0
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	cf 90       	pop	r12
     c2a:	bf 90       	pop	r11
     c2c:	af 90       	pop	r10
     c2e:	08 95       	ret

00000c30 <_ZN8NRF24L0118setTransmitAddressEy>:
     c30:	cf 92       	push	r12
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	0f 2e       	mov	r0, r31
     c3c:	f5 e0       	ldi	r31, 0x05	; 5
     c3e:	cf 2e       	mov	r12, r31
     c40:	f0 2d       	mov	r31, r0
     c42:	e0 2e       	mov	r14, r16
     c44:	f1 2e       	mov	r15, r17
     c46:	02 2f       	mov	r16, r18
     c48:	13 2f       	mov	r17, r19
     c4a:	24 2f       	mov	r18, r20
     c4c:	35 2f       	mov	r19, r21
     c4e:	46 2f       	mov	r20, r22
     c50:	57 2f       	mov	r21, r23
     c52:	60 e1       	ldi	r22, 0x10	; 16
     c54:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	cf 90       	pop	r12
     c62:	08 95       	ret

00000c64 <_ZN8NRF24L0118setReceive0AddressEy>:
     c64:	cf 92       	push	r12
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	0f 2e       	mov	r0, r31
     c70:	f5 e0       	ldi	r31, 0x05	; 5
     c72:	cf 2e       	mov	r12, r31
     c74:	f0 2d       	mov	r31, r0
     c76:	e0 2e       	mov	r14, r16
     c78:	f1 2e       	mov	r15, r17
     c7a:	02 2f       	mov	r16, r18
     c7c:	13 2f       	mov	r17, r19
     c7e:	24 2f       	mov	r18, r20
     c80:	35 2f       	mov	r19, r21
     c82:	46 2f       	mov	r20, r22
     c84:	57 2f       	mov	r21, r23
     c86:	6a e0       	ldi	r22, 0x0A	; 10
     c88:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	ff 90       	pop	r15
     c92:	ef 90       	pop	r14
     c94:	cf 90       	pop	r12
     c96:	08 95       	ret

00000c98 <_ZN8NRF24L0110initializeEv>:
     c98:	cf 92       	push	r12
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	ec 01       	movw	r28, r24
     ca8:	39 9a       	sbi	0x07, 1	; 7
     caa:	38 9a       	sbi	0x07, 0	; 7
     cac:	40 9a       	sbi	0x08, 0	; 8
     cae:	57 9a       	sbi	0x0a, 7	; 10
     cb0:	1a 82       	std	Y+2, r1	; 0x02
     cb2:	85 e2       	ldi	r24, 0x25	; 37
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z6NotifyPKc>
     cba:	28 81       	ld	r18, Y
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_Z11printNumbery>
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z6NotifyPKc>
     cd6:	29 81       	ldd	r18, Y+1	; 0x01
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_Z11printNumbery>
     cea:	05 eb       	ldi	r16, 0xB5	; 181
     cec:	1a eb       	ldi	r17, 0xBA	; 186
     cee:	2a eb       	ldi	r18, 0xBA	; 186
     cf0:	3a eb       	ldi	r19, 0xBA	; 186
     cf2:	4a eb       	ldi	r20, 0xBA	; 186
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	ce 01       	movw	r24, r28
     cfc:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN8NRF24L0118setTransmitAddressEy>
     d00:	2a eb       	ldi	r18, 0xBA	; 186
     d02:	3a eb       	ldi	r19, 0xBA	; 186
     d04:	4a eb       	ldi	r20, 0xBA	; 186
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	ce 01       	movw	r24, r28
     d0e:	0e 94 32 06 	call	0xc64	; 0xc64 <_ZN8NRF24L0118setReceive0AddressEy>
     d12:	cc 24       	eor	r12, r12
     d14:	c3 94       	inc	r12
     d16:	e1 2c       	mov	r14, r1
     d18:	f1 2c       	mov	r15, r1
     d1a:	00 e0       	ldi	r16, 0x00	; 0
     d1c:	10 e0       	ldi	r17, 0x00	; 0
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	64 e0       	ldi	r22, 0x04	; 4
     d28:	ce 01       	movw	r24, r28
     d2a:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	ce 01       	movw	r24, r28
     d32:	0e 94 b5 05 	call	0xb6a	; 0xb6a <_ZN8NRF24L0113setRFDataRateEb>
     d36:	6f 81       	ldd	r22, Y+7	; 0x07
     d38:	ce 01       	movw	r24, r28
     d3a:	0e 94 9a 04 	call	0x934	; 0x934 <_ZN8NRF24L017setModeEb>
     d3e:	88 85       	ldd	r24, Y+8	; 0x08
     d40:	88 23       	and	r24, r24
     d42:	81 f0       	breq	.+32     	; 0xd64 <_ZN8NRF24L0110initializeEv+0xcc>
     d44:	ce 01       	movw	r24, r28
     d46:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_ZN8NRF24L0114toggleActivateEv>
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	ce 01       	movw	r24, r28
     d4e:	0e 94 1c 05 	call	0xa38	; 0xa38 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>
     d52:	41 e0       	ldi	r20, 0x01	; 1
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	ce 01       	movw	r24, r28
     d58:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN8NRF24L0118enableDPLForRXPipeEhb>
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	ce 01       	movw	r24, r28
     d60:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_ZN8NRF24L0120enableACKWithPayloadEb>
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	ce 01       	movw	r24, r28
     d68:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN8NRF24L017powerONEb>
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	cf 90       	pop	r12
     d7a:	08 95       	ret

00000d7c <_ZN8NRF24L01C1Ehhb>:
     d7c:	3f ef       	ldi	r19, 0xFF	; 255
     d7e:	50 e7       	ldi	r21, 0x70	; 112
     d80:	72 e0       	ldi	r23, 0x02	; 2
     d82:	31 50       	subi	r19, 0x01	; 1
     d84:	50 40       	sbci	r21, 0x00	; 0
     d86:	70 40       	sbci	r23, 0x00	; 0
     d88:	e1 f7       	brne	.-8      	; 0xd82 <_ZN8NRF24L01C1Ehhb+0x6>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <_ZN8NRF24L01C1Ehhb+0x10>
     d8c:	00 00       	nop
     d8e:	fc 01       	movw	r30, r24
     d90:	27 83       	std	Z+7, r18	; 0x07
     d92:	21 e0       	ldi	r18, 0x01	; 1
     d94:	20 87       	std	Z+8, r18	; 0x08
     d96:	60 83       	st	Z, r22
     d98:	41 83       	std	Z+1, r20	; 0x01
     d9a:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN8NRF24L0110initializeEv>
     d9e:	08 95       	ret

00000da0 <_ZN8NRF24L017flushTXEv>:
void NRF24L01::setReceive0Address(uint64_t address){
	writeSPIRegister(RX_ADDR_P0, address, 5);
}

void NRF24L01::flushTX(){
	sendSPICommand(FLUSH_TX);
     da0:	61 ee       	ldi	r22, 0xE1	; 225
     da2:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN8NRF24L0114sendSPICommandEh>
     da6:	08 95       	ret

00000da8 <_ZN11SwitchClass9doNothingEh>:
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     da8:	08 95       	ret

00000daa <_ZN11SwitchClass5beginEv>:
     daa:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <_ZN11SwitchClass1iE>
     dae:	84 ed       	ldi	r24, 0xD4	; 212
     db0:	96 e0       	ldi	r25, 0x06	; 6
     db2:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_ZN11SwitchClass17PinStateChangePtrE+0x1>
     db6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZN11SwitchClass17PinStateChangePtrE>
     dba:	08 95       	ret

00000dbc <_ZN11SwitchClass10shortPressEPFvhE>:
     dbc:	fc 01       	movw	r30, r24
     dbe:	77 87       	std	Z+15, r23	; 0x0f
     dc0:	66 87       	std	Z+14, r22	; 0x0e
     dc2:	70 93 0a 02 	sts	0x020A, r23	; 0x80020a <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     dc6:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <_ZN11SwitchClass16AllShortPressPtrE>
     dca:	21 e0       	ldi	r18, 0x01	; 1
     dcc:	24 8f       	std	Z+28, r18	; 0x1c
     dce:	08 95       	ret

00000dd0 <_ZN11SwitchClass18doubleWaitCompleteEv>:
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	ec 01       	movw	r28, r24
     dd6:	1b a2       	std	Y+35, r1	; 0x23
     dd8:	1c a2       	std	Y+36, r1	; 0x24
     dda:	0e 94 33 0a 	call	0x1466	; 0x1466 <_ZN10TimerClass10resetTimerEv>
     dde:	ce 01       	movw	r24, r28
     de0:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN10TimerClass18resetCallbackTimerEv>
     de4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     de6:	81 11       	cpse	r24, r1
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <_ZN11SwitchClass18doubleWaitCompleteEv+0x22>
     dea:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <_ZN11SwitchClass11AllShort_ENE>
     dee:	88 23       	and	r24, r24
     df0:	c9 f0       	breq	.+50     	; 0xe24 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     df2:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <_ZN11SwitchClass13AllSamePtr_ENE>
     df6:	88 23       	and	r24, r24
     df8:	61 f0       	breq	.+24     	; 0xe12 <_ZN11SwitchClass18doubleWaitCompleteEv+0x42>
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
     e00:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <_ZN11SwitchClass16AllShortPressPtrE>
     e04:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     e08:	30 97       	sbiw	r30, 0x00	; 0
     e0a:	61 f0       	breq	.+24     	; 0xe24 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     e0c:	8e a1       	ldd	r24, Y+38	; 0x26
     e0e:	09 95       	icall
     e10:	09 c0       	rjmp	.+18     	; 0xe24 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
     e18:	ee 85       	ldd	r30, Y+14	; 0x0e
     e1a:	ff 85       	ldd	r31, Y+15	; 0x0f
     e1c:	30 97       	sbiw	r30, 0x00	; 0
     e1e:	11 f0       	breq	.+4      	; 0xe24 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     e20:	8e a1       	ldd	r24, Y+38	; 0x26
     e22:	09 95       	icall
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	08 95       	ret

00000e2a <_ZN11SwitchClass17callAllDoubleWaitEh>:
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <_ZN11SwitchClass1iE>
     e32:	99 23       	and	r25, r25
     e34:	c1 f0       	breq	.+48     	; 0xe66 <_ZN11SwitchClass17callAllDoubleWaitEh+0x3c>
     e36:	d8 2f       	mov	r29, r24
     e38:	c0 e0       	ldi	r28, 0x00	; 0
     e3a:	ec 2f       	mov	r30, r28
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	ee 0f       	add	r30, r30
     e40:	ff 1f       	adc	r31, r31
     e42:	e5 5e       	subi	r30, 0xE5	; 229
     e44:	fd 4f       	sbci	r31, 0xFD	; 253
     e46:	01 90       	ld	r0, Z+
     e48:	f0 81       	ld	r31, Z
     e4a:	e0 2d       	mov	r30, r0
     e4c:	91 a5       	ldd	r25, Z+41	; 0x29
     e4e:	9d 13       	cpse	r25, r29
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     e52:	30 97       	sbiw	r30, 0x00	; 0
     e54:	19 f0       	breq	.+6      	; 0xe5c <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     e56:	cf 01       	movw	r24, r30
     e58:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN11SwitchClass18doubleWaitCompleteEv>
     e5c:	cf 5f       	subi	r28, 0xFF	; 255
     e5e:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <_ZN11SwitchClass1iE>
     e62:	c9 17       	cp	r28, r25
     e64:	50 f3       	brcs	.-44     	; 0xe3a <_ZN11SwitchClass17callAllDoubleWaitEh+0x10>
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <_ZN11SwitchClass17enableSamePtrModeEb>:
     e6c:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZN11SwitchClass13AllSamePtr_ENE>
     e70:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <_ZN11SwitchClass11AllShort_ENE>
     e74:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZN11SwitchClass12AllDouble_ENE>
     e78:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <_ZN11SwitchClass10AllLong_ENE>
     e7c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <_ZN11SwitchClass20AllContinuousLong_ENE>
     e80:	08 95       	ret

00000e82 <_ZN11SwitchClass16updatePinBuffersEv>:
     e82:	83 b1       	in	r24, 0x03	; 3
     e84:	e6 e1       	ldi	r30, 0x16	; 22
     e86:	f2 e0       	ldi	r31, 0x02	; 2
     e88:	80 83       	st	Z, r24
     e8a:	86 b1       	in	r24, 0x06	; 6
     e8c:	81 83       	std	Z+1, r24	; 0x01
     e8e:	89 b1       	in	r24, 0x09	; 9
     e90:	82 83       	std	Z+2, r24	; 0x02
     e92:	08 95       	ret

00000e94 <_ZN11SwitchClass10pollSwitchEv>:
     e94:	fc 01       	movw	r30, r24
     e96:	80 a5       	ldd	r24, Z+40	; 0x28
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	49 f0       	breq	.+18     	; 0xeae <_ZN11SwitchClass10pollSwitchEv+0x1a>
     e9c:	18 f0       	brcs	.+6      	; 0xea4 <_ZN11SwitchClass10pollSwitchEv+0x10>
     e9e:	82 30       	cpi	r24, 0x02	; 2
     ea0:	59 f0       	breq	.+22     	; 0xeb8 <_ZN11SwitchClass10pollSwitchEv+0x24>
     ea2:	0e c0       	rjmp	.+28     	; 0xec0 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     ea4:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN11SwitchClass9PinBufferE>
     ea8:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <_ZN11SwitchClass11SwitchStateE>
     eac:	09 c0       	rjmp	.+18     	; 0xec0 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     eae:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_ZN11SwitchClass9PinBufferE+0x1>
     eb2:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <_ZN11SwitchClass11SwitchStateE>
     eb6:	04 c0       	rjmp	.+8      	; 0xec0 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     eb8:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <_ZN11SwitchClass9PinBufferE+0x2>
     ebc:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <_ZN11SwitchClass11SwitchStateE>
     ec0:	82 8d       	ldd	r24, Z+26	; 0x1a
     ec2:	81 a3       	std	Z+33, r24	; 0x21
     ec4:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <_ZN11SwitchClass11SwitchStateE>
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	07 a0       	ldd	r0, Z+39	; 0x27
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <_ZN11SwitchClass10pollSwitchEv+0x3e>
     ece:	35 95       	asr	r19
     ed0:	27 95       	ror	r18
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <_ZN11SwitchClass10pollSwitchEv+0x3a>
     ed6:	21 70       	andi	r18, 0x01	; 1
     ed8:	22 8f       	std	Z+26, r18	; 0x1a
     eda:	08 95       	ret

00000edc <_ZN11SwitchClass16initializeSwitchEhhPS_>:
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	ec 01       	movw	r28, r24
     eea:	f6 2e       	mov	r15, r22
     eec:	e4 2e       	mov	r14, r20
     eee:	89 01       	movw	r16, r18
     ef0:	1f 86       	std	Y+15, r1	; 0x0f
     ef2:	1e 86       	std	Y+14, r1	; 0x0e
     ef4:	1b 8a       	std	Y+19, r1	; 0x13
     ef6:	1a 8a       	std	Y+18, r1	; 0x12
     ef8:	19 8a       	std	Y+17, r1	; 0x11
     efa:	18 8a       	std	Y+16, r1	; 0x10
     efc:	1d 8a       	std	Y+21, r1	; 0x15
     efe:	1c 8a       	std	Y+20, r1	; 0x14
     f00:	1f 8a       	std	Y+23, r1	; 0x17
     f02:	1e 8a       	std	Y+22, r1	; 0x16
     f04:	19 8e       	std	Y+25, r1	; 0x19
     f06:	18 8e       	std	Y+24, r1	; 0x18
     f08:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN10TimerClass15initializeTimerEv>
     f0c:	ef a2       	std	Y+39, r14	; 0x27
     f0e:	f8 a6       	std	Y+40, r15	; 0x28
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	6e 2d       	mov	r22, r14
     f14:	8f 2d       	mov	r24, r15
     f16:	0e 94 49 01 	call	0x292	; 0x292 <_Z15setPinDirectionhhb>
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	6f a1       	ldd	r22, Y+39	; 0x27
     f1e:	88 a5       	ldd	r24, Y+40	; 0x28
     f20:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z11setPinStatehhb>
     f24:	41 e0       	ldi	r20, 0x01	; 1
     f26:	6e 2d       	mov	r22, r14
     f28:	8f 2d       	mov	r24, r15
     f2a:	0e 94 9a 01 	call	0x334	; 0x334 <_Z21setPinChangeInterrupthhb>
     f2e:	88 a5       	ldd	r24, Y+40	; 0x28
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	41 f0       	breq	.+16     	; 0xf44 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x68>
     f34:	18 f0       	brcs	.+6      	; 0xf3c <_ZN11SwitchClass16initializeSwitchEhhPS_+0x60>
     f36:	82 30       	cpi	r24, 0x02	; 2
     f38:	49 f0       	breq	.+18     	; 0xf4c <_ZN11SwitchClass16initializeSwitchEhhPS_+0x70>
     f3a:	0b c0       	rjmp	.+22     	; 0xf52 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     f3c:	83 b1       	in	r24, 0x03	; 3
     f3e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <_ZN11SwitchClass11SwitchStateE>
     f42:	07 c0       	rjmp	.+14     	; 0xf52 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     f44:	86 b1       	in	r24, 0x06	; 6
     f46:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <_ZN11SwitchClass11SwitchStateE>
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <_ZN11SwitchClass16initializeSwitchEhhPS_+0x76>
     f4c:	89 b1       	in	r24, 0x09	; 9
     f4e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <_ZN11SwitchClass11SwitchStateE>
     f52:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <_ZN11SwitchClass1iE>
     f56:	e8 2f       	mov	r30, r24
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	e5 5e       	subi	r30, 0xE5	; 229
     f60:	fd 4f       	sbci	r31, 0xFD	; 253
     f62:	11 83       	std	Z+1, r17	; 0x01
     f64:	00 83       	st	Z, r16
     f66:	8e a3       	std	Y+38, r24	; 0x26
     f68:	8f 5f       	subi	r24, 0xFF	; 255
     f6a:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <_ZN11SwitchClass1iE>
     f6e:	ce 01       	movw	r24, r28
     f70:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN11SwitchClass16updatePinBuffersEv>
     f74:	ce 01       	movw	r24, r28
     f76:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN11SwitchClass10pollSwitchEv>
     f7a:	1f 8e       	std	Y+31, r1	; 0x1f
     f7c:	ce 01       	movw	r24, r28
     f7e:	0e 94 83 0a 	call	0x1506	; 0x1506 <_ZN10TimerClass10getTimerIDEv>
     f82:	89 a7       	std	Y+41, r24	; 0x29
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	08 95       	ret

00000f92 <_ZN11SwitchClass18processStateChangeEv>:
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ec 01       	movw	r28, r24
     f98:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN11SwitchClass10pollSwitchEv>
     f9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f9e:	81 11       	cpse	r24, r1
     fa0:	20 c0       	rjmp	.+64     	; 0xfe2 <_ZN11SwitchClass18processStateChangeEv+0x50>
     fa2:	89 a1       	ldd	r24, Y+33	; 0x21
     fa4:	88 23       	and	r24, r24
     fa6:	09 f4       	brne	.+2      	; 0xfaa <_ZN11SwitchClass18processStateChangeEv+0x18>
     fa8:	78 c0       	rjmp	.+240    	; 0x109a <_ZN11SwitchClass18processStateChangeEv+0x108>
     faa:	8b a1       	ldd	r24, Y+35	; 0x23
     fac:	81 11       	cpse	r24, r1
     fae:	08 c0       	rjmp	.+16     	; 0xfc0 <_ZN11SwitchClass18processStateChangeEv+0x2e>
     fb0:	2d ed       	ldi	r18, 0xDD	; 221
     fb2:	38 e0       	ldi	r19, 0x08	; 8
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	6c eb       	ldi	r22, 0xBC	; 188
     fb8:	72 e0       	ldi	r23, 0x02	; 2
     fba:	ce 01       	movw	r24, r28
     fbc:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	8a a3       	std	Y+34, r24	; 0x22
     fc4:	8b a1       	ldd	r24, Y+35	; 0x23
     fc6:	88 23       	and	r24, r24
     fc8:	41 f0       	breq	.+16     	; 0xfda <_ZN11SwitchClass18processStateChangeEv+0x48>
     fca:	68 e5       	ldi	r22, 0x58	; 88
     fcc:	72 e0       	ldi	r23, 0x02	; 2
     fce:	ce 01       	movw	r24, r28
     fd0:	0e 94 20 0a 	call	0x1440	; 0x1440 <_ZN10TimerClass7setTimeEj>
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	8c a3       	std	Y+36, r24	; 0x24
     fd8:	1b a2       	std	Y+35, r1	; 0x23
     fda:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fdc:	88 23       	and	r24, r24
     fde:	09 f4       	brne	.+2      	; 0xfe2 <_ZN11SwitchClass18processStateChangeEv+0x50>
     fe0:	5c c0       	rjmp	.+184    	; 0x109a <_ZN11SwitchClass18processStateChangeEv+0x108>
     fe2:	89 a1       	ldd	r24, Y+33	; 0x21
     fe4:	81 11       	cpse	r24, r1
     fe6:	59 c0       	rjmp	.+178    	; 0x109a <_ZN11SwitchClass18processStateChangeEv+0x108>
     fe8:	8c a1       	ldd	r24, Y+36	; 0x24
     fea:	81 11       	cpse	r24, r1
     fec:	06 c0       	rjmp	.+12     	; 0xffa <_ZN11SwitchClass18processStateChangeEv+0x68>
     fee:	ce 01       	movw	r24, r28
     ff0:	0e 94 18 0a 	call	0x1430	; 0x1430 <_ZN10TimerClass15getCallBackTimeEv>
     ff4:	9d a7       	std	Y+45, r25	; 0x2d
     ff6:	8c a7       	std	Y+44, r24	; 0x2c
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <_ZN11SwitchClass18processStateChangeEv+0x72>
     ffa:	ce 01       	movw	r24, r28
     ffc:	0e 94 2b 0a 	call	0x1456	; 0x1456 <_ZN10TimerClass7getTimeEv>
    1000:	9d a7       	std	Y+45, r25	; 0x2d
    1002:	8c a7       	std	Y+44, r24	; 0x2c
    1004:	ce 01       	movw	r24, r28
    1006:	0e 94 33 0a 	call	0x1466	; 0x1466 <_ZN10TimerClass10resetTimerEv>
    100a:	ce 01       	movw	r24, r28
    100c:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN10TimerClass18resetCallbackTimerEv>
    1010:	1a a2       	std	Y+34, r1	; 0x22
    1012:	8c a5       	ldd	r24, Y+44	; 0x2c
    1014:	9d a5       	ldd	r25, Y+45	; 0x2d
    1016:	0b 97       	sbiw	r24, 0x0b	; 11
    1018:	8d 34       	cpi	r24, 0x4D	; 77
    101a:	92 40       	sbci	r25, 0x02	; 2
    101c:	98 f5       	brcc	.+102    	; 0x1084 <_ZN11SwitchClass18processStateChangeEv+0xf2>
    101e:	8c a1       	ldd	r24, Y+36	; 0x24
    1020:	81 11       	cpse	r24, r1
    1022:	17 c0       	rjmp	.+46     	; 0x1052 <_ZN11SwitchClass18processStateChangeEv+0xc0>
    1024:	8d a1       	ldd	r24, Y+37	; 0x25
    1026:	81 11       	cpse	r24, r1
    1028:	2f c0       	rjmp	.+94     	; 0x1088 <_ZN11SwitchClass18processStateChangeEv+0xf6>
    102a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    102c:	88 23       	and	r24, r24
    102e:	59 f0       	breq	.+22     	; 0x1046 <_ZN11SwitchClass18processStateChangeEv+0xb4>
    1030:	25 e1       	ldi	r18, 0x15	; 21
    1032:	37 e0       	ldi	r19, 0x07	; 7
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	64 e6       	ldi	r22, 0x64	; 100
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	ce 01       	movw	r24, r28
    103c:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	8b a3       	std	Y+35, r24	; 0x23
    1044:	03 c0       	rjmp	.+6      	; 0x104c <_ZN11SwitchClass18processStateChangeEv+0xba>
    1046:	ce 01       	movw	r24, r28
    1048:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN11SwitchClass18doubleWaitCompleteEv>
    104c:	8c a1       	ldd	r24, Y+36	; 0x24
    104e:	88 23       	and	r24, r24
    1050:	09 f1       	breq	.+66     	; 0x1094 <_ZN11SwitchClass18processStateChangeEv+0x102>
    1052:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <_ZN11SwitchClass13AllSamePtr_ENE>
    1056:	88 23       	and	r24, r24
    1058:	61 f0       	breq	.+24     	; 0x1072 <_ZN11SwitchClass18processStateChangeEv+0xe0>
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    1060:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <_ZN11SwitchClass17AllDoublePressPtrE>
    1064:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <_ZN11SwitchClass17AllDoublePressPtrE+0x1>
    1068:	30 97       	sbiw	r30, 0x00	; 0
    106a:	61 f0       	breq	.+24     	; 0x1084 <_ZN11SwitchClass18processStateChangeEv+0xf2>
    106c:	8e a1       	ldd	r24, Y+38	; 0x26
    106e:	09 95       	icall
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <_ZN11SwitchClass18processStateChangeEv+0xf2>
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    1078:	ea 89       	ldd	r30, Y+18	; 0x12
    107a:	fb 89       	ldd	r31, Y+19	; 0x13
    107c:	30 97       	sbiw	r30, 0x00	; 0
    107e:	11 f0       	breq	.+4      	; 0x1084 <_ZN11SwitchClass18processStateChangeEv+0xf2>
    1080:	8e a1       	ldd	r24, Y+38	; 0x26
    1082:	09 95       	icall
    1084:	8d a1       	ldd	r24, Y+37	; 0x25
    1086:	81 11       	cpse	r24, r1
    1088:	1d a2       	std	Y+37, r1	; 0x25
    108a:	8c a1       	ldd	r24, Y+36	; 0x24
    108c:	88 23       	and	r24, r24
    108e:	29 f0       	breq	.+10     	; 0x109a <_ZN11SwitchClass18processStateChangeEv+0x108>
    1090:	1c a2       	std	Y+36, r1	; 0x24
    1092:	03 c0       	rjmp	.+6      	; 0x109a <_ZN11SwitchClass18processStateChangeEv+0x108>
    1094:	8d a1       	ldd	r24, Y+37	; 0x25
    1096:	81 11       	cpse	r24, r1
    1098:	f7 cf       	rjmp	.-18     	; 0x1088 <_ZN11SwitchClass18processStateChangeEv+0xf6>
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <_ZN11SwitchClass25callAllProcessStateChangeEv>:
    10a0:	cf 93       	push	r28
    10a2:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <_ZN11SwitchClass1iE>
    10a6:	88 23       	and	r24, r24
    10a8:	91 f0       	breq	.+36     	; 0x10ce <_ZN11SwitchClass25callAllProcessStateChangeEv+0x2e>
    10aa:	c0 e0       	ldi	r28, 0x00	; 0
    10ac:	ec 2f       	mov	r30, r28
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	e5 5e       	subi	r30, 0xE5	; 229
    10b6:	fd 4f       	sbci	r31, 0xFD	; 253
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	11 f0       	breq	.+4      	; 0x10c4 <_ZN11SwitchClass25callAllProcessStateChangeEv+0x24>
    10c0:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN11SwitchClass18processStateChangeEv>
    10c4:	cf 5f       	subi	r28, 0xFF	; 255
    10c6:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <_ZN11SwitchClass1iE>
    10ca:	c8 17       	cp	r28, r24
    10cc:	78 f3       	brcs	.-34     	; 0x10ac <_ZN11SwitchClass25callAllProcessStateChangeEv+0xc>
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <_ZN11SwitchClass16longWaitCompleteEv>:
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	ec 01       	movw	r28, r24
    10d8:	18 a2       	std	Y+32, r1	; 0x20
    10da:	1b a2       	std	Y+35, r1	; 0x23
    10dc:	1c a2       	std	Y+36, r1	; 0x24
    10de:	8d a1       	ldd	r24, Y+37	; 0x25
    10e0:	88 23       	and	r24, r24
    10e2:	89 f1       	breq	.+98     	; 0x1146 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10e4:	ce 01       	movw	r24, r28
    10e6:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN11SwitchClass16updatePinBuffersEv>
    10ea:	ce 01       	movw	r24, r28
    10ec:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN11SwitchClass10pollSwitchEv>
    10f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10f2:	81 11       	cpse	r24, r1
    10f4:	28 c0       	rjmp	.+80     	; 0x1146 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    10f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10f8:	81 11       	cpse	r24, r1
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <_ZN11SwitchClass16longWaitCompleteEv+0x32>
    10fc:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <_ZN11SwitchClass20AllContinuousLong_ENE>
    1100:	88 23       	and	r24, r24
    1102:	09 f1       	breq	.+66     	; 0x1146 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    1104:	2d ed       	ldi	r18, 0xDD	; 221
    1106:	38 e0       	ldi	r19, 0x08	; 8
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	66 e4       	ldi	r22, 0x46	; 70
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	ce 01       	movw	r24, r28
    1110:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    1114:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <_ZN11SwitchClass13AllSamePtr_ENE>
    1118:	88 23       	and	r24, r24
    111a:	61 f0       	breq	.+24     	; 0x1134 <_ZN11SwitchClass16longWaitCompleteEv+0x62>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    1122:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <_ZN11SwitchClass25AllContinuousLongPressPtrE>
    1126:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <_ZN11SwitchClass25AllContinuousLongPressPtrE+0x1>
    112a:	30 97       	sbiw	r30, 0x00	; 0
    112c:	61 f0       	breq	.+24     	; 0x1146 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    112e:	8e a1       	ldd	r24, Y+38	; 0x26
    1130:	09 95       	icall
    1132:	09 c0       	rjmp	.+18     	; 0x1146 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    113a:	ec 89       	ldd	r30, Y+20	; 0x14
    113c:	fd 89       	ldd	r31, Y+21	; 0x15
    113e:	30 97       	sbiw	r30, 0x00	; 0
    1140:	11 f0       	breq	.+4      	; 0x1146 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
    1142:	8e a1       	ldd	r24, Y+38	; 0x26
    1144:	09 95       	icall
    1146:	8a a1       	ldd	r24, Y+34	; 0x22
    1148:	88 23       	and	r24, r24
    114a:	a1 f1       	breq	.+104    	; 0x11b4 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    114c:	ce 01       	movw	r24, r28
    114e:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN11SwitchClass16updatePinBuffersEv>
    1152:	ce 01       	movw	r24, r28
    1154:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN11SwitchClass10pollSwitchEv>
    1158:	8a 8d       	ldd	r24, Y+26	; 0x1a
    115a:	81 11       	cpse	r24, r1
    115c:	2b c0       	rjmp	.+86     	; 0x11b4 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    115e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1160:	81 11       	cpse	r24, r1
    1162:	04 c0       	rjmp	.+8      	; 0x116c <_ZN11SwitchClass16longWaitCompleteEv+0x9a>
    1164:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <_ZN11SwitchClass10AllLong_ENE>
    1168:	88 23       	and	r24, r24
    116a:	21 f1       	breq	.+72     	; 0x11b4 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    116c:	1a a2       	std	Y+34, r1	; 0x22
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	8d a3       	std	Y+37, r24	; 0x25
    1172:	2d ed       	ldi	r18, 0xDD	; 221
    1174:	38 e0       	ldi	r19, 0x08	; 8
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	62 e3       	ldi	r22, 0x32	; 50
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	ce 01       	movw	r24, r28
    117e:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
    1182:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <_ZN11SwitchClass13AllSamePtr_ENE>
    1186:	88 23       	and	r24, r24
    1188:	61 f0       	breq	.+24     	; 0x11a2 <_ZN11SwitchClass16longWaitCompleteEv+0xd0>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    1190:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <_ZN11SwitchClass15AllLongPressPtrE>
    1194:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <_ZN11SwitchClass15AllLongPressPtrE+0x1>
    1198:	30 97       	sbiw	r30, 0x00	; 0
    119a:	61 f0       	breq	.+24     	; 0x11b4 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    119c:	8e a1       	ldd	r24, Y+38	; 0x26
    119e:	09 95       	icall
    11a0:	09 c0       	rjmp	.+18     	; 0x11b4 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    11a8:	e8 89       	ldd	r30, Y+16	; 0x10
    11aa:	f9 89       	ldd	r31, Y+17	; 0x11
    11ac:	30 97       	sbiw	r30, 0x00	; 0
    11ae:	11 f0       	breq	.+4      	; 0x11b4 <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
    11b0:	8e a1       	ldd	r24, Y+38	; 0x26
    11b2:	09 95       	icall
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	08 95       	ret

000011ba <_ZN11SwitchClass20callAllOjectLongWaitEh>:
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <_ZN11SwitchClass1iE>
    11c2:	99 23       	and	r25, r25
    11c4:	c1 f0       	breq	.+48     	; 0x11f6 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x3c>
    11c6:	d8 2f       	mov	r29, r24
    11c8:	c0 e0       	ldi	r28, 0x00	; 0
    11ca:	ec 2f       	mov	r30, r28
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	ee 0f       	add	r30, r30
    11d0:	ff 1f       	adc	r31, r31
    11d2:	e5 5e       	subi	r30, 0xE5	; 229
    11d4:	fd 4f       	sbci	r31, 0xFD	; 253
    11d6:	01 90       	ld	r0, Z+
    11d8:	f0 81       	ld	r31, Z
    11da:	e0 2d       	mov	r30, r0
    11dc:	91 a5       	ldd	r25, Z+41	; 0x29
    11de:	9d 13       	cpse	r25, r29
    11e0:	05 c0       	rjmp	.+10     	; 0x11ec <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    11e2:	30 97       	sbiw	r30, 0x00	; 0
    11e4:	19 f0       	breq	.+6      	; 0x11ec <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    11e6:	cf 01       	movw	r24, r30
    11e8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZN11SwitchClass16longWaitCompleteEv>
    11ec:	cf 5f       	subi	r28, 0xFF	; 255
    11ee:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <_ZN11SwitchClass1iE>
    11f2:	c9 17       	cp	r28, r25
    11f4:	50 f3       	brcs	.-44     	; 0x11ca <_ZN11SwitchClass20callAllOjectLongWaitEh+0x10>
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <__vector_1>:
}

ISR(INT0_vect){
    11fc:	1f 92       	push	r1
    11fe:	0f 92       	push	r0
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	0f 92       	push	r0
    1204:	11 24       	eor	r1, r1
    1206:	2f 93       	push	r18
    1208:	3f 93       	push	r19
    120a:	4f 93       	push	r20
    120c:	5f 93       	push	r21
    120e:	6f 93       	push	r22
    1210:	7f 93       	push	r23
    1212:	8f 93       	push	r24
    1214:	9f 93       	push	r25
    1216:	af 93       	push	r26
    1218:	bf 93       	push	r27
    121a:	ef 93       	push	r30
    121c:	ff 93       	push	r31
	Switch.PinBuffer[0] = PINB;
    121e:	83 b1       	in	r24, 0x03	; 3
    1220:	e6 e1       	ldi	r30, 0x16	; 22
    1222:	f2 e0       	ldi	r31, 0x02	; 2
    1224:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    1226:	86 b1       	in	r24, 0x06	; 6
    1228:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    122a:	89 b1       	in	r24, 0x09	; 9
    122c:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    122e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1238:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_2>:

ISR(INT1_vect){
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
	wakeUp();
    1280:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    128a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    128e:	ff 91       	pop	r31
    1290:	ef 91       	pop	r30
    1292:	bf 91       	pop	r27
    1294:	af 91       	pop	r26
    1296:	9f 91       	pop	r25
    1298:	8f 91       	pop	r24
    129a:	7f 91       	pop	r23
    129c:	6f 91       	pop	r22
    129e:	5f 91       	pop	r21
    12a0:	4f 91       	pop	r20
    12a2:	3f 91       	pop	r19
    12a4:	2f 91       	pop	r18
    12a6:	0f 90       	pop	r0
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	0f 90       	pop	r0
    12ac:	1f 90       	pop	r1
    12ae:	18 95       	reti

000012b0 <__vector_3>:

ISR(PCINT0_vect){
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_B);
	Switch.PinBuffer[0] = PINB;
    12d2:	83 b1       	in	r24, 0x03	; 3
    12d4:	e6 e1       	ldi	r30, 0x16	; 22
    12d6:	f2 e0       	ldi	r31, 0x02	; 2
    12d8:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    12da:	86 b1       	in	r24, 0x06	; 6
    12dc:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    12de:	89 b1       	in	r24, 0x09	; 9
    12e0:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    12e2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    12ec:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    12f0:	ff 91       	pop	r31
    12f2:	ef 91       	pop	r30
    12f4:	bf 91       	pop	r27
    12f6:	af 91       	pop	r26
    12f8:	9f 91       	pop	r25
    12fa:	8f 91       	pop	r24
    12fc:	7f 91       	pop	r23
    12fe:	6f 91       	pop	r22
    1300:	5f 91       	pop	r21
    1302:	4f 91       	pop	r20
    1304:	3f 91       	pop	r19
    1306:	2f 91       	pop	r18
    1308:	0f 90       	pop	r0
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	0f 90       	pop	r0
    130e:	1f 90       	pop	r1
    1310:	18 95       	reti

00001312 <__vector_4>:

ISR(PCINT1_vect){
    1312:	1f 92       	push	r1
    1314:	0f 92       	push	r0
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	0f 92       	push	r0
    131a:	11 24       	eor	r1, r1
    131c:	2f 93       	push	r18
    131e:	3f 93       	push	r19
    1320:	4f 93       	push	r20
    1322:	5f 93       	push	r21
    1324:	6f 93       	push	r22
    1326:	7f 93       	push	r23
    1328:	8f 93       	push	r24
    132a:	9f 93       	push	r25
    132c:	af 93       	push	r26
    132e:	bf 93       	push	r27
    1330:	ef 93       	push	r30
    1332:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_C);
	Switch.PinBuffer[0] = PINB;
    1334:	83 b1       	in	r24, 0x03	; 3
    1336:	e6 e1       	ldi	r30, 0x16	; 22
    1338:	f2 e0       	ldi	r31, 0x02	; 2
    133a:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    133c:	86 b1       	in	r24, 0x06	; 6
    133e:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    1340:	89 b1       	in	r24, 0x09	; 9
    1342:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1344:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    134e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
	Switch.pinStateChanged();
}
    1352:	ff 91       	pop	r31
    1354:	ef 91       	pop	r30
    1356:	bf 91       	pop	r27
    1358:	af 91       	pop	r26
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	7f 91       	pop	r23
    1360:	6f 91       	pop	r22
    1362:	5f 91       	pop	r21
    1364:	4f 91       	pop	r20
    1366:	3f 91       	pop	r19
    1368:	2f 91       	pop	r18
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <__vector_5>:

ISR(PCINT2_vect){
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	11 24       	eor	r1, r1
    137e:	2f 93       	push	r18
    1380:	3f 93       	push	r19
    1382:	4f 93       	push	r20
    1384:	5f 93       	push	r21
    1386:	6f 93       	push	r22
    1388:	7f 93       	push	r23
    138a:	8f 93       	push	r24
    138c:	9f 93       	push	r25
    138e:	af 93       	push	r26
    1390:	bf 93       	push	r27
    1392:	ef 93       	push	r30
    1394:	ff 93       	push	r31
	//Switch.PinStateChangePtr(PORT_D);
	Switch.PinBuffer[0] = PINB;
    1396:	83 b1       	in	r24, 0x03	; 3
    1398:	e6 e1       	ldi	r30, 0x16	; 22
    139a:	f2 e0       	ldi	r31, 0x02	; 2
    139c:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    139e:	86 b1       	in	r24, 0x06	; 6
    13a0:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    13a2:	89 b1       	in	r24, 0x09	; 9
    13a4:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    13a6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    13b0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    13b4:	ff 91       	pop	r31
    13b6:	ef 91       	pop	r30
    13b8:	bf 91       	pop	r27
    13ba:	af 91       	pop	r26
    13bc:	9f 91       	pop	r25
    13be:	8f 91       	pop	r24
    13c0:	7f 91       	pop	r23
    13c2:	6f 91       	pop	r22
    13c4:	5f 91       	pop	r21
    13c6:	4f 91       	pop	r20
    13c8:	3f 91       	pop	r19
    13ca:	2f 91       	pop	r18
    13cc:	0f 90       	pop	r0
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	0f 90       	pop	r0
    13d2:	1f 90       	pop	r1
    13d4:	18 95       	reti

000013d6 <_ZN10TimerClass5beginEv>:
}


uint64_t TimerClass::millis(){
	return Time;
}
    13d6:	60 e4       	ldi	r22, 0x40	; 64
    13d8:	7f e1       	ldi	r23, 0x1F	; 31
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z11Init_CTC_T1hj>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <_ZN10TimerClass1iE>
    13e6:	08 95       	ret

000013e8 <_ZN10TimerClass15initializeTimerEv>:
    13e8:	dc 01       	movw	r26, r24
    13ea:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <_ZN10TimerClass1iE>
    13ee:	e9 2f       	mov	r30, r25
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	e0 5d       	subi	r30, 0xD0	; 208
    13f8:	fd 4f       	sbci	r31, 0xFD	; 253
    13fa:	b1 83       	std	Z+1, r27	; 0x01
    13fc:	a0 83       	st	Z, r26
    13fe:	15 96       	adiw	r26, 0x05	; 5
    1400:	9c 93       	st	X, r25
    1402:	9f 5f       	subi	r25, 0xFF	; 255
    1404:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <_ZN10TimerClass1iE>
    1408:	08 95       	ret

0000140a <_ZN10TimerClass15setCallBackTimeEjhPFvhE>:
    140a:	fc 01       	movw	r30, r24
    140c:	71 83       	std	Z+1, r23	; 0x01
    140e:	60 83       	st	Z, r22
    1410:	73 83       	std	Z+3, r23	; 0x03
    1412:	62 83       	std	Z+2, r22	; 0x02
    1414:	35 87       	std	Z+13, r19	; 0x0d
    1416:	24 87       	std	Z+12, r18	; 0x0c
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	83 87       	std	Z+11, r24	; 0x0b
    141c:	44 83       	std	Z+4, r20	; 0x04
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    1424:	08 95       	ret

00001426 <_ZN10TimerClass18resetCallbackTimerEv>:
    1426:	fc 01       	movw	r30, r24
    1428:	13 86       	std	Z+11, r1	; 0x0b
    142a:	11 82       	std	Z+1, r1	; 0x01
    142c:	10 82       	st	Z, r1
    142e:	08 95       	ret

00001430 <_ZN10TimerClass15getCallBackTimeEv>:
    1430:	fc 01       	movw	r30, r24
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	20 81       	ld	r18, Z
    1438:	31 81       	ldd	r19, Z+1	; 0x01
    143a:	82 1b       	sub	r24, r18
    143c:	93 0b       	sbc	r25, r19
    143e:	08 95       	ret

00001440 <_ZN10TimerClass7setTimeEj>:
    1440:	fc 01       	movw	r30, r24
    1442:	77 83       	std	Z+7, r23	; 0x07
    1444:	66 83       	std	Z+6, r22	; 0x06
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	82 87       	std	Z+10, r24	; 0x0a
    144a:	71 87       	std	Z+9, r23	; 0x09
    144c:	60 87       	std	Z+8, r22	; 0x08
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    1454:	08 95       	ret

00001456 <_ZN10TimerClass7getTimeEv>:
    1456:	fc 01       	movw	r30, r24
    1458:	80 85       	ldd	r24, Z+8	; 0x08
    145a:	91 85       	ldd	r25, Z+9	; 0x09
    145c:	26 81       	ldd	r18, Z+6	; 0x06
    145e:	37 81       	ldd	r19, Z+7	; 0x07
    1460:	82 1b       	sub	r24, r18
    1462:	93 0b       	sbc	r25, r19
    1464:	08 95       	ret

00001466 <_ZN10TimerClass10resetTimerEv>:
    1466:	fc 01       	movw	r30, r24
    1468:	17 82       	std	Z+7, r1	; 0x07
    146a:	16 82       	std	Z+6, r1	; 0x06
    146c:	12 86       	std	Z+10, r1	; 0x0a
    146e:	08 95       	ret

00001470 <_ZN10TimerClass11milliPassedEv>:

void TimerClass::milliPassed(){
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	ec 01       	movw	r28, r24
	if(Count_EN){
    1476:	8b 85       	ldd	r24, Y+11	; 0x0b
    1478:	88 23       	and	r24, r24
    147a:	e1 f0       	breq	.+56     	; 0x14b4 <_ZN10TimerClass11milliPassedEv+0x44>
		#ifdef DEBUG_TIMER
		//printChar('T');
		#endif
		if(Count)
    147c:	88 81       	ld	r24, Y
    147e:	99 81       	ldd	r25, Y+1	; 0x01
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	29 f0       	breq	.+10     	; 0x148e <_ZN10TimerClass11milliPassedEv+0x1e>
		Count -= 1;
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	99 83       	std	Y+1, r25	; 0x01
    1488:	88 83       	st	Y, r24
		if(!Count){
    148a:	89 2b       	or	r24, r25
    148c:	99 f4       	brne	.+38     	; 0x14b4 <_ZN10TimerClass11milliPassedEv+0x44>
			if(Mode == TIMER_MODE_REPEAT){
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	29 f4       	brne	.+10     	; 0x149e <_ZN10TimerClass11milliPassedEv+0x2e>
				Count = Count_Save;
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	9b 81       	ldd	r25, Y+3	; 0x03
    1498:	99 83       	std	Y+1, r25	; 0x01
    149a:	88 83       	st	Y, r24
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <_ZN10TimerClass11milliPassedEv+0x38>
			}
			if(Mode == TIMER_MODE_ONCE){
    149e:	81 11       	cpse	r24, r1
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <_ZN10TimerClass11milliPassedEv+0x38>
				Count_EN = 0;
    14a2:	1b 86       	std	Y+11, r1	; 0x0b
				Count = 0;
    14a4:	19 82       	std	Y+1, r1	; 0x01
    14a6:	18 82       	st	Y, r1
			}
			if(CallBackPtr != NULL){
    14a8:	ec 85       	ldd	r30, Y+12	; 0x0c
    14aa:	fd 85       	ldd	r31, Y+13	; 0x0d
    14ac:	30 97       	sbiw	r30, 0x00	; 0
    14ae:	11 f0       	breq	.+4      	; 0x14b4 <_ZN10TimerClass11milliPassedEv+0x44>
				#ifdef DEBUG_TIMER
				printStringCRNL("Timer Done : ");
				printNumber(Timer_ID);
				#endif
				//allowSleep(1);
				CallBackPtr(Timer_ID);
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	09 95       	icall
			}
		}
	}
	if(NCount_EN){
    14b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    14b6:	88 23       	and	r24, r24
    14b8:	51 f0       	breq	.+20     	; 0x14ce <_ZN10TimerClass11milliPassedEv+0x5e>
		if(NCount)
    14ba:	8e 81       	ldd	r24, Y+6	; 0x06
    14bc:	9f 81       	ldd	r25, Y+7	; 0x07
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	29 f0       	breq	.+10     	; 0x14cc <_ZN10TimerClass11milliPassedEv+0x5c>
		NCount -= 1;
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	9f 83       	std	Y+7, r25	; 0x07
    14c6:	8e 83       	std	Y+6, r24	; 0x06
		if(!NCount){
    14c8:	89 2b       	or	r24, r25
    14ca:	09 f4       	brne	.+2      	; 0x14ce <_ZN10TimerClass11milliPassedEv+0x5e>
			NCount_EN = 0;
    14cc:	1a 86       	std	Y+10, r1	; 0x0a
		}
	}
}
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <_ZN10TimerClass19callAllTimerObjectsEv>:

void TimerClass::callAllTimerObjects(){
    14d4:	cf 93       	push	r28
	for(uint8_t a = 0; a < i; a += 1){
    14d6:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <_ZN10TimerClass1iE>
    14da:	88 23       	and	r24, r24
    14dc:	91 f0       	breq	.+36     	; 0x1502 <_ZN10TimerClass19callAllTimerObjectsEv+0x2e>
    14de:	c0 e0       	ldi	r28, 0x00	; 0
		if(Timers[a] != NULL)
    14e0:	ec 2f       	mov	r30, r28
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	ee 0f       	add	r30, r30
    14e6:	ff 1f       	adc	r31, r31
    14e8:	e0 5d       	subi	r30, 0xD0	; 208
    14ea:	fd 4f       	sbci	r31, 0xFD	; 253
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	11 f0       	breq	.+4      	; 0x14f8 <_ZN10TimerClass19callAllTimerObjectsEv+0x24>
		Timers[a]->milliPassed();
    14f4:	0e 94 38 0a 	call	0x1470	; 0x1470 <_ZN10TimerClass11milliPassedEv>
		}
	}
}

void TimerClass::callAllTimerObjects(){
	for(uint8_t a = 0; a < i; a += 1){
    14f8:	cf 5f       	subi	r28, 0xFF	; 255
    14fa:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <_ZN10TimerClass1iE>
    14fe:	c8 17       	cp	r28, r24
    1500:	78 f3       	brcs	.-34     	; 0x14e0 <_ZN10TimerClass19callAllTimerObjectsEv+0xc>
		if(Timers[a] != NULL)
		Timers[a]->milliPassed();
	}
}
    1502:	cf 91       	pop	r28
    1504:	08 95       	ret

00001506 <_ZN10TimerClass10getTimerIDEv>:

uint8_t TimerClass::getTimerID(){
	return Timer_ID;
}
    1506:	fc 01       	movw	r30, r24
    1508:	85 81       	ldd	r24, Z+5	; 0x05
    150a:	08 95       	ret

0000150c <__vector_11>:



ISR(TIMER1_COMPA_vect){
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	2f 93       	push	r18
    1518:	3f 93       	push	r19
    151a:	4f 93       	push	r20
    151c:	5f 93       	push	r21
    151e:	6f 93       	push	r22
    1520:	7f 93       	push	r23
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	af 93       	push	r26
    1528:	bf 93       	push	r27
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
	//printChar('I');
	milliHappened();
    152e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_Z13milliHappenedv>
	Timer.Time += 1;
    1532:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <_ZN10TimerClass4TimeE>
    1536:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <_ZN10TimerClass4TimeE+0x1>
    153a:	40 91 2a 02 	lds	r20, 0x022A	; 0x80022a <_ZN10TimerClass4TimeE+0x2>
    153e:	50 91 2b 02 	lds	r21, 0x022B	; 0x80022b <_ZN10TimerClass4TimeE+0x3>
    1542:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <_ZN10TimerClass4TimeE+0x4>
    1546:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <_ZN10TimerClass4TimeE+0x5>
    154a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <_ZN10TimerClass4TimeE+0x6>
    154e:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <_ZN10TimerClass4TimeE+0x7>
    1552:	a1 e0       	ldi	r26, 0x01	; 1
    1554:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__adddi3_s8>
    1558:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <_ZN10TimerClass4TimeE>
    155c:	30 93 29 02 	sts	0x0229, r19	; 0x800229 <_ZN10TimerClass4TimeE+0x1>
    1560:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <_ZN10TimerClass4TimeE+0x2>
    1564:	50 93 2b 02 	sts	0x022B, r21	; 0x80022b <_ZN10TimerClass4TimeE+0x3>
    1568:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <_ZN10TimerClass4TimeE+0x4>
    156c:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <_ZN10TimerClass4TimeE+0x5>
    1570:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <_ZN10TimerClass4TimeE+0x6>
    1574:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <_ZN10TimerClass4TimeE+0x7>
	Timer.callAllTimerObjects();
    1578:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN10TimerClass19callAllTimerObjectsEv>
	//printChar('O');
}
    157c:	ff 91       	pop	r31
    157e:	ef 91       	pop	r30
    1580:	bf 91       	pop	r27
    1582:	af 91       	pop	r26
    1584:	9f 91       	pop	r25
    1586:	8f 91       	pop	r24
    1588:	7f 91       	pop	r23
    158a:	6f 91       	pop	r22
    158c:	5f 91       	pop	r21
    158e:	4f 91       	pop	r20
    1590:	3f 91       	pop	r19
    1592:	2f 91       	pop	r18
    1594:	0f 90       	pop	r0
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	0f 90       	pop	r0
    159a:	1f 90       	pop	r1
    159c:	18 95       	reti

0000159e <_Z13switchPressedh>:
void portStateChange(uint8_t PortNo){
	printStringCRNL("Pin state changed");
	if(PortNo == PORT_C){
		setPinState(PORT_C, 2, getPinState(PORT_C, 0));
	}
}
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <SwitchPressedFlag>
    15a4:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <SwitchID>
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    15ae:	08 95       	ret

000015b0 <_Z9timerDoneh>:
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <TimeOut>
    15b6:	5a 98       	cbi	0x0b, 2	; 11
    15b8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
    15bc:	08 95       	ret

000015be <_Z8runSetupv>:

void runSetup(){
	
	//USART_Init(MYUBRR);
	Init_CTC_T1(2,1000);
    15be:	68 ee       	ldi	r22, 0xE8	; 232
    15c0:	73 e0       	ldi	r23, 0x03	; 3
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z11Init_CTC_T1hj>
	SPI_MasterInit();
    15c8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z14SPI_MasterInitv>
	setPinDirection(PORT_D, 2, 1);
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	62 e0       	ldi	r22, 0x02	; 2
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	0e 94 49 01 	call	0x292	; 0x292 <_Z15setPinDirectionhhb>
    15d6:	08 95       	ret

000015d8 <main>:
TimerClass Timer1, Timer2;
SwitchClass S1, S2, S3, S4, S5, S6;


int main(void)
{
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	29 97       	sbiw	r28, 0x09	; 9
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
	runSetup();
    15ec:	0e 94 df 0a 	call	0x15be	; 0x15be <_Z8runSetupv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15f0:	2f ef       	ldi	r18, 0xFF	; 255
    15f2:	84 e3       	ldi	r24, 0x34	; 52
    15f4:	9c e0       	ldi	r25, 0x0C	; 12
    15f6:	21 50       	subi	r18, 0x01	; 1
    15f8:	80 40       	sbci	r24, 0x00	; 0
    15fa:	90 40       	sbci	r25, 0x00	; 0
    15fc:	e1 f7       	brne	.-8      	; 0x15f6 <main+0x1e>
    15fe:	00 c0       	rjmp	.+0      	; 0x1600 <main+0x28>
    1600:	00 00       	nop
	_delay_ms(500);
	Notify(PSTR("Powering on..."));
    1602:	8d e4       	ldi	r24, 0x4D	; 77
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z6NotifyPKc>
	sei();
    160a:	78 94       	sei
	TimeOut = false;
    160c:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <TimeOut>
	NRF24L01 Radio(1,1,0);
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	61 e0       	ldi	r22, 0x01	; 1
    1616:	ce 01       	movw	r24, r28
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	0e 94 be 06 	call	0xd7c	; 0xd7c <_ZN8NRF24L01C1Ehhb>
	Timer1.begin();
    161e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN10TimerClass5beginEv>
	Timer1.initializeTimer();
    1622:	8e e8       	ldi	r24, 0x8E	; 142
    1624:	93 e0       	ldi	r25, 0x03	; 3
    1626:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN10TimerClass15initializeTimerEv>
	Timer2.initializeTimer();
    162a:	80 e8       	ldi	r24, 0x80	; 128
    162c:	93 e0       	ldi	r25, 0x03	; 3
    162e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN10TimerClass15initializeTimerEv>
	Timer1.setCallBackTime(100, 0, timerDone);
    1632:	28 ed       	ldi	r18, 0xD8	; 216
    1634:	3a e0       	ldi	r19, 0x0A	; 10
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	64 e6       	ldi	r22, 0x64	; 100
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	8e e8       	ldi	r24, 0x8E	; 142
    163e:	93 e0       	ldi	r25, 0x03	; 3
    1640:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
	S1.begin();
    1644:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN11SwitchClass5beginEv>
	S1.initializeSwitch(PORT_B, 0, &S1); //1
    1648:	22 e5       	ldi	r18, 0x52	; 82
    164a:	33 e0       	ldi	r19, 0x03	; 3
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	c9 01       	movw	r24, r18
    1652:	0e 94 6e 07 	call	0xedc	; 0xedc <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S2.initializeSwitch(PORT_B, 6, &S2); //0
    1656:	24 e2       	ldi	r18, 0x24	; 36
    1658:	33 e0       	ldi	r19, 0x03	; 3
    165a:	46 e0       	ldi	r20, 0x06	; 6
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	c9 01       	movw	r24, r18
    1660:	0e 94 6e 07 	call	0xedc	; 0xedc <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S3.initializeSwitch(PORT_B, 1, &S3); //6
    1664:	26 ef       	ldi	r18, 0xF6	; 246
    1666:	32 e0       	ldi	r19, 0x02	; 2
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	c9 01       	movw	r24, r18
    166e:	0e 94 6e 07 	call	0xedc	; 0xedc <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S4.initializeSwitch(PORT_B, 7, &S4);
    1672:	28 ec       	ldi	r18, 0xC8	; 200
    1674:	32 e0       	ldi	r19, 0x02	; 2
    1676:	47 e0       	ldi	r20, 0x07	; 7
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	c9 01       	movw	r24, r18
    167c:	0e 94 6e 07 	call	0xedc	; 0xedc <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S5.initializeSwitch(PORT_D, 6, &S5);
    1680:	2a e9       	ldi	r18, 0x9A	; 154
    1682:	32 e0       	ldi	r19, 0x02	; 2
    1684:	46 e0       	ldi	r20, 0x06	; 6
    1686:	62 e0       	ldi	r22, 0x02	; 2
    1688:	c9 01       	movw	r24, r18
    168a:	0e 94 6e 07 	call	0xedc	; 0xedc <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S6.initializeSwitch(PORT_D, 7, &S6);
    168e:	2c e6       	ldi	r18, 0x6C	; 108
    1690:	32 e0       	ldi	r19, 0x02	; 2
    1692:	47 e0       	ldi	r20, 0x07	; 7
    1694:	62 e0       	ldi	r22, 0x02	; 2
    1696:	c9 01       	movw	r24, r18
    1698:	0e 94 6e 07 	call	0xedc	; 0xedc <_ZN11SwitchClass16initializeSwitchEhhPS_>
	S1.shortPress(switchPressed);
    169c:	6f ec       	ldi	r22, 0xCF	; 207
    169e:	7a e0       	ldi	r23, 0x0A	; 10
    16a0:	82 e5       	ldi	r24, 0x52	; 82
    16a2:	93 e0       	ldi	r25, 0x03	; 3
    16a4:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN11SwitchClass10shortPressEPFvhE>
	S1.enableSamePtrMode(true);
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	0e 94 36 07 	call	0xe6c	; 0xe6c <_ZN11SwitchClass17enableSamePtrModeEb>
	Notify(PSTR("Done"));
    16ae:	88 e4       	ldi	r24, 0x48	; 72
    16b0:	91 e0       	ldi	r25, 0x01	; 1
    16b2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_Z6NotifyPKc>
	allowSleep(true);
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z10allowSleepb>
	if(Radio.isRT_Max_Set())
    16bc:	ce 01       	movw	r24, r28
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	0e 94 2e 04 	call	0x85c	; 0x85c <_ZN8NRF24L0112isRT_Max_SetEv>
    16c4:	88 23       	and	r24, r24
    16c6:	21 f0       	breq	.+8      	; 0x16d0 <main+0xf8>
	Radio.clearRT_Max();
    16c8:	ce 01       	movw	r24, r28
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZN8NRF24L0111clearRT_MaxEv>
	if(Radio.isTXFull())
    16d0:	ce 01       	movw	r24, r28
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	0e 94 20 04 	call	0x840	; 0x840 <_ZN8NRF24L018isTXFullEv>
    16d8:	88 23       	and	r24, r24
    16da:	21 f0       	breq	.+8      	; 0x16e4 <main+0x10c>
	Radio.flushTX();
    16dc:	ce 01       	movw	r24, r28
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZN8NRF24L017flushTXEv>
	if(Radio.isTX_DS_Set())
    16e4:	ce 01       	movw	r24, r28
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN8NRF24L0111isTX_DS_SetEv>
    16ec:	88 23       	and	r24, r24
    16ee:	21 f0       	breq	.+8      	; 0x16f8 <main+0x120>
	Radio.clearTX_DS();
    16f0:	ce 01       	movw	r24, r28
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	0e 94 81 05 	call	0xb02	; 0xb02 <_ZN8NRF24L0110clearTX_DSEv>
	while (1)
	{	
		if(SwitchPressedFlag){
    16f8:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <SwitchPressedFlag>
    16fc:	88 23       	and	r24, r24
    16fe:	09 f4       	brne	.+2      	; 0x1702 <main+0x12a>
    1700:	82 c0       	rjmp	.+260    	; 0x1806 <main+0x22e>
			SwitchPressedFlag = false;
    1702:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <SwitchPressedFlag>
			#ifdef STATS
			printStringCRNL("Switch Pressed: ");
    1706:	8f e6       	ldi	r24, 0x6F	; 111
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	0e 94 0f 03 	call	0x61e	; 0x61e <_Z15printStringCRNLPKc>
			printNumber(SwitchID);
    170e:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <SwitchID>
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_Z11printNumbery>
			#endif
			if(SwitchID < 4){
    1724:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <SwitchID>
    1728:	84 30       	cpi	r24, 0x04	; 4
    172a:	40 f4       	brcc	.+16     	; 0x173c <main+0x164>
				Radio.fastTransferPayload(SwitchID + 1);
    172c:	60 91 9e 03 	lds	r22, 0x039E	; 0x80039e <SwitchID>
    1730:	6f 5f       	subi	r22, 0xFF	; 255
    1732:	ce 01       	movw	r24, r28
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN8NRF24L0119fastTransferPayloadEh>
    173a:	0f c0       	rjmp	.+30     	; 0x175a <main+0x182>
			}
			else
			{
				if(SwitchID == 0x05)
    173c:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <SwitchID>
    1740:	85 30       	cpi	r24, 0x05	; 5
    1742:	31 f4       	brne	.+12     	; 0x1750 <main+0x178>
				Radio.fastTransferPayload(0xD1);
    1744:	61 ed       	ldi	r22, 0xD1	; 209
    1746:	ce 01       	movw	r24, r28
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN8NRF24L0119fastTransferPayloadEh>
    174e:	05 c0       	rjmp	.+10     	; 0x175a <main+0x182>
				else
				Radio.fastTransferPayload(0xD0);
    1750:	60 ed       	ldi	r22, 0xD0	; 208
    1752:	ce 01       	movw	r24, r28
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN8NRF24L0119fastTransferPayloadEh>
			}
			TimeOut = false;
    175a:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <TimeOut>
			Timer2.setCallBackTime(50, 0, timerDone);
    175e:	28 ed       	ldi	r18, 0xD8	; 216
    1760:	3a e0       	ldi	r19, 0x0A	; 10
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	62 e3       	ldi	r22, 0x32	; 50
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	80 e8       	ldi	r24, 0x80	; 128
    176a:	93 e0       	ldi	r25, 0x03	; 3
    176c:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
			while(Radio.isTX_DS_Set() != 0x20 && !TimeOut){
    1770:	ce 01       	movw	r24, r28
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN8NRF24L0111isTX_DS_SetEv>
    1778:	80 32       	cpi	r24, 0x20	; 32
    177a:	09 f4       	brne	.+2      	; 0x177e <main+0x1a6>
    177c:	67 c0       	rjmp	.+206    	; 0x184c <main+0x274>
    177e:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <TimeOut>
    1782:	81 11       	cpse	r24, r1
    1784:	63 c0       	rjmp	.+198    	; 0x184c <main+0x274>
    1786:	f4 cf       	rjmp	.-24     	; 0x1770 <main+0x198>
				
			}
			if(Radio.isTX_DS_Set() == 0x20){
				LED = 1;
    1788:	5a 9a       	sbi	0x0b, 2	; 11
				Radio.clearTX_DS();
    178a:	ce 01       	movw	r24, r28
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	0e 94 81 05 	call	0xb02	; 0xb02 <_ZN8NRF24L0110clearTX_DSEv>
				Timer1.setCallBackTime(200, 0, timerDone);
    1792:	28 ed       	ldi	r18, 0xD8	; 216
    1794:	3a e0       	ldi	r19, 0x0A	; 10
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	68 ec       	ldi	r22, 0xC8	; 200
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	8e e8       	ldi	r24, 0x8E	; 142
    179e:	93 e0       	ldi	r25, 0x03	; 3
    17a0:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
				Timer2.resetCallbackTimer();
    17a4:	80 e8       	ldi	r24, 0x80	; 128
    17a6:	93 e0       	ldi	r25, 0x03	; 3
    17a8:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN10TimerClass18resetCallbackTimerEv>
				#ifdef STATS
				printStringCRNL("Payload transmitted.");
    17ac:	80 e8       	ldi	r24, 0x80	; 128
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	0e 94 0f 03 	call	0x61e	; 0x61e <_Z15printStringCRNLPKc>
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <main+0x1ea>
				#endif
				//Radio.flushTX();
			}
			else{
				TimeOut = false;
    17b6:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <TimeOut>
				//Radio.flushTX();
				#ifdef STATS
				printStringCRNL("Timed out");
    17ba:	85 e9       	ldi	r24, 0x95	; 149
    17bc:	91 e0       	ldi	r25, 0x01	; 1
    17be:	0e 94 0f 03 	call	0x61e	; 0x61e <_Z15printStringCRNLPKc>
				#endif
			}
			if(Radio.isRT_Max_Set())
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	0e 94 2e 04 	call	0x85c	; 0x85c <_ZN8NRF24L0112isRT_Max_SetEv>
    17ca:	88 23       	and	r24, r24
    17cc:	21 f0       	breq	.+8      	; 0x17d6 <main+0x1fe>
			Radio.clearRT_Max();
    17ce:	ce 01       	movw	r24, r28
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZN8NRF24L0111clearRT_MaxEv>
			if(Radio.isTXFull())
    17d6:	ce 01       	movw	r24, r28
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	0e 94 20 04 	call	0x840	; 0x840 <_ZN8NRF24L018isTXFullEv>
    17de:	88 23       	and	r24, r24
    17e0:	21 f0       	breq	.+8      	; 0x17ea <main+0x212>
			Radio.flushTX();
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZN8NRF24L017flushTXEv>
			if(Radio.isTX_DS_Set())
    17ea:	ce 01       	movw	r24, r28
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN8NRF24L0111isTX_DS_SetEv>
    17f2:	88 23       	and	r24, r24
    17f4:	21 f0       	breq	.+8      	; 0x17fe <main+0x226>
			Radio.clearTX_DS();
    17f6:	ce 01       	movw	r24, r28
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	0e 94 81 05 	call	0xb02	; 0xb02 <_ZN8NRF24L0110clearTX_DSEv>
			#ifdef STATS
			Radio.printInfo();
    17fe:	ce 01       	movw	r24, r28
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN8NRF24L019printInfoEv>
			#endif
		}
		if(sleepAllowed()){
    1806:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z12sleepAllowedv>
    180a:	88 23       	and	r24, r24
    180c:	09 f4       	brne	.+2      	; 0x1810 <main+0x238>
    180e:	74 cf       	rjmp	.-280    	; 0x16f8 <main+0x120>
			#ifdef STATS
			printStringCRNL("Sleeping...");
    1810:	8f e9       	ldi	r24, 0x9F	; 159
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	0e 94 0f 03 	call	0x61e	; 0x61e <_Z15printStringCRNLPKc>
			#endif
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1818:	83 b7       	in	r24, 0x33	; 51
    181a:	81 7f       	andi	r24, 0xF1	; 241
    181c:	84 60       	ori	r24, 0x04	; 4
    181e:	83 bf       	out	0x33, r24	; 51
			sleep_enable();
    1820:	83 b7       	in	r24, 0x33	; 51
    1822:	81 60       	ori	r24, 0x01	; 1
    1824:	83 bf       	out	0x33, r24	; 51
			sei();
    1826:	78 94       	sei
			getReadyToSleep();
    1828:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z15getReadyToSleepv>
			CE = 0;
    182c:	40 98       	cbi	0x08, 0	; 8
			sleep_mode();
    182e:	83 b7       	in	r24, 0x33	; 51
    1830:	81 60       	ori	r24, 0x01	; 1
    1832:	83 bf       	out	0x33, r24	; 51
    1834:	88 95       	sleep
    1836:	83 b7       	in	r24, 0x33	; 51
    1838:	8e 7f       	andi	r24, 0xFE	; 254
    183a:	83 bf       	out	0x33, r24	; 51
			CE = 1;
    183c:	40 9a       	sbi	0x08, 0	; 8
    183e:	8f e3       	ldi	r24, 0x3F	; 63
    1840:	9c e9       	ldi	r25, 0x9C	; 156
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <main+0x26a>
    1846:	00 c0       	rjmp	.+0      	; 0x1848 <main+0x270>
    1848:	00 00       	nop
    184a:	56 cf       	rjmp	.-340    	; 0x16f8 <main+0x120>
			TimeOut = false;
			Timer2.setCallBackTime(50, 0, timerDone);
			while(Radio.isTX_DS_Set() != 0x20 && !TimeOut){
				
			}
			if(Radio.isTX_DS_Set() == 0x20){
    184c:	ce 01       	movw	r24, r28
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN8NRF24L0111isTX_DS_SetEv>
    1854:	80 32       	cpi	r24, 0x20	; 32
    1856:	09 f0       	breq	.+2      	; 0x185a <main+0x282>
    1858:	ae cf       	rjmp	.-164    	; 0x17b6 <main+0x1de>
    185a:	96 cf       	rjmp	.-212    	; 0x1788 <main+0x1b0>

0000185c <__umoddi3>:
    185c:	68 94       	set
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <__udivdi3_umoddi3>

00001860 <__udivdi3>:
    1860:	e8 94       	clt

00001862 <__udivdi3_umoddi3>:
    1862:	8f 92       	push	r8
    1864:	9f 92       	push	r9
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__udivmod64>
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	9f 90       	pop	r9
    1874:	8f 90       	pop	r8
    1876:	08 95       	ret

00001878 <__udivmod64>:
    1878:	88 24       	eor	r8, r8
    187a:	99 24       	eor	r9, r9
    187c:	f4 01       	movw	r30, r8
    187e:	e4 01       	movw	r28, r8
    1880:	b0 e4       	ldi	r27, 0x40	; 64
    1882:	9f 93       	push	r25
    1884:	aa 27       	eor	r26, r26
    1886:	9a 15       	cp	r25, r10
    1888:	8b 04       	cpc	r8, r11
    188a:	9c 04       	cpc	r9, r12
    188c:	ed 05       	cpc	r30, r13
    188e:	fe 05       	cpc	r31, r14
    1890:	cf 05       	cpc	r28, r15
    1892:	d0 07       	cpc	r29, r16
    1894:	a1 07       	cpc	r26, r17
    1896:	98 f4       	brcc	.+38     	; 0x18be <__udivmod64+0x46>
    1898:	ad 2f       	mov	r26, r29
    189a:	dc 2f       	mov	r29, r28
    189c:	cf 2f       	mov	r28, r31
    189e:	fe 2f       	mov	r31, r30
    18a0:	e9 2d       	mov	r30, r9
    18a2:	98 2c       	mov	r9, r8
    18a4:	89 2e       	mov	r8, r25
    18a6:	98 2f       	mov	r25, r24
    18a8:	87 2f       	mov	r24, r23
    18aa:	76 2f       	mov	r23, r22
    18ac:	65 2f       	mov	r22, r21
    18ae:	54 2f       	mov	r21, r20
    18b0:	43 2f       	mov	r20, r19
    18b2:	32 2f       	mov	r19, r18
    18b4:	22 27       	eor	r18, r18
    18b6:	b8 50       	subi	r27, 0x08	; 8
    18b8:	31 f7       	brne	.-52     	; 0x1886 <__udivmod64+0xe>
    18ba:	bf 91       	pop	r27
    18bc:	27 c0       	rjmp	.+78     	; 0x190c <__udivmod64+0x94>
    18be:	1b 2e       	mov	r1, r27
    18c0:	bf 91       	pop	r27
    18c2:	bb 27       	eor	r27, r27
    18c4:	22 0f       	add	r18, r18
    18c6:	33 1f       	adc	r19, r19
    18c8:	44 1f       	adc	r20, r20
    18ca:	55 1f       	adc	r21, r21
    18cc:	66 1f       	adc	r22, r22
    18ce:	77 1f       	adc	r23, r23
    18d0:	88 1f       	adc	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	88 1c       	adc	r8, r8
    18d6:	99 1c       	adc	r9, r9
    18d8:	ee 1f       	adc	r30, r30
    18da:	ff 1f       	adc	r31, r31
    18dc:	cc 1f       	adc	r28, r28
    18de:	dd 1f       	adc	r29, r29
    18e0:	aa 1f       	adc	r26, r26
    18e2:	bb 1f       	adc	r27, r27
    18e4:	8a 14       	cp	r8, r10
    18e6:	9b 04       	cpc	r9, r11
    18e8:	ec 05       	cpc	r30, r12
    18ea:	fd 05       	cpc	r31, r13
    18ec:	ce 05       	cpc	r28, r14
    18ee:	df 05       	cpc	r29, r15
    18f0:	a0 07       	cpc	r26, r16
    18f2:	b1 07       	cpc	r27, r17
    18f4:	48 f0       	brcs	.+18     	; 0x1908 <__udivmod64+0x90>
    18f6:	8a 18       	sub	r8, r10
    18f8:	9b 08       	sbc	r9, r11
    18fa:	ec 09       	sbc	r30, r12
    18fc:	fd 09       	sbc	r31, r13
    18fe:	ce 09       	sbc	r28, r14
    1900:	df 09       	sbc	r29, r15
    1902:	a0 0b       	sbc	r26, r16
    1904:	b1 0b       	sbc	r27, r17
    1906:	21 60       	ori	r18, 0x01	; 1
    1908:	1a 94       	dec	r1
    190a:	e1 f6       	brne	.-72     	; 0x18c4 <__udivmod64+0x4c>
    190c:	2e f4       	brtc	.+10     	; 0x1918 <__udivmod64+0xa0>
    190e:	94 01       	movw	r18, r8
    1910:	af 01       	movw	r20, r30
    1912:	be 01       	movw	r22, r28
    1914:	cd 01       	movw	r24, r26
    1916:	00 0c       	add	r0, r0
    1918:	08 95       	ret

0000191a <__ashldi3>:
    191a:	0f 93       	push	r16
    191c:	08 30       	cpi	r16, 0x08	; 8
    191e:	90 f0       	brcs	.+36     	; 0x1944 <__ashldi3+0x2a>
    1920:	98 2f       	mov	r25, r24
    1922:	87 2f       	mov	r24, r23
    1924:	76 2f       	mov	r23, r22
    1926:	65 2f       	mov	r22, r21
    1928:	54 2f       	mov	r21, r20
    192a:	43 2f       	mov	r20, r19
    192c:	32 2f       	mov	r19, r18
    192e:	22 27       	eor	r18, r18
    1930:	08 50       	subi	r16, 0x08	; 8
    1932:	f4 cf       	rjmp	.-24     	; 0x191c <__ashldi3+0x2>
    1934:	22 0f       	add	r18, r18
    1936:	33 1f       	adc	r19, r19
    1938:	44 1f       	adc	r20, r20
    193a:	55 1f       	adc	r21, r21
    193c:	66 1f       	adc	r22, r22
    193e:	77 1f       	adc	r23, r23
    1940:	88 1f       	adc	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	0a 95       	dec	r16
    1946:	b2 f7       	brpl	.-20     	; 0x1934 <__ashldi3+0x1a>
    1948:	0f 91       	pop	r16
    194a:	08 95       	ret

0000194c <__ashrdi3>:
    194c:	97 fb       	bst	r25, 7
    194e:	10 f8       	bld	r1, 0

00001950 <__lshrdi3>:
    1950:	16 94       	lsr	r1
    1952:	00 08       	sbc	r0, r0
    1954:	0f 93       	push	r16
    1956:	08 30       	cpi	r16, 0x08	; 8
    1958:	98 f0       	brcs	.+38     	; 0x1980 <__lshrdi3+0x30>
    195a:	08 50       	subi	r16, 0x08	; 8
    195c:	23 2f       	mov	r18, r19
    195e:	34 2f       	mov	r19, r20
    1960:	45 2f       	mov	r20, r21
    1962:	56 2f       	mov	r21, r22
    1964:	67 2f       	mov	r22, r23
    1966:	78 2f       	mov	r23, r24
    1968:	89 2f       	mov	r24, r25
    196a:	90 2d       	mov	r25, r0
    196c:	f4 cf       	rjmp	.-24     	; 0x1956 <__lshrdi3+0x6>
    196e:	05 94       	asr	r0
    1970:	97 95       	ror	r25
    1972:	87 95       	ror	r24
    1974:	77 95       	ror	r23
    1976:	67 95       	ror	r22
    1978:	57 95       	ror	r21
    197a:	47 95       	ror	r20
    197c:	37 95       	ror	r19
    197e:	27 95       	ror	r18
    1980:	0a 95       	dec	r16
    1982:	aa f7       	brpl	.-22     	; 0x196e <__lshrdi3+0x1e>
    1984:	0f 91       	pop	r16
    1986:	08 95       	ret

00001988 <__adddi3_s8>:
    1988:	00 24       	eor	r0, r0
    198a:	a7 fd       	sbrc	r26, 7
    198c:	00 94       	com	r0
    198e:	2a 0f       	add	r18, r26
    1990:	30 1d       	adc	r19, r0
    1992:	40 1d       	adc	r20, r0
    1994:	50 1d       	adc	r21, r0
    1996:	60 1d       	adc	r22, r0
    1998:	70 1d       	adc	r23, r0
    199a:	80 1d       	adc	r24, r0
    199c:	90 1d       	adc	r25, r0
    199e:	08 95       	ret

000019a0 <__cmpdi2>:
    19a0:	2a 15       	cp	r18, r10
    19a2:	3b 05       	cpc	r19, r11
    19a4:	4c 05       	cpc	r20, r12
    19a6:	5d 05       	cpc	r21, r13
    19a8:	6e 05       	cpc	r22, r14
    19aa:	7f 05       	cpc	r23, r15
    19ac:	80 07       	cpc	r24, r16
    19ae:	91 07       	cpc	r25, r17
    19b0:	08 95       	ret

000019b2 <__cmpdi2_s8>:
    19b2:	00 24       	eor	r0, r0
    19b4:	a7 fd       	sbrc	r26, 7
    19b6:	00 94       	com	r0
    19b8:	2a 17       	cp	r18, r26
    19ba:	30 05       	cpc	r19, r0
    19bc:	40 05       	cpc	r20, r0
    19be:	50 05       	cpc	r21, r0
    19c0:	60 05       	cpc	r22, r0
    19c2:	70 05       	cpc	r23, r0
    19c4:	80 05       	cpc	r24, r0
    19c6:	90 05       	cpc	r25, r0
    19c8:	08 95       	ret

000019ca <_exit>:
    19ca:	f8 94       	cli

000019cc <__stop_program>:
    19cc:	ff cf       	rjmp	.-2      	; 0x19cc <__stop_program>
