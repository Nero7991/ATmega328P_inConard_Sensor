
ATmega328P_inConard_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00001778  0000180c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001778  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c3  00800184  00800184  00001890  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000558  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000655e  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000168c  00000000  00000000  000083b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002be7  00000000  00000000  00009a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001170  00000000  00000000  0000c62c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002278  00000000  00000000  0000d79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b9d  00000000  00000000  0000fa14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  000135b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__ctors_end>
       4:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_1>
       8:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__vector_2>
       c:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__vector_3>
      10:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__vector_4>
      14:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__vector_5>
      18:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_6>
      1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      2c:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_11>
      30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      44:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__vector_17>
      48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	49 6e       	ori	r20, 0xE9	; 233
      6a:	69 74       	andi	r22, 0x49	; 73
      6c:	69 61       	ori	r22, 0x19	; 25
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	7a 69       	ori	r23, 0x9A	; 154
      72:	6e 67       	ori	r22, 0x7E	; 126
      74:	20 73       	andi	r18, 0x30	; 48
      76:	75 63       	ori	r23, 0x35	; 53
      78:	63 65       	ori	r22, 0x53	; 83
      7a:	73 73       	andi	r23, 0x33	; 51
      7c:	66 75       	andi	r22, 0x56	; 86
      7e:	6c 2e       	mov	r6, r28
	...

00000081 <_ZZN8NRF24L017setModeEbE3__c_1>:
      81:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
      91:	61 69 6c 65 64 20 66 6f 72 20 6e 52 46 32 34 4c     ailed for nRF24L
      a1:	30 31 2e 20 43 68 65 63 6b 20 63 6f 6e 6e 65 63     01. Check connec
      b1:	74 69 6f 6e 73 00                                   tions.

000000b7 <_ZZN8NRF24L017setModeEbE3__c_0>:
      b7:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      c7:	31 20 69 6e 20 54 72 61 6e 73 6d 69 74 20 4d 6f     1 in Transmit Mo
      d7:	64 65 2e 2e 2e 00                                   de....

000000dd <_ZZN8NRF24L017setModeEbE3__c>:
      dd:	53 74 61 72 74 69 6e 67 20 6e 52 46 32 34 4c 30     Starting nRF24L0
      ed:	31 20 69 6e 20 52 65 63 65 69 76 65 20 4d 6f 64     1 in Receive Mod
      fd:	65 2e 2e 2e 00                                      e....

00000102 <_ZZN8NRF24L0110initializeEvE3__c_0>:
     102:	4d 61 73 74 65 72 20 52 58 20 50 61 79 6c 6f 61     Master RX Payloa
     112:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     122:	3a 20 00                                            : .

00000125 <_ZZN8NRF24L0110initializeEvE3__c>:
     125:	4d 61 73 74 65 72 20 54 58 20 50 61 79 6c 6f 61     Master TX Payloa
     135:	64 20 6c 65 6e 67 74 68 20 73 65 74 20 74 6f 20     d length set to 
     145:	3a 20 00                                            : .

00000148 <_ZZ4mainE3__c_0>:
     148:	44 6f 6e 65 00                                      Done.

0000014d <_ZZ4mainE3__c>:
     14d:	50 6f 77 65 72 69 6e 67 20 6f 6e 2e 2e 2e 00        Powering on....

0000015c <__ctors_end>:
     15c:	11 24       	eor	r1, r1
     15e:	1f be       	out	0x3f, r1	; 63
     160:	cf ef       	ldi	r28, 0xFF	; 255
     162:	d8 e0       	ldi	r29, 0x08	; 8
     164:	de bf       	out	0x3e, r29	; 62
     166:	cd bf       	out	0x3d, r28	; 61

00000168 <__do_copy_data>:
     168:	11 e0       	ldi	r17, 0x01	; 1
     16a:	a0 e0       	ldi	r26, 0x00	; 0
     16c:	b1 e0       	ldi	r27, 0x01	; 1
     16e:	e8 e7       	ldi	r30, 0x78	; 120
     170:	f7 e1       	ldi	r31, 0x17	; 23
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x10>
     174:	05 90       	lpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	a4 38       	cpi	r26, 0x84	; 132
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0xc>

0000017e <__do_clear_bss>:
     17e:	22 e0       	ldi	r18, 0x02	; 2
     180:	a4 e8       	ldi	r26, 0x84	; 132
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a7 34       	cpi	r26, 0x47	; 71
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <main>
     192:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <_exit>

00000196 <__bad_interrupt>:
     196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019a <_Z6wakeUpv>:
	MCUSR &= ~(1<<WDRF);
	/* Start timed sequence */
	WDTCR = (1<<WDCE) | (1<<WDE);
	/* Set new prescaler (time-out) value = 64K cycles (~0.5 s) */
	WDTCR = prescale;
	asm volatile("sei"::);
     19a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     19e:	08 95       	ret

000001a0 <_Z10allowSleepb>:
     1a0:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
     1a4:	08 95       	ret

000001a6 <_Z14SPI_MasterInitv>:
     1a6:	24 98       	cbi	0x04, 4	; 4
     1a8:	84 b1       	in	r24, 0x04	; 4
     1aa:	8c 62       	ori	r24, 0x2C	; 44
     1ac:	84 b9       	out	0x04, r24	; 4
     1ae:	2a 9a       	sbi	0x05, 2	; 5
     1b0:	8c b5       	in	r24, 0x2c	; 44
     1b2:	82 65       	ori	r24, 0x52	; 82
     1b4:	8c bd       	out	0x2c, r24	; 44
     1b6:	08 95       	ret

000001b8 <_Z12initSPISlavev>:
     1b8:	84 b1       	in	r24, 0x04	; 4
     1ba:	83 7d       	andi	r24, 0xD3	; 211
     1bc:	84 b9       	out	0x04, r24	; 4
     1be:	24 9a       	sbi	0x04, 4	; 4
     1c0:	8c b5       	in	r24, 0x2c	; 44
     1c2:	8f 7e       	andi	r24, 0xEF	; 239
     1c4:	8c bd       	out	0x2c, r24	; 44
     1c6:	8c b5       	in	r24, 0x2c	; 44
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	8c bd       	out	0x2c, r24	; 44
     1cc:	08 95       	ret

000001ce <_Z18enableSPIInterruptb>:
     1ce:	88 23       	and	r24, r24
     1d0:	21 f0       	breq	.+8      	; 0x1da <_Z18enableSPIInterruptb+0xc>
     1d2:	8c b5       	in	r24, 0x2c	; 44
     1d4:	80 68       	ori	r24, 0x80	; 128
     1d6:	8c bd       	out	0x2c, r24	; 44
     1d8:	08 95       	ret
     1da:	8c b5       	in	r24, 0x2c	; 44
     1dc:	8f 77       	andi	r24, 0x7F	; 127
     1de:	8c bd       	out	0x2c, r24	; 44
     1e0:	08 95       	ret

000001e2 <_Z18SPI_MasterTransmitc>:
     1e2:	8e bd       	out	0x2e, r24	; 46
     1e4:	0d b4       	in	r0, 0x2d	; 45
     1e6:	07 fe       	sbrs	r0, 7
     1e8:	fd cf       	rjmp	.-6      	; 0x1e4 <_Z18SPI_MasterTransmitc+0x2>
     1ea:	8e b5       	in	r24, 0x2e	; 46
     1ec:	08 95       	ret

000001ee <_Z11Init_CTC_T1hj>:
     1ee:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1f2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     1f6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     1fa:	87 70       	andi	r24, 0x07	; 7
     1fc:	88 60       	ori	r24, 0x08	; 8
     1fe:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     202:	82 e0       	ldi	r24, 0x02	; 2
     204:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     208:	78 94       	sei
     20a:	08 95       	ret

0000020c <_Z11setPinStatehhb>:
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	e9 f0       	breq	.+58     	; 0x24a <_Z11setPinStatehhb+0x3e>
     210:	18 f0       	brcs	.+6      	; 0x218 <_Z11setPinStatehhb+0xc>
     212:	82 30       	cpi	r24, 0x02	; 2
     214:	99 f1       	breq	.+102    	; 0x27c <_Z11setPinStatehhb+0x70>
     216:	08 95       	ret
     218:	44 23       	and	r20, r20
     21a:	59 f0       	breq	.+22     	; 0x232 <_Z11setPinStatehhb+0x26>
     21c:	25 b1       	in	r18, 0x05	; 5
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	02 c0       	rjmp	.+4      	; 0x228 <_Z11setPinStatehhb+0x1c>
     224:	88 0f       	add	r24, r24
     226:	99 1f       	adc	r25, r25
     228:	6a 95       	dec	r22
     22a:	e2 f7       	brpl	.-8      	; 0x224 <_Z11setPinStatehhb+0x18>
     22c:	82 2b       	or	r24, r18
     22e:	85 b9       	out	0x05, r24	; 5
     230:	08 95       	ret
     232:	25 b1       	in	r18, 0x05	; 5
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	02 c0       	rjmp	.+4      	; 0x23e <_Z11setPinStatehhb+0x32>
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	6a 95       	dec	r22
     240:	e2 f7       	brpl	.-8      	; 0x23a <_Z11setPinStatehhb+0x2e>
     242:	80 95       	com	r24
     244:	82 23       	and	r24, r18
     246:	85 b9       	out	0x05, r24	; 5
     248:	08 95       	ret
     24a:	44 23       	and	r20, r20
     24c:	59 f0       	breq	.+22     	; 0x264 <_Z11setPinStatehhb+0x58>
     24e:	28 b1       	in	r18, 0x08	; 8
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	02 c0       	rjmp	.+4      	; 0x25a <_Z11setPinStatehhb+0x4e>
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	6a 95       	dec	r22
     25c:	e2 f7       	brpl	.-8      	; 0x256 <_Z11setPinStatehhb+0x4a>
     25e:	82 2b       	or	r24, r18
     260:	88 b9       	out	0x08, r24	; 8
     262:	08 95       	ret
     264:	28 b1       	in	r18, 0x08	; 8
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <_Z11setPinStatehhb+0x64>
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	6a 95       	dec	r22
     272:	e2 f7       	brpl	.-8      	; 0x26c <_Z11setPinStatehhb+0x60>
     274:	80 95       	com	r24
     276:	82 23       	and	r24, r18
     278:	88 b9       	out	0x08, r24	; 8
     27a:	08 95       	ret
     27c:	44 23       	and	r20, r20
     27e:	59 f0       	breq	.+22     	; 0x296 <_Z11setPinStatehhb+0x8a>
     280:	2b b1       	in	r18, 0x0b	; 11
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <_Z11setPinStatehhb+0x80>
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	6a 95       	dec	r22
     28e:	e2 f7       	brpl	.-8      	; 0x288 <_Z11setPinStatehhb+0x7c>
     290:	82 2b       	or	r24, r18
     292:	8b b9       	out	0x0b, r24	; 11
     294:	08 95       	ret
     296:	2b b1       	in	r18, 0x0b	; 11
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <_Z11setPinStatehhb+0x96>
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	6a 95       	dec	r22
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <_Z11setPinStatehhb+0x92>
     2a6:	80 95       	com	r24
     2a8:	82 23       	and	r24, r18
     2aa:	8b b9       	out	0x0b, r24	; 11
     2ac:	08 95       	ret

000002ae <_Z15setPinDirectionhhb>:
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	e9 f0       	breq	.+58     	; 0x2ec <_Z15setPinDirectionhhb+0x3e>
     2b2:	18 f0       	brcs	.+6      	; 0x2ba <_Z15setPinDirectionhhb+0xc>
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	99 f1       	breq	.+102    	; 0x31e <_Z15setPinDirectionhhb+0x70>
     2b8:	08 95       	ret
     2ba:	44 23       	and	r20, r20
     2bc:	59 f0       	breq	.+22     	; 0x2d4 <_Z15setPinDirectionhhb+0x26>
     2be:	24 b1       	in	r18, 0x04	; 4
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <_Z15setPinDirectionhhb+0x1c>
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	6a 95       	dec	r22
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <_Z15setPinDirectionhhb+0x18>
     2ce:	82 2b       	or	r24, r18
     2d0:	84 b9       	out	0x04, r24	; 4
     2d2:	08 95       	ret
     2d4:	24 b1       	in	r18, 0x04	; 4
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <_Z15setPinDirectionhhb+0x32>
     2dc:	88 0f       	add	r24, r24
     2de:	99 1f       	adc	r25, r25
     2e0:	6a 95       	dec	r22
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <_Z15setPinDirectionhhb+0x2e>
     2e4:	80 95       	com	r24
     2e6:	82 23       	and	r24, r18
     2e8:	84 b9       	out	0x04, r24	; 4
     2ea:	08 95       	ret
     2ec:	44 23       	and	r20, r20
     2ee:	59 f0       	breq	.+22     	; 0x306 <_Z15setPinDirectionhhb+0x58>
     2f0:	27 b1       	in	r18, 0x07	; 7
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <_Z15setPinDirectionhhb+0x4e>
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	6a 95       	dec	r22
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <_Z15setPinDirectionhhb+0x4a>
     300:	82 2b       	or	r24, r18
     302:	87 b9       	out	0x07, r24	; 7
     304:	08 95       	ret
     306:	27 b1       	in	r18, 0x07	; 7
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	02 c0       	rjmp	.+4      	; 0x312 <_Z15setPinDirectionhhb+0x64>
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	6a 95       	dec	r22
     314:	e2 f7       	brpl	.-8      	; 0x30e <_Z15setPinDirectionhhb+0x60>
     316:	80 95       	com	r24
     318:	82 23       	and	r24, r18
     31a:	87 b9       	out	0x07, r24	; 7
     31c:	08 95       	ret
     31e:	44 23       	and	r20, r20
     320:	59 f0       	breq	.+22     	; 0x338 <_Z15setPinDirectionhhb+0x8a>
     322:	2a b1       	in	r18, 0x0a	; 10
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <_Z15setPinDirectionhhb+0x80>
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	6a 95       	dec	r22
     330:	e2 f7       	brpl	.-8      	; 0x32a <_Z15setPinDirectionhhb+0x7c>
     332:	82 2b       	or	r24, r18
     334:	8a b9       	out	0x0a, r24	; 10
     336:	08 95       	ret
     338:	2a b1       	in	r18, 0x0a	; 10
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	02 c0       	rjmp	.+4      	; 0x344 <_Z15setPinDirectionhhb+0x96>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	6a 95       	dec	r22
     346:	e2 f7       	brpl	.-8      	; 0x340 <_Z15setPinDirectionhhb+0x92>
     348:	80 95       	com	r24
     34a:	82 23       	and	r24, r18
     34c:	8a b9       	out	0x0a, r24	; 10
     34e:	08 95       	ret

00000350 <_Z11getPinStatehh>:
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	69 f0       	breq	.+26     	; 0x36e <_Z11getPinStatehh+0x1e>
     354:	18 f0       	brcs	.+6      	; 0x35c <_Z11getPinStatehh+0xc>
     356:	82 30       	cpi	r24, 0x02	; 2
     358:	99 f0       	breq	.+38     	; 0x380 <_Z11getPinStatehh+0x30>
     35a:	1b c0       	rjmp	.+54     	; 0x392 <_Z11getPinStatehh+0x42>
     35c:	83 b1       	in	r24, 0x03	; 3
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	02 c0       	rjmp	.+4      	; 0x366 <_Z11getPinStatehh+0x16>
     362:	95 95       	asr	r25
     364:	87 95       	ror	r24
     366:	6a 95       	dec	r22
     368:	e2 f7       	brpl	.-8      	; 0x362 <_Z11getPinStatehh+0x12>
     36a:	81 70       	andi	r24, 0x01	; 1
     36c:	08 95       	ret
     36e:	86 b1       	in	r24, 0x06	; 6
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	02 c0       	rjmp	.+4      	; 0x378 <_Z11getPinStatehh+0x28>
     374:	95 95       	asr	r25
     376:	87 95       	ror	r24
     378:	6a 95       	dec	r22
     37a:	e2 f7       	brpl	.-8      	; 0x374 <_Z11getPinStatehh+0x24>
     37c:	81 70       	andi	r24, 0x01	; 1
     37e:	08 95       	ret
     380:	89 b1       	in	r24, 0x09	; 9
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	02 c0       	rjmp	.+4      	; 0x38a <_Z11getPinStatehh+0x3a>
     386:	95 95       	asr	r25
     388:	87 95       	ror	r24
     38a:	6a 95       	dec	r22
     38c:	e2 f7       	brpl	.-8      	; 0x386 <_Z11getPinStatehh+0x36>
     38e:	81 70       	andi	r24, 0x01	; 1
     390:	08 95       	ret
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	08 95       	ret

00000396 <_Z10USART_Initj>:
     396:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     39a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     39e:	88 e1       	ldi	r24, 0x18	; 24
     3a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     3a4:	8e e0       	ldi	r24, 0x0E	; 14
     3a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     3aa:	08 95       	ret

000003ac <_Z14USART_Transmith>:
     3ac:	e0 ec       	ldi	r30, 0xC0	; 192
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	90 81       	ld	r25, Z
     3b2:	95 ff       	sbrs	r25, 5
     3b4:	fd cf       	rjmp	.-6      	; 0x3b0 <_Z14USART_Transmith+0x4>
     3b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     3ba:	08 95       	ret

000003bc <_Z6millisv>:
     3bc:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <time>
     3c0:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <time+0x1>
     3c4:	40 91 89 01 	lds	r20, 0x0189	; 0x800189 <time+0x2>
     3c8:	50 91 8a 01 	lds	r21, 0x018A	; 0x80018a <time+0x3>
     3cc:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <time+0x4>
     3d0:	70 91 8c 01 	lds	r23, 0x018C	; 0x80018c <time+0x5>
     3d4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <time+0x6>
     3d8:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <time+0x7>
     3dc:	08 95       	ret

000003de <_Z13milliHappenedv>:
}


void milliHappened(){
	time += 1;
     3de:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <time>
     3e2:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <time+0x1>
     3e6:	40 91 89 01 	lds	r20, 0x0189	; 0x800189 <time+0x2>
     3ea:	50 91 8a 01 	lds	r21, 0x018A	; 0x80018a <time+0x3>
     3ee:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <time+0x4>
     3f2:	70 91 8c 01 	lds	r23, 0x018C	; 0x80018c <time+0x5>
     3f6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <time+0x6>
     3fa:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <time+0x7>
     3fe:	a1 e0       	ldi	r26, 0x01	; 1
     400:	0e 94 99 0b 	call	0x1732	; 0x1732 <__adddi3_s8>
     404:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <time>
     408:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <time+0x1>
     40c:	40 93 89 01 	sts	0x0189, r20	; 0x800189 <time+0x2>
     410:	50 93 8a 01 	sts	0x018A, r21	; 0x80018a <time+0x3>
     414:	60 93 8b 01 	sts	0x018B, r22	; 0x80018b <time+0x4>
     418:	70 93 8c 01 	sts	0x018C, r23	; 0x80018c <time+0x5>
     41c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <time+0x6>
     420:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <time+0x7>
	if(cdown != 0){
     424:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <cdown>
     428:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <cdown+0x1>
     42c:	89 2b       	or	r24, r25
     42e:	49 f0       	breq	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		cdown -= 1;
     430:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <cdown>
     434:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <cdown+0x1>
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <cdown+0x1>
     43e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <cdown>
     442:	08 95       	ret

00000444 <__vector_6>:
	}
	count1 += 1;
}*/


ISR(WDT_vect){
     444:	1f 92       	push	r1
     446:	0f 92       	push	r0
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	0f 92       	push	r0
     44c:	11 24       	eor	r1, r1
     44e:	8f 93       	push	r24
	MCUSR &= ~(1 << SE);
     450:	84 b7       	in	r24, 0x34	; 52
     452:	8e 7f       	andi	r24, 0xFE	; 254
     454:	84 bf       	out	0x34, r24	; 52
     456:	8f 91       	pop	r24
     458:	0f 90       	pop	r0
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	0f 90       	pop	r0
     45e:	1f 90       	pop	r1
     460:	18 95       	reti

00000462 <_Z10numToArrayy>:
	USART_Transmit('\n');
	while(*p != 0){
		USART_Transmit(*p);
		p++;
	}
}
     462:	0f 93       	push	r16
     464:	e0 ed       	ldi	r30, 0xD0	; 208
     466:	f1 e0       	ldi	r31, 0x01	; 1
     468:	a8 ed       	ldi	r26, 0xD8	; 216
     46a:	b1 e0       	ldi	r27, 0x01	; 1
     46c:	21 93       	st	Z+, r18
     46e:	08 e0       	ldi	r16, 0x08	; 8
     470:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__lshrdi3>
     474:	ea 17       	cp	r30, r26
     476:	fb 07       	cpc	r31, r27
     478:	c9 f7       	brne	.-14     	; 0x46c <_Z10numToArrayy+0xa>
     47a:	80 ed       	ldi	r24, 0xD0	; 208
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <_Z10hexToASCIIh>:
     482:	8a 30       	cpi	r24, 0x0A	; 10
     484:	10 f0       	brcs	.+4      	; 0x48a <_Z10hexToASCIIh+0x8>
     486:	89 5c       	subi	r24, 0xC9	; 201
     488:	08 95       	ret
     48a:	80 5d       	subi	r24, 0xD0	; 208
     48c:	08 95       	ret

0000048e <_Z11hexToStringh>:
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	18 2f       	mov	r17, r24
     496:	82 95       	swap	r24
     498:	8f 70       	andi	r24, 0x0F	; 15
     49a:	0e 94 41 02 	call	0x482	; 0x482 <_Z10hexToASCIIh>
     49e:	c8 ed       	ldi	r28, 0xD8	; 216
     4a0:	d1 e0       	ldi	r29, 0x01	; 1
     4a2:	88 83       	st	Y, r24
     4a4:	81 2f       	mov	r24, r17
     4a6:	8f 70       	andi	r24, 0x0F	; 15
     4a8:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZ11hexToStringhE4temp>
     4ac:	0e 94 41 02 	call	0x482	; 0x482 <_Z10hexToASCIIh>
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	1a 82       	std	Y+2, r1	; 0x02
     4b4:	ce 01       	movw	r24, r28
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	08 95       	ret

000004be <_Z11printNumbery>:
     4be:	2f 92       	push	r2
     4c0:	3f 92       	push	r3
     4c2:	4f 92       	push	r4
     4c4:	5f 92       	push	r5
     4c6:	6f 92       	push	r6
     4c8:	7f 92       	push	r7
     4ca:	8f 92       	push	r8
     4cc:	9f 92       	push	r9
     4ce:	af 92       	push	r10
     4d0:	bf 92       	push	r11
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	c7 56       	subi	r28, 0x67	; 103
     4e8:	d1 09       	sbc	r29, r1
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	a6 96       	adiw	r28, 0x26	; 38
     4f6:	2f af       	std	Y+63, r18	; 0x3f
     4f8:	a6 97       	sbiw	r28, 0x26	; 38
     4fa:	83 2e       	mov	r8, r19
     4fc:	74 2e       	mov	r7, r20
     4fe:	65 2e       	mov	r6, r21
     500:	56 2e       	mov	r5, r22
     502:	47 2e       	mov	r4, r23
     504:	38 2e       	mov	r3, r24
     506:	29 2e       	mov	r2, r25
     508:	a0 e0       	ldi	r26, 0x00	; 0
     50a:	0e 94 ae 0b 	call	0x175c	; 0x175c <__cmpdi2_s8>
     50e:	21 f4       	brne	.+8      	; 0x518 <_Z11printNumbery+0x5a>
     510:	80 e3       	ldi	r24, 0x30	; 48
     512:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14USART_Transmith>
     516:	52 c0       	rjmp	.+164    	; 0x5bc <_Z11printNumbery+0xfe>
     518:	91 2c       	mov	r9, r1
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	8c 0f       	add	r24, r28
     520:	9d 1f       	adc	r25, r29
     522:	89 0d       	add	r24, r9
     524:	91 1d       	adc	r25, r1
     526:	a8 96       	adiw	r28, 0x28	; 40
     528:	9f af       	std	Y+63, r25	; 0x3f
     52a:	8e af       	std	Y+62, r24	; 0x3e
     52c:	a8 97       	sbiw	r28, 0x28	; 40
     52e:	0f 2e       	mov	r0, r31
     530:	fa e0       	ldi	r31, 0x0A	; 10
     532:	af 2e       	mov	r10, r31
     534:	f0 2d       	mov	r31, r0
     536:	b1 2c       	mov	r11, r1
     538:	c1 2c       	mov	r12, r1
     53a:	d1 2c       	mov	r13, r1
     53c:	e1 2c       	mov	r14, r1
     53e:	f1 2c       	mov	r15, r1
     540:	00 e0       	ldi	r16, 0x00	; 0
     542:	10 e0       	ldi	r17, 0x00	; 0
     544:	a6 96       	adiw	r28, 0x26	; 38
     546:	2f ad       	ldd	r18, Y+63	; 0x3f
     548:	a6 97       	sbiw	r28, 0x26	; 38
     54a:	38 2d       	mov	r19, r8
     54c:	47 2d       	mov	r20, r7
     54e:	56 2d       	mov	r21, r6
     550:	65 2d       	mov	r22, r5
     552:	74 2d       	mov	r23, r4
     554:	83 2d       	mov	r24, r3
     556:	92 2d       	mov	r25, r2
     558:	0e 94 03 0b 	call	0x1606	; 0x1606 <__umoddi3>
     55c:	20 5d       	subi	r18, 0xD0	; 208
     55e:	a8 96       	adiw	r28, 0x28	; 40
     560:	ee ad       	ldd	r30, Y+62	; 0x3e
     562:	ff ad       	ldd	r31, Y+63	; 0x3f
     564:	a8 97       	sbiw	r28, 0x28	; 40
     566:	20 83       	st	Z, r18
     568:	a6 96       	adiw	r28, 0x26	; 38
     56a:	2f ad       	ldd	r18, Y+63	; 0x3f
     56c:	a6 97       	sbiw	r28, 0x26	; 38
     56e:	38 2d       	mov	r19, r8
     570:	47 2d       	mov	r20, r7
     572:	56 2d       	mov	r21, r6
     574:	65 2d       	mov	r22, r5
     576:	74 2d       	mov	r23, r4
     578:	83 2d       	mov	r24, r3
     57a:	92 2d       	mov	r25, r2
     57c:	0e 94 05 0b 	call	0x160a	; 0x160a <__udivdi3>
     580:	a6 96       	adiw	r28, 0x26	; 38
     582:	2f af       	std	Y+63, r18	; 0x3f
     584:	a6 97       	sbiw	r28, 0x26	; 38
     586:	83 2e       	mov	r8, r19
     588:	74 2e       	mov	r7, r20
     58a:	65 2e       	mov	r6, r21
     58c:	56 2e       	mov	r5, r22
     58e:	47 2e       	mov	r4, r23
     590:	38 2e       	mov	r3, r24
     592:	29 2e       	mov	r2, r25
     594:	93 94       	inc	r9
     596:	a0 e0       	ldi	r26, 0x00	; 0
     598:	0e 94 ae 0b 	call	0x175c	; 0x175c <__cmpdi2_s8>
     59c:	09 f0       	breq	.+2      	; 0x5a0 <_Z11printNumbery+0xe2>
     59e:	bd cf       	rjmp	.-134    	; 0x51a <_Z11printNumbery+0x5c>
     5a0:	99 20       	and	r9, r9
     5a2:	61 f0       	breq	.+24     	; 0x5bc <_Z11printNumbery+0xfe>
     5a4:	9a 94       	dec	r9
     5a6:	e1 e0       	ldi	r30, 0x01	; 1
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	ec 0f       	add	r30, r28
     5ac:	fd 1f       	adc	r31, r29
     5ae:	e9 0d       	add	r30, r9
     5b0:	f1 1d       	adc	r31, r1
     5b2:	80 81       	ld	r24, Z
     5b4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14USART_Transmith>
     5b8:	91 10       	cpse	r9, r1
     5ba:	f4 cf       	rjmp	.-24     	; 0x5a4 <_Z11printNumbery+0xe6>
     5bc:	80 e2       	ldi	r24, 0x20	; 32
     5be:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14USART_Transmith>
     5c2:	c9 59       	subi	r28, 0x99	; 153
     5c4:	df 4f       	sbci	r29, 0xFF	; 255
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	bf 90       	pop	r11
     5e2:	af 90       	pop	r10
     5e4:	9f 90       	pop	r9
     5e6:	8f 90       	pop	r8
     5e8:	7f 90       	pop	r7
     5ea:	6f 90       	pop	r6
     5ec:	5f 90       	pop	r5
     5ee:	4f 90       	pop	r4
     5f0:	3f 90       	pop	r3
     5f2:	2f 90       	pop	r2
     5f4:	08 95       	ret

000005f6 <_Z6NotifyPKc>:
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	ec 01       	movw	r28, r24
     5fc:	8d e0       	ldi	r24, 0x0D	; 13
     5fe:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14USART_Transmith>
     602:	8a e0       	ldi	r24, 0x0A	; 10
     604:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14USART_Transmith>
     608:	fe 01       	movw	r30, r28
     60a:	84 91       	lpm	r24, Z
     60c:	88 23       	and	r24, r24
     60e:	49 f0       	breq	.+18     	; 0x622 <_Z6NotifyPKc+0x2c>
     610:	fe 01       	movw	r30, r28
     612:	84 91       	lpm	r24, Z
     614:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14USART_Transmith>
     618:	21 96       	adiw	r28, 0x01	; 1
     61a:	fe 01       	movw	r30, r28
     61c:	84 91       	lpm	r24, Z
     61e:	81 11       	cpse	r24, r1
     620:	f7 cf       	rjmp	.-18     	; 0x610 <_Z6NotifyPKc+0x1a>
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <_Z15printStringCRNLPKc>:

void printStringCRNL(const char *p){
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
	USART_Transmit('\r');
     62e:	8d e0       	ldi	r24, 0x0D	; 13
     630:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14USART_Transmith>
	USART_Transmit('\n');
     634:	8a e0       	ldi	r24, 0x0A	; 10
     636:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14USART_Transmith>
	while(*p != 0){
     63a:	88 81       	ld	r24, Y
     63c:	88 23       	and	r24, r24
     63e:	31 f0       	breq	.+12     	; 0x64c <_Z15printStringCRNLPKc+0x24>
     640:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     642:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14USART_Transmith>
}

void printStringCRNL(const char *p){
	USART_Transmit('\r');
	USART_Transmit('\n');
	while(*p != 0){
     646:	89 91       	ld	r24, Y+
     648:	81 11       	cpse	r24, r1
     64a:	fb cf       	rjmp	.-10     	; 0x642 <_Z15printStringCRNLPKc+0x1a>
		USART_Transmit(*p);
		p++;
	}
}
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <_Z11printStringPKc>:

void printString(const char *p){
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec 01       	movw	r28, r24
	while(*p != 0){
     658:	88 81       	ld	r24, Y
     65a:	88 23       	and	r24, r24
     65c:	31 f0       	breq	.+12     	; 0x66a <_Z11printStringPKc+0x18>
     65e:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*p);
     660:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14USART_Transmith>
		p++;
	}
}

void printString(const char *p){
	while(*p != 0){
     664:	89 91       	ld	r24, Y+
     666:	81 11       	cpse	r24, r1
     668:	fb cf       	rjmp	.-10     	; 0x660 <_Z11printStringPKc+0xe>
		USART_Transmit(*p);
		p++;
	}
}
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <_Z16hexArrayToStringPhh>:
		data >>= 8;
	}
	return array;
} 

char* hexArrayToString(uint8_t *data, uint8_t length){
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	f6 2e       	mov	r15, r22
	static char str[64], t;
	data += length - 1;
     67c:	06 2f       	mov	r16, r22
     67e:	10 e0       	ldi	r17, 0x00	; 0
     680:	01 50       	subi	r16, 0x01	; 1
     682:	11 09       	sbc	r17, r1
     684:	08 0f       	add	r16, r24
     686:	19 1f       	adc	r17, r25
		p++;
	}
}

void printChar(unsigned char data){
	USART_Transmit(data);
     688:	80 e3       	ldi	r24, 0x30	; 48
     68a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14USART_Transmith>
     68e:	88 e7       	ldi	r24, 0x78	; 120
     690:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z14USART_Transmith>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     694:	ff 20       	and	r15, r15
     696:	81 f0       	breq	.+32     	; 0x6b8 <_Z16hexArrayToStringPhh+0x48>
     698:	e8 01       	movw	r28, r16
     69a:	21 96       	adiw	r28, 0x01	; 1
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	8f 0d       	add	r24, r15
     6a0:	08 1b       	sub	r16, r24
     6a2:	11 09       	sbc	r17, r1
	{	
		t = *data;
     6a4:	8a 91       	ld	r24, -Y
     6a6:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <_ZZ16hexArrayToStringPhhE1t>
		printString(hexToString(t));
     6aa:	0e 94 47 02 	call	0x48e	; 0x48e <_Z11hexToStringh>
     6ae:	0e 94 29 03 	call	0x652	; 0x652 <_Z11printStringPKc>
char* hexArrayToString(uint8_t *data, uint8_t length){
	static char str[64], t;
	data += length - 1;
	printChar('0');
	printChar('x');
	for (uint8_t i = 0; i < length; i++)
     6b2:	c0 17       	cp	r28, r16
     6b4:	d1 07       	cpc	r29, r17
     6b6:	b1 f7       	brne	.-20     	; 0x6a4 <_Z16hexArrayToStringPhh+0x34>
	{	
		t = *data;
		printString(hexToString(t));
		data -= 1;
	}
	str[length + 2] = 0;
     6b8:	ef 2d       	mov	r30, r15
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	e1 57       	subi	r30, 0x71	; 113
     6be:	fe 4f       	sbci	r31, 0xFE	; 254
     6c0:	12 82       	std	Z+2, r1	; 0x02
	return str;
}
     6c2:	8f e8       	ldi	r24, 0x8F	; 143
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	08 95       	ret

000006d2 <_Z14printHexNumberyh>:
	ascii[1] = hexToASCII(temp);
	ascii[2] = '\0';
	return ascii;
}

void printHexNumber(uint64_t data,uint8_t length){
     6d2:	0f 93       	push	r16
	printString(hexArrayToString(numToArray((data)),length));
     6d4:	0e 94 31 02 	call	0x462	; 0x462 <_Z10numToArrayy>
     6d8:	60 2f       	mov	r22, r16
     6da:	0e 94 38 03 	call	0x670	; 0x670 <_Z16hexArrayToStringPhh>
     6de:	0e 94 29 03 	call	0x652	; 0x652 <_Z11printStringPKc>
}
     6e2:	0f 91       	pop	r16
     6e4:	08 95       	ret

000006e6 <_ZN8NRF24L0114toggleActivateEv>:
		CSN = 1;
		return;
	}
	if(status & 0x10)
	writeSPIRegister(0x07,0x10,1);
}
     6e6:	41 98       	cbi	0x08, 1	; 8
     6e8:	80 e5       	ldi	r24, 0x50	; 80
     6ea:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18SPI_MasterTransmitc>
     6ee:	83 e7       	ldi	r24, 0x73	; 115
     6f0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18SPI_MasterTransmitc>
     6f4:	41 9a       	sbi	0x08, 1	; 8
     6f6:	08 95       	ret

000006f8 <_ZN8NRF24L0114sendSPICommandEh>:
     6f8:	86 2f       	mov	r24, r22
     6fa:	41 98       	cbi	0x08, 1	; 8
     6fc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18SPI_MasterTransmitc>
     700:	41 9a       	sbi	0x08, 1	; 8
     702:	08 95       	ret

00000704 <_ZN8NRF24L0115readSPIRegisterEhh>:
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	86 2f       	mov	r24, r22
     71a:	a4 2e       	mov	r10, r20
     71c:	41 98       	cbi	0x08, 1	; 8
     71e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18SPI_MasterTransmitc>
     722:	aa 20       	and	r10, r10
     724:	21 f1       	breq	.+72     	; 0x76e <_ZN8NRF24L0115readSPIRegisterEhh+0x6a>
     726:	d0 e0       	ldi	r29, 0x00	; 0
     728:	c0 e0       	ldi	r28, 0x00	; 0
     72a:	b1 2c       	mov	r11, r1
     72c:	c1 2c       	mov	r12, r1
     72e:	d1 2c       	mov	r13, r1
     730:	e1 2c       	mov	r14, r1
     732:	f1 2c       	mov	r15, r1
     734:	00 e0       	ldi	r16, 0x00	; 0
     736:	10 e0       	ldi	r17, 0x00	; 0
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18SPI_MasterTransmitc>
     73e:	2c 2f       	mov	r18, r28
     740:	28 2b       	or	r18, r24
     742:	3b 2d       	mov	r19, r11
     744:	4c 2d       	mov	r20, r12
     746:	5d 2d       	mov	r21, r13
     748:	6e 2d       	mov	r22, r14
     74a:	7f 2d       	mov	r23, r15
     74c:	80 2f       	mov	r24, r16
     74e:	91 2f       	mov	r25, r17
     750:	08 e0       	ldi	r16, 0x08	; 8
     752:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__ashldi3>
     756:	c2 2f       	mov	r28, r18
     758:	b3 2e       	mov	r11, r19
     75a:	c4 2e       	mov	r12, r20
     75c:	d5 2e       	mov	r13, r21
     75e:	e6 2e       	mov	r14, r22
     760:	f7 2e       	mov	r15, r23
     762:	08 2f       	mov	r16, r24
     764:	19 2f       	mov	r17, r25
     766:	df 5f       	subi	r29, 0xFF	; 255
     768:	da 11       	cpse	r29, r10
     76a:	e6 cf       	rjmp	.-52     	; 0x738 <_ZN8NRF24L0115readSPIRegisterEhh+0x34>
     76c:	08 c0       	rjmp	.+16     	; 0x77e <_ZN8NRF24L0115readSPIRegisterEhh+0x7a>
     76e:	c0 e0       	ldi	r28, 0x00	; 0
     770:	b1 2c       	mov	r11, r1
     772:	c1 2c       	mov	r12, r1
     774:	d1 2c       	mov	r13, r1
     776:	e1 2c       	mov	r14, r1
     778:	f1 2c       	mov	r15, r1
     77a:	00 e0       	ldi	r16, 0x00	; 0
     77c:	10 e0       	ldi	r17, 0x00	; 0
     77e:	41 9a       	sbi	0x08, 1	; 8
     780:	2c 2f       	mov	r18, r28
     782:	3b 2d       	mov	r19, r11
     784:	4c 2d       	mov	r20, r12
     786:	5d 2d       	mov	r21, r13
     788:	6e 2d       	mov	r22, r14
     78a:	7f 2d       	mov	r23, r15
     78c:	80 2f       	mov	r24, r16
     78e:	91 2f       	mov	r25, r17
     790:	08 e0       	ldi	r16, 0x08	; 8
     792:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__lshrdi3>
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	cf 90       	pop	r12
     7a6:	bf 90       	pop	r11
     7a8:	af 90       	pop	r10
     7aa:	08 95       	ret

000007ac <_ZN8NRF24L019printInfoEv>:
     7ac:	0f 93       	push	r16
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	ec 01       	movw	r28, r24
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 14 03 	call	0x628	; 0x628 <_Z15printStringCRNLPKc>
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	ce 01       	movw	r24, r28
     7c2:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0115readSPIRegisterEhh>
     7c6:	01 e0       	ldi	r16, 0x01	; 1
     7c8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z14printHexNumberyh>
     7cc:	8a e0       	ldi	r24, 0x0A	; 10
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0e 94 29 03 	call	0x652	; 0x652 <_Z11printStringPKc>
     7d4:	41 e0       	ldi	r20, 0x01	; 1
     7d6:	67 e1       	ldi	r22, 0x17	; 23
     7d8:	ce 01       	movw	r24, r28
     7da:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0115readSPIRegisterEhh>
     7de:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z14printHexNumberyh>
     7e2:	8f e0       	ldi	r24, 0x0F	; 15
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 29 03 	call	0x652	; 0x652 <_Z11printStringPKc>
     7ea:	6f ef       	ldi	r22, 0xFF	; 255
     7ec:	ce 01       	movw	r24, r28
     7ee:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN8NRF24L0114sendSPICommandEh>
     7f2:	28 2f       	mov	r18, r24
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z14printHexNumberyh>
     806:	89 e1       	ldi	r24, 0x19	; 25
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 29 03 	call	0x652	; 0x652 <_Z11printStringPKc>
     80e:	41 e0       	ldi	r20, 0x01	; 1
     810:	68 e0       	ldi	r22, 0x08	; 8
     812:	ce 01       	movw	r24, r28
     814:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0115readSPIRegisterEhh>
     818:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z11printNumbery>
     81c:	87 e2       	ldi	r24, 0x27	; 39
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 29 03 	call	0x652	; 0x652 <_Z11printStringPKc>
     824:	41 e0       	ldi	r20, 0x01	; 1
     826:	6d e1       	ldi	r22, 0x1D	; 29
     828:	ce 01       	movw	r24, r28
     82a:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0115readSPIRegisterEhh>
     82e:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z11printNumbery>
     832:	82 e3       	ldi	r24, 0x32	; 50
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 29 03 	call	0x652	; 0x652 <_Z11printStringPKc>
     83a:	0e 94 de 01 	call	0x3bc	; 0x3bc <_Z6millisv>
     83e:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z11printNumbery>
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <_ZN8NRF24L0116writeSPIRegisterEhyh>:
     84a:	9f 92       	push	r9
     84c:	af 92       	push	r10
     84e:	bf 92       	push	r11
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	c2 2f       	mov	r28, r18
     862:	d3 2f       	mov	r29, r19
     864:	b4 2e       	mov	r11, r20
     866:	a5 2e       	mov	r10, r21
     868:	41 98       	cbi	0x08, 1	; 8
     86a:	86 2f       	mov	r24, r22
     86c:	80 62       	ori	r24, 0x20	; 32
     86e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18SPI_MasterTransmitc>
     872:	98 2e       	mov	r9, r24
     874:	cc 20       	and	r12, r12
     876:	d1 f0       	breq	.+52     	; 0x8ac <_ZN8NRF24L0116writeSPIRegisterEhyh+0x62>
     878:	d1 2c       	mov	r13, r1
     87a:	8e 2d       	mov	r24, r14
     87c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z18SPI_MasterTransmitc>
     880:	2e 2d       	mov	r18, r14
     882:	3f 2d       	mov	r19, r15
     884:	40 2f       	mov	r20, r16
     886:	51 2f       	mov	r21, r17
     888:	6c 2f       	mov	r22, r28
     88a:	7d 2f       	mov	r23, r29
     88c:	8b 2d       	mov	r24, r11
     88e:	9a 2d       	mov	r25, r10
     890:	08 e0       	ldi	r16, 0x08	; 8
     892:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__lshrdi3>
     896:	e2 2e       	mov	r14, r18
     898:	f3 2e       	mov	r15, r19
     89a:	04 2f       	mov	r16, r20
     89c:	15 2f       	mov	r17, r21
     89e:	c6 2f       	mov	r28, r22
     8a0:	d7 2f       	mov	r29, r23
     8a2:	b8 2e       	mov	r11, r24
     8a4:	a9 2e       	mov	r10, r25
     8a6:	d3 94       	inc	r13
     8a8:	dc 10       	cpse	r13, r12
     8aa:	e7 cf       	rjmp	.-50     	; 0x87a <_ZN8NRF24L0116writeSPIRegisterEhyh+0x30>
     8ac:	41 9a       	sbi	0x08, 1	; 8
     8ae:	89 2d       	mov	r24, r9
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	bf 90       	pop	r11
     8c2:	af 90       	pop	r10
     8c4:	9f 90       	pop	r9
     8c6:	08 95       	ret

000008c8 <_ZN8NRF24L017powerONEb>:
     8c8:	cf 92       	push	r12
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	ec 01       	movw	r28, r24
     8d8:	e6 2e       	mov	r14, r22
     8da:	41 e0       	ldi	r20, 0x01	; 1
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0115readSPIRegisterEhh>
     8e2:	2d 7f       	andi	r18, 0xFD	; 253
     8e4:	ee 0c       	add	r14, r14
     8e6:	e2 2a       	or	r14, r18
     8e8:	eb 82       	std	Y+3, r14	; 0x03
     8ea:	cc 24       	eor	r12, r12
     8ec:	c3 94       	inc	r12
     8ee:	f1 2c       	mov	r15, r1
     8f0:	00 e0       	ldi	r16, 0x00	; 0
     8f2:	10 e0       	ldi	r17, 0x00	; 0
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	ce 01       	movw	r24, r28
     900:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	cf 90       	pop	r12
     912:	08 95       	ret

00000914 <_ZN8NRF24L017setModeEb>:
     914:	af 92       	push	r10
     916:	bf 92       	push	r11
     918:	cf 92       	push	r12
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	ec 01       	movw	r28, r24
     92a:	d6 2e       	mov	r13, r22
     92c:	41 e0       	ldi	r20, 0x01	; 1
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0115readSPIRegisterEhh>
     934:	2e 7f       	andi	r18, 0xFE	; 254
     936:	e2 2e       	mov	r14, r18
     938:	ed 28       	or	r14, r13
     93a:	eb 82       	std	Y+3, r14	; 0x03
     93c:	cc 24       	eor	r12, r12
     93e:	c3 94       	inc	r12
     940:	f1 2c       	mov	r15, r1
     942:	00 e0       	ldi	r16, 0x00	; 0
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	ce 01       	movw	r24, r28
     952:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     956:	dd 20       	and	r13, r13
     958:	29 f0       	breq	.+10     	; 0x964 <_ZN8NRF24L017setModeEb+0x50>
     95a:	8d ed       	ldi	r24, 0xDD	; 221
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z6NotifyPKc>
     962:	04 c0       	rjmp	.+8      	; 0x96c <_ZN8NRF24L017setModeEb+0x58>
     964:	87 eb       	ldi	r24, 0xB7	; 183
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z6NotifyPKc>
     96c:	41 e0       	ldi	r20, 0x01	; 1
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	ce 01       	movw	r24, r28
     972:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0115readSPIRegisterEhh>
     976:	ab 80       	ldd	r10, Y+3	; 0x03
     978:	b1 2c       	mov	r11, r1
     97a:	c1 2c       	mov	r12, r1
     97c:	d1 2c       	mov	r13, r1
     97e:	e1 2c       	mov	r14, r1
     980:	f1 2c       	mov	r15, r1
     982:	00 e0       	ldi	r16, 0x00	; 0
     984:	10 e0       	ldi	r17, 0x00	; 0
     986:	0e 94 a5 0b 	call	0x174a	; 0x174a <__cmpdi2>
     98a:	29 f0       	breq	.+10     	; 0x996 <_ZN8NRF24L017setModeEb+0x82>
     98c:	81 e8       	ldi	r24, 0x81	; 129
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z6NotifyPKc>
     994:	04 c0       	rjmp	.+8      	; 0x99e <_ZN8NRF24L017setModeEb+0x8a>
     996:	88 e6       	ldi	r24, 0x68	; 104
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z6NotifyPKc>
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	df 90       	pop	r13
     9ac:	cf 90       	pop	r12
     9ae:	bf 90       	pop	r11
     9b0:	af 90       	pop	r10
     9b2:	08 95       	ret

000009b4 <_ZN8NRF24L0120enableACKWithPayloadEb>:
     9b4:	cf 92       	push	r12
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	ec 01       	movw	r28, r24
     9c4:	e6 2e       	mov	r14, r22
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	6d e1       	ldi	r22, 0x1D	; 29
     9ca:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0115readSPIRegisterEhh>
     9ce:	2d 7f       	andi	r18, 0xFD	; 253
     9d0:	ee 0c       	add	r14, r14
     9d2:	e2 2a       	or	r14, r18
     9d4:	eb 82       	std	Y+3, r14	; 0x03
     9d6:	cc 24       	eor	r12, r12
     9d8:	c3 94       	inc	r12
     9da:	f1 2c       	mov	r15, r1
     9dc:	00 e0       	ldi	r16, 0x00	; 0
     9de:	10 e0       	ldi	r17, 0x00	; 0
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	6d e1       	ldi	r22, 0x1D	; 29
     9ea:	ce 01       	movw	r24, r28
     9ec:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	cf 90       	pop	r12
     9fe:	08 95       	ret

00000a00 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>:
     a00:	cf 92       	push	r12
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	ec 01       	movw	r28, r24
     a10:	e6 2e       	mov	r14, r22
     a12:	41 e0       	ldi	r20, 0x01	; 1
     a14:	6d e1       	ldi	r22, 0x1D	; 29
     a16:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0115readSPIRegisterEhh>
     a1a:	2b 7f       	andi	r18, 0xFB	; 251
     a1c:	ee 0c       	add	r14, r14
     a1e:	ee 0c       	add	r14, r14
     a20:	e2 2a       	or	r14, r18
     a22:	eb 82       	std	Y+3, r14	; 0x03
     a24:	cc 24       	eor	r12, r12
     a26:	c3 94       	inc	r12
     a28:	f1 2c       	mov	r15, r1
     a2a:	00 e0       	ldi	r16, 0x00	; 0
     a2c:	10 e0       	ldi	r17, 0x00	; 0
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	6d e1       	ldi	r22, 0x1D	; 29
     a38:	ce 01       	movw	r24, r28
     a3a:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	cf 90       	pop	r12
     a4c:	08 95       	ret

00000a4e <_ZN8NRF24L0118enableDPLForRXPipeEhb>:
     a4e:	af 92       	push	r10
     a50:	bf 92       	push	r11
     a52:	cf 92       	push	r12
     a54:	ef 92       	push	r14
     a56:	ff 92       	push	r15
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	66 30       	cpi	r22, 0x06	; 6
     a62:	48 f5       	brcc	.+82     	; 0xab6 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x68>
     a64:	c4 2f       	mov	r28, r20
     a66:	d6 2f       	mov	r29, r22
     a68:	5c 01       	movw	r10, r24
     a6a:	41 e0       	ldi	r20, 0x01	; 1
     a6c:	6c e1       	ldi	r22, 0x1C	; 28
     a6e:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0115readSPIRegisterEhh>
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0d 2e       	mov	r0, r29
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x30>
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	0a 94       	dec	r0
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x2c>
     a82:	80 95       	com	r24
     a84:	82 23       	and	r24, r18
     a86:	4c 2f       	mov	r20, r28
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x42>
     a8c:	44 0f       	add	r20, r20
     a8e:	55 1f       	adc	r21, r21
     a90:	da 95       	dec	r29
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <_ZN8NRF24L0118enableDPLForRXPipeEhb+0x3e>
     a94:	e8 2e       	mov	r14, r24
     a96:	e4 2a       	or	r14, r20
     a98:	f5 01       	movw	r30, r10
     a9a:	e3 82       	std	Z+3, r14	; 0x03
     a9c:	cc 24       	eor	r12, r12
     a9e:	c3 94       	inc	r12
     aa0:	f1 2c       	mov	r15, r1
     aa2:	00 e0       	ldi	r16, 0x00	; 0
     aa4:	10 e0       	ldi	r17, 0x00	; 0
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	6c e1       	ldi	r22, 0x1C	; 28
     ab0:	c5 01       	movw	r24, r10
     ab2:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	cf 90       	pop	r12
     ac4:	bf 90       	pop	r11
     ac6:	af 90       	pop	r10
     ac8:	08 95       	ret

00000aca <_ZN8NRF24L0113setRFDataRateEb>:
     aca:	cf 92       	push	r12
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	ec 01       	movw	r28, r24
     ada:	e6 2e       	mov	r14, r22
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	66 e0       	ldi	r22, 0x06	; 6
     ae0:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0115readSPIRegisterEhh>
     ae4:	27 7f       	andi	r18, 0xF7	; 247
     ae6:	ee 0c       	add	r14, r14
     ae8:	ee 0c       	add	r14, r14
     aea:	ee 0c       	add	r14, r14
     aec:	e2 2a       	or	r14, r18
     aee:	eb 82       	std	Y+3, r14	; 0x03
     af0:	cc 24       	eor	r12, r12
     af2:	c3 94       	inc	r12
     af4:	f1 2c       	mov	r15, r1
     af6:	00 e0       	ldi	r16, 0x00	; 0
     af8:	10 e0       	ldi	r17, 0x00	; 0
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	66 e0       	ldi	r22, 0x06	; 6
     b04:	ce 01       	movw	r24, r28
     b06:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN8NRF24L0116writeSPIRegisterEhyh>
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	cf 90       	pop	r12
     b18:	08 95       	ret

00000b1a <_ZN8NRF24L0118setTransmitAddressEy>:
	}
	CSN = 1;
	return status;
}

void NRF24L01::setTransmitAddress(uint64_t address){
     b1a:	cf 92       	push	r12
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
	writeSPIRegister(TX_ADDR, address, 5);
     b24:	0f 2e       	mov	r0, r31
     b26:	f5 e0       	ldi	r31, 0x05	; 5
     b28:	cf 2e       	mov	r12, r31
     b2a:	f0 2d       	mov	r31, r0
     b2c:	e0 2e       	mov	r14, r16
     b2e:	f1 2e       	mov	r15, r17
     b30:	02 2f       	mov	r16, r18
     b32:	13 2f       	mov	r17, r19
     b34:	24 2f       	mov	r18, r20
     b36:	35 2f       	mov	r19, r21
     b38:	46 2f       	mov	r20, r22
     b3a:	57 2f       	mov	r21, r23
     b3c:	60 e1       	ldi	r22, 0x10	; 16
     b3e:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN8NRF24L0116writeSPIRegisterEhyh>
}
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	cf 90       	pop	r12
     b4c:	08 95       	ret

00000b4e <_ZN8NRF24L0118setReceive0AddressEy>:

void NRF24L01::setReceive0Address(uint64_t address){
     b4e:	cf 92       	push	r12
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
	writeSPIRegister(RX_ADDR_P0, address, 5);
     b58:	0f 2e       	mov	r0, r31
     b5a:	f5 e0       	ldi	r31, 0x05	; 5
     b5c:	cf 2e       	mov	r12, r31
     b5e:	f0 2d       	mov	r31, r0
     b60:	e0 2e       	mov	r14, r16
     b62:	f1 2e       	mov	r15, r17
     b64:	02 2f       	mov	r16, r18
     b66:	13 2f       	mov	r17, r19
     b68:	24 2f       	mov	r18, r20
     b6a:	35 2f       	mov	r19, r21
     b6c:	46 2f       	mov	r20, r22
     b6e:	57 2f       	mov	r21, r23
     b70:	6a e0       	ldi	r22, 0x0A	; 10
     b72:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN8NRF24L0116writeSPIRegisterEhyh>
}
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	cf 90       	pop	r12
     b80:	08 95       	ret

00000b82 <_ZN8NRF24L0110initializeEv>:
	temp &= ~(1 << PWR_UP);
	temp |= (set << PWR_UP);
	writeSPIRegister(NRF_CONFIG, temp, 1);
}

void NRF24L01::initialize(){
     b82:	cf 92       	push	r12
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	ec 01       	movw	r28, r24
	CSN_D = 1;
     b92:	39 9a       	sbi	0x07, 1	; 7
	CE_D = 1;
     b94:	38 9a       	sbi	0x07, 0	; 7
	CE = 1;
     b96:	40 9a       	sbi	0x08, 0	; 8
	LINK_LED_D = 1;
     b98:	57 9a       	sbi	0x0a, 7	; 10
	rcount = 0;
     b9a:	1a 82       	std	Y+2, r1	; 0x02
	#ifdef STATS
	Notify(PSTR("Master TX Payload length set to : "));
     b9c:	85 e2       	ldi	r24, 0x25	; 37
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z6NotifyPKc>
	printNumber(BufferLength_MasterTX);
     ba4:	28 81       	ld	r18, Y
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	50 e0       	ldi	r21, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z11printNumbery>
	Notify(PSTR("Master RX Payload length set to : "));
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z6NotifyPKc>
	printNumber(BufferLength_MasterRX);
     bc0:	29 81       	ldd	r18, Y+1	; 0x01
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z11printNumbery>
	#endif
	setTransmitAddress(0xBABABABAB5);
     bd4:	05 eb       	ldi	r16, 0xB5	; 181
     bd6:	1a eb       	ldi	r17, 0xBA	; 186
     bd8:	2a eb       	ldi	r18, 0xBA	; 186
     bda:	3a eb       	ldi	r19, 0xBA	; 186
     bdc:	4a eb       	ldi	r20, 0xBA	; 186
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	ce 01       	movw	r24, r28
     be6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN8NRF24L0118setTransmitAddressEy>
	setReceive0Address(0xBABABABAB5);
     bea:	2a eb       	ldi	r18, 0xBA	; 186
     bec:	3a eb       	ldi	r19, 0xBA	; 186
     bee:	4a eb       	ldi	r20, 0xBA	; 186
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	ce 01       	movw	r24, r28
     bf8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN8NRF24L0118setReceive0AddressEy>
	setRFDataRate(1);
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	ce 01       	movw	r24, r28
     c00:	0e 94 65 05 	call	0xaca	; 0xaca <_ZN8NRF24L0113setRFDataRateEb>
	setMode(Mode);
     c04:	6f 81       	ldd	r22, Y+7	; 0x07
     c06:	ce 01       	movw	r24, r28
     c08:	0e 94 8a 04 	call	0x914	; 0x914 <_ZN8NRF24L017setModeEb>
	if(Enable_DPL){
     c0c:	88 85       	ldd	r24, Y+8	; 0x08
     c0e:	88 23       	and	r24, r24
     c10:	99 f0       	breq	.+38     	; 0xc38 <_ZN8NRF24L0110initializeEv+0xb6>
		toggleActivate();
     c12:	ce 01       	movw	r24, r28
     c14:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN8NRF24L0114toggleActivateEv>
		enableDynamicPayloadLength(true);
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	ce 01       	movw	r24, r28
     c1c:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN8NRF24L0126enableDynamicPayloadLengthEb>
		enableDPLForRXPipe(0, true);
     c20:	41 e0       	ldi	r20, 0x01	; 1
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	ce 01       	movw	r24, r28
     c26:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN8NRF24L0118enableDPLForRXPipeEhb>
		enableACKWithPayload(true);
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	ce 01       	movw	r24, r28
     c2e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_ZN8NRF24L0120enableACKWithPayloadEb>
	}
	if(!Enable_DPL){
     c32:	88 85       	ldd	r24, Y+8	; 0x08
     c34:	81 11       	cpse	r24, r1
     c36:	0e c0       	rjmp	.+28     	; 0xc54 <_ZN8NRF24L0110initializeEv+0xd2>
		writeSPIRegister(0x11,BufferLength_MasterTX,1);
     c38:	e8 80       	ld	r14, Y
     c3a:	cc 24       	eor	r12, r12
     c3c:	c3 94       	inc	r12
     c3e:	f1 2c       	mov	r15, r1
     c40:	00 e0       	ldi	r16, 0x00	; 0
     c42:	10 e0       	ldi	r17, 0x00	; 0
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	61 e1       	ldi	r22, 0x11	; 17
     c4e:	ce 01       	movw	r24, r28
     c50:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN8NRF24L0116writeSPIRegisterEhyh>
	}
	powerON(true);
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	ce 01       	movw	r24, r28
     c58:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN8NRF24L017powerONEb>
}
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	cf 90       	pop	r12
     c6a:	08 95       	ret

00000c6c <_ZN8NRF24L01C1Ehhb>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c6c:	3f ef       	ldi	r19, 0xFF	; 255
     c6e:	50 e7       	ldi	r21, 0x70	; 112
     c70:	72 e0       	ldi	r23, 0x02	; 2
     c72:	31 50       	subi	r19, 0x01	; 1
     c74:	50 40       	sbci	r21, 0x00	; 0
     c76:	70 40       	sbci	r23, 0x00	; 0
     c78:	e1 f7       	brne	.-8      	; 0xc72 <_ZN8NRF24L01C1Ehhb+0x6>
     c7a:	00 c0       	rjmp	.+0      	; 0xc7c <_ZN8NRF24L01C1Ehhb+0x10>
     c7c:	00 00       	nop

#include "NRF24L01.h"

NRF24L01::NRF24L01(uint8_t Bufferlength_MasterTX, uint8_t Bufferlength_MasterRX, bool mode){
	_delay_ms(100);
	Mode = mode;
     c7e:	fc 01       	movw	r30, r24
     c80:	27 83       	std	Z+7, r18	; 0x07
	Enable_DPL = 1;
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	20 87       	std	Z+8, r18	; 0x08
	BufferLength_MasterTX = Bufferlength_MasterTX;
     c86:	60 83       	st	Z, r22
	BufferLength_MasterRX = Bufferlength_MasterRX;
     c88:	41 83       	std	Z+1, r20	; 0x01
	initialize();
     c8a:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN8NRF24L0110initializeEv>
     c8e:	08 95       	ret

00000c90 <_ZN11SwitchClass9doNothingEh>:
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
     c90:	08 95       	ret

00000c92 <_ZN11SwitchClass5beginEv>:
     c92:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <_ZN11SwitchClass1iE>
     c96:	88 e4       	ldi	r24, 0x48	; 72
     c98:	96 e0       	ldi	r25, 0x06	; 6
     c9a:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <_ZN11SwitchClass17PinStateChangePtrE+0x1>
     c9e:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <_ZN11SwitchClass17PinStateChangePtrE>
     ca2:	08 95       	ret

00000ca4 <_ZN11SwitchClass20callOnPinStateChangeEPFvhE>:
     ca4:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <_ZN11SwitchClass17PinStateChangePtrE+0x1>
     ca8:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <_ZN11SwitchClass17PinStateChangePtrE>
     cac:	08 95       	ret

00000cae <_ZN11SwitchClass18doubleWaitCompleteEv>:
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	ec 01       	movw	r28, r24
     cb4:	1b a2       	std	Y+35, r1	; 0x23
     cb6:	1c a2       	std	Y+36, r1	; 0x24
     cb8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN10TimerClass10resetTimerEv>
     cbc:	ce 01       	movw	r24, r28
     cbe:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZN10TimerClass18resetCallbackTimerEv>
     cc2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cc4:	81 11       	cpse	r24, r1
     cc6:	04 c0       	rjmp	.+8      	; 0xcd0 <_ZN11SwitchClass18doubleWaitCompleteEv+0x22>
     cc8:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <_ZN11SwitchClass11AllShort_ENE>
     ccc:	88 23       	and	r24, r24
     cce:	c9 f0       	breq	.+50     	; 0xd02 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     cd0:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <_ZN11SwitchClass13AllSamePtr_ENE>
     cd4:	88 23       	and	r24, r24
     cd6:	61 f0       	breq	.+24     	; 0xcf0 <_ZN11SwitchClass18doubleWaitCompleteEv+0x42>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     cde:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <_ZN11SwitchClass16AllShortPressPtrE>
     ce2:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <_ZN11SwitchClass16AllShortPressPtrE+0x1>
     ce6:	30 97       	sbiw	r30, 0x00	; 0
     ce8:	61 f0       	breq	.+24     	; 0xd02 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     cea:	8e a1       	ldd	r24, Y+38	; 0x26
     cec:	09 95       	icall
     cee:	09 c0       	rjmp	.+18     	; 0xd02 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     cf6:	ee 85       	ldd	r30, Y+14	; 0x0e
     cf8:	ff 85       	ldd	r31, Y+15	; 0x0f
     cfa:	30 97       	sbiw	r30, 0x00	; 0
     cfc:	11 f0       	breq	.+4      	; 0xd02 <_ZN11SwitchClass18doubleWaitCompleteEv+0x54>
     cfe:	8e a1       	ldd	r24, Y+38	; 0x26
     d00:	09 95       	icall
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <_ZN11SwitchClass17callAllDoubleWaitEh>:
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <_ZN11SwitchClass1iE>
     d10:	99 23       	and	r25, r25
     d12:	c1 f0       	breq	.+48     	; 0xd44 <_ZN11SwitchClass17callAllDoubleWaitEh+0x3c>
     d14:	d8 2f       	mov	r29, r24
     d16:	c0 e0       	ldi	r28, 0x00	; 0
     d18:	ec 2f       	mov	r30, r28
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	ee 0f       	add	r30, r30
     d1e:	ff 1f       	adc	r31, r31
     d20:	ef 50       	subi	r30, 0x0F	; 15
     d22:	fe 4f       	sbci	r31, 0xFE	; 254
     d24:	01 90       	ld	r0, Z+
     d26:	f0 81       	ld	r31, Z
     d28:	e0 2d       	mov	r30, r0
     d2a:	91 a5       	ldd	r25, Z+41	; 0x29
     d2c:	9d 13       	cpse	r25, r29
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     d30:	30 97       	sbiw	r30, 0x00	; 0
     d32:	19 f0       	breq	.+6      	; 0xd3a <_ZN11SwitchClass17callAllDoubleWaitEh+0x32>
     d34:	cf 01       	movw	r24, r30
     d36:	0e 94 57 06 	call	0xcae	; 0xcae <_ZN11SwitchClass18doubleWaitCompleteEv>
     d3a:	cf 5f       	subi	r28, 0xFF	; 255
     d3c:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <_ZN11SwitchClass1iE>
     d40:	c9 17       	cp	r28, r25
     d42:	50 f3       	brcs	.-44     	; 0xd18 <_ZN11SwitchClass17callAllDoubleWaitEh+0x10>
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <_ZN11SwitchClass16updatePinBuffersEv>:
     d4a:	83 b1       	in	r24, 0x03	; 3
     d4c:	ec ee       	ldi	r30, 0xEC	; 236
     d4e:	f1 e0       	ldi	r31, 0x01	; 1
     d50:	80 83       	st	Z, r24
     d52:	86 b1       	in	r24, 0x06	; 6
     d54:	81 83       	std	Z+1, r24	; 0x01
     d56:	89 b1       	in	r24, 0x09	; 9
     d58:	82 83       	std	Z+2, r24	; 0x02
     d5a:	08 95       	ret

00000d5c <_ZN11SwitchClass10pollSwitchEv>:
     d5c:	fc 01       	movw	r30, r24
     d5e:	80 a5       	ldd	r24, Z+40	; 0x28
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	49 f0       	breq	.+18     	; 0xd76 <_ZN11SwitchClass10pollSwitchEv+0x1a>
     d64:	18 f0       	brcs	.+6      	; 0xd6c <_ZN11SwitchClass10pollSwitchEv+0x10>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	59 f0       	breq	.+22     	; 0xd80 <_ZN11SwitchClass10pollSwitchEv+0x24>
     d6a:	0e c0       	rjmp	.+28     	; 0xd88 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     d6c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <_ZN11SwitchClass9PinBufferE>
     d70:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <_ZN11SwitchClass11SwitchStateE>
     d74:	09 c0       	rjmp	.+18     	; 0xd88 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     d76:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <_ZN11SwitchClass9PinBufferE+0x1>
     d7a:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <_ZN11SwitchClass11SwitchStateE>
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <_ZN11SwitchClass10pollSwitchEv+0x2c>
     d80:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <_ZN11SwitchClass9PinBufferE+0x2>
     d84:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <_ZN11SwitchClass11SwitchStateE>
     d88:	82 8d       	ldd	r24, Z+26	; 0x1a
     d8a:	81 a3       	std	Z+33, r24	; 0x21
     d8c:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <_ZN11SwitchClass11SwitchStateE>
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	07 a0       	ldd	r0, Z+39	; 0x27
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <_ZN11SwitchClass10pollSwitchEv+0x3e>
     d96:	35 95       	asr	r19
     d98:	27 95       	ror	r18
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <_ZN11SwitchClass10pollSwitchEv+0x3a>
     d9e:	21 70       	andi	r18, 0x01	; 1
     da0:	22 8f       	std	Z+26, r18	; 0x1a
     da2:	08 95       	ret

00000da4 <_ZN11SwitchClass18processStateChangeEv>:
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	ec 01       	movw	r28, r24
     daa:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN11SwitchClass10pollSwitchEv>
     dae:	8a 8d       	ldd	r24, Y+26	; 0x1a
     db0:	81 11       	cpse	r24, r1
     db2:	26 c0       	rjmp	.+76     	; 0xe00 <_ZN11SwitchClass18processStateChangeEv+0x5c>
     db4:	89 a1       	ldd	r24, Y+33	; 0x21
     db6:	88 23       	and	r24, r24
     db8:	09 f4       	brne	.+2      	; 0xdbc <_ZN11SwitchClass18processStateChangeEv+0x18>
     dba:	84 c0       	rjmp	.+264    	; 0xec4 <_ZN11SwitchClass18processStateChangeEv+0x120>
     dbc:	e8 8d       	ldd	r30, Y+24	; 0x18
     dbe:	f9 8d       	ldd	r31, Y+25	; 0x19
     dc0:	30 97       	sbiw	r30, 0x00	; 0
     dc2:	11 f0       	breq	.+4      	; 0xdc8 <_ZN11SwitchClass18processStateChangeEv+0x24>
     dc4:	8e a1       	ldd	r24, Y+38	; 0x26
     dc6:	09 95       	icall
     dc8:	8b a1       	ldd	r24, Y+35	; 0x23
     dca:	81 11       	cpse	r24, r1
     dcc:	08 c0       	rjmp	.+16     	; 0xdde <_ZN11SwitchClass18processStateChangeEv+0x3a>
     dce:	22 ef       	ldi	r18, 0xF2	; 242
     dd0:	37 e0       	ldi	r19, 0x07	; 7
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	6c eb       	ldi	r22, 0xBC	; 188
     dd6:	72 e0       	ldi	r23, 0x02	; 2
     dd8:	ce 01       	movw	r24, r28
     dda:	0e 94 2b 09 	call	0x1256	; 0x1256 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	8a a3       	std	Y+34, r24	; 0x22
     de2:	8b a1       	ldd	r24, Y+35	; 0x23
     de4:	88 23       	and	r24, r24
     de6:	41 f0       	breq	.+16     	; 0xdf8 <_ZN11SwitchClass18processStateChangeEv+0x54>
     de8:	68 e5       	ldi	r22, 0x58	; 88
     dea:	72 e0       	ldi	r23, 0x02	; 2
     dec:	ce 01       	movw	r24, r28
     dee:	0e 94 46 09 	call	0x128c	; 0x128c <_ZN10TimerClass7setTimeEj>
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	8c a3       	std	Y+36, r24	; 0x24
     df6:	1b a2       	std	Y+35, r1	; 0x23
     df8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dfa:	88 23       	and	r24, r24
     dfc:	09 f4       	brne	.+2      	; 0xe00 <_ZN11SwitchClass18processStateChangeEv+0x5c>
     dfe:	62 c0       	rjmp	.+196    	; 0xec4 <_ZN11SwitchClass18processStateChangeEv+0x120>
     e00:	89 a1       	ldd	r24, Y+33	; 0x21
     e02:	81 11       	cpse	r24, r1
     e04:	5f c0       	rjmp	.+190    	; 0xec4 <_ZN11SwitchClass18processStateChangeEv+0x120>
     e06:	ee 89       	ldd	r30, Y+22	; 0x16
     e08:	ff 89       	ldd	r31, Y+23	; 0x17
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	11 f0       	breq	.+4      	; 0xe12 <_ZN11SwitchClass18processStateChangeEv+0x6e>
     e0e:	8e a1       	ldd	r24, Y+38	; 0x26
     e10:	09 95       	icall
     e12:	8c a1       	ldd	r24, Y+36	; 0x24
     e14:	81 11       	cpse	r24, r1
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <_ZN11SwitchClass18processStateChangeEv+0x80>
     e18:	ce 01       	movw	r24, r28
     e1a:	0e 94 3e 09 	call	0x127c	; 0x127c <_ZN10TimerClass15getCallBackTimeEv>
     e1e:	9d a7       	std	Y+45, r25	; 0x2d
     e20:	8c a7       	std	Y+44, r24	; 0x2c
     e22:	05 c0       	rjmp	.+10     	; 0xe2e <_ZN11SwitchClass18processStateChangeEv+0x8a>
     e24:	ce 01       	movw	r24, r28
     e26:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_ZN10TimerClass7getTimeEv>
     e2a:	9d a7       	std	Y+45, r25	; 0x2d
     e2c:	8c a7       	std	Y+44, r24	; 0x2c
     e2e:	ce 01       	movw	r24, r28
     e30:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN10TimerClass10resetTimerEv>
     e34:	ce 01       	movw	r24, r28
     e36:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZN10TimerClass18resetCallbackTimerEv>
     e3a:	1a a2       	std	Y+34, r1	; 0x22
     e3c:	8c a5       	ldd	r24, Y+44	; 0x2c
     e3e:	9d a5       	ldd	r25, Y+45	; 0x2d
     e40:	0b 97       	sbiw	r24, 0x0b	; 11
     e42:	8d 34       	cpi	r24, 0x4D	; 77
     e44:	92 40       	sbci	r25, 0x02	; 2
     e46:	98 f5       	brcc	.+102    	; 0xeae <_ZN11SwitchClass18processStateChangeEv+0x10a>
     e48:	8c a1       	ldd	r24, Y+36	; 0x24
     e4a:	81 11       	cpse	r24, r1
     e4c:	17 c0       	rjmp	.+46     	; 0xe7c <_ZN11SwitchClass18processStateChangeEv+0xd8>
     e4e:	8d a1       	ldd	r24, Y+37	; 0x25
     e50:	81 11       	cpse	r24, r1
     e52:	2f c0       	rjmp	.+94     	; 0xeb2 <_ZN11SwitchClass18processStateChangeEv+0x10e>
     e54:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e56:	88 23       	and	r24, r24
     e58:	59 f0       	breq	.+22     	; 0xe70 <_ZN11SwitchClass18processStateChangeEv+0xcc>
     e5a:	24 e8       	ldi	r18, 0x84	; 132
     e5c:	36 e0       	ldi	r19, 0x06	; 6
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	64 e6       	ldi	r22, 0x64	; 100
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	ce 01       	movw	r24, r28
     e66:	0e 94 2b 09 	call	0x1256	; 0x1256 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	8b a3       	std	Y+35, r24	; 0x23
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <_ZN11SwitchClass18processStateChangeEv+0xd2>
     e70:	ce 01       	movw	r24, r28
     e72:	0e 94 57 06 	call	0xcae	; 0xcae <_ZN11SwitchClass18doubleWaitCompleteEv>
     e76:	8c a1       	ldd	r24, Y+36	; 0x24
     e78:	88 23       	and	r24, r24
     e7a:	09 f1       	breq	.+66     	; 0xebe <_ZN11SwitchClass18processStateChangeEv+0x11a>
     e7c:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <_ZN11SwitchClass13AllSamePtr_ENE>
     e80:	88 23       	and	r24, r24
     e82:	61 f0       	breq	.+24     	; 0xe9c <_ZN11SwitchClass18processStateChangeEv+0xf8>
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     e8a:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <_ZN11SwitchClass17AllDoublePressPtrE>
     e8e:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <_ZN11SwitchClass17AllDoublePressPtrE+0x1>
     e92:	30 97       	sbiw	r30, 0x00	; 0
     e94:	61 f0       	breq	.+24     	; 0xeae <_ZN11SwitchClass18processStateChangeEv+0x10a>
     e96:	8e a1       	ldd	r24, Y+38	; 0x26
     e98:	09 95       	icall
     e9a:	09 c0       	rjmp	.+18     	; 0xeae <_ZN11SwitchClass18processStateChangeEv+0x10a>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     ea2:	ea 89       	ldd	r30, Y+18	; 0x12
     ea4:	fb 89       	ldd	r31, Y+19	; 0x13
     ea6:	30 97       	sbiw	r30, 0x00	; 0
     ea8:	11 f0       	breq	.+4      	; 0xeae <_ZN11SwitchClass18processStateChangeEv+0x10a>
     eaa:	8e a1       	ldd	r24, Y+38	; 0x26
     eac:	09 95       	icall
     eae:	8d a1       	ldd	r24, Y+37	; 0x25
     eb0:	81 11       	cpse	r24, r1
     eb2:	1d a2       	std	Y+37, r1	; 0x25
     eb4:	8c a1       	ldd	r24, Y+36	; 0x24
     eb6:	88 23       	and	r24, r24
     eb8:	29 f0       	breq	.+10     	; 0xec4 <_ZN11SwitchClass18processStateChangeEv+0x120>
     eba:	1c a2       	std	Y+36, r1	; 0x24
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <_ZN11SwitchClass18processStateChangeEv+0x120>
     ebe:	8d a1       	ldd	r24, Y+37	; 0x25
     ec0:	81 11       	cpse	r24, r1
     ec2:	f7 cf       	rjmp	.-18     	; 0xeb2 <_ZN11SwitchClass18processStateChangeEv+0x10e>
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	08 95       	ret

00000eca <_ZN11SwitchClass25callAllProcessStateChangeEv>:
     eca:	cf 93       	push	r28
     ecc:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZN11SwitchClass1iE>
     ed0:	88 23       	and	r24, r24
     ed2:	91 f0       	breq	.+36     	; 0xef8 <_ZN11SwitchClass25callAllProcessStateChangeEv+0x2e>
     ed4:	c0 e0       	ldi	r28, 0x00	; 0
     ed6:	ec 2f       	mov	r30, r28
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	ee 0f       	add	r30, r30
     edc:	ff 1f       	adc	r31, r31
     ede:	ef 50       	subi	r30, 0x0F	; 15
     ee0:	fe 4f       	sbci	r31, 0xFE	; 254
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	11 f0       	breq	.+4      	; 0xeee <_ZN11SwitchClass25callAllProcessStateChangeEv+0x24>
     eea:	0e 94 d2 06 	call	0xda4	; 0xda4 <_ZN11SwitchClass18processStateChangeEv>
     eee:	cf 5f       	subi	r28, 0xFF	; 255
     ef0:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZN11SwitchClass1iE>
     ef4:	c8 17       	cp	r28, r24
     ef6:	78 f3       	brcs	.-34     	; 0xed6 <_ZN11SwitchClass25callAllProcessStateChangeEv+0xc>
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <_ZN11SwitchClass16longWaitCompleteEv>:
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	ec 01       	movw	r28, r24
     f02:	18 a2       	std	Y+32, r1	; 0x20
     f04:	1b a2       	std	Y+35, r1	; 0x23
     f06:	1c a2       	std	Y+36, r1	; 0x24
     f08:	8d a1       	ldd	r24, Y+37	; 0x25
     f0a:	88 23       	and	r24, r24
     f0c:	89 f1       	breq	.+98     	; 0xf70 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     f0e:	ce 01       	movw	r24, r28
     f10:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN11SwitchClass16updatePinBuffersEv>
     f14:	ce 01       	movw	r24, r28
     f16:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN11SwitchClass10pollSwitchEv>
     f1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f1c:	81 11       	cpse	r24, r1
     f1e:	28 c0       	rjmp	.+80     	; 0xf70 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     f20:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f22:	81 11       	cpse	r24, r1
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <_ZN11SwitchClass16longWaitCompleteEv+0x32>
     f26:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <_ZN11SwitchClass20AllContinuousLong_ENE>
     f2a:	88 23       	and	r24, r24
     f2c:	09 f1       	breq	.+66     	; 0xf70 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     f2e:	22 ef       	ldi	r18, 0xF2	; 242
     f30:	37 e0       	ldi	r19, 0x07	; 7
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	66 e4       	ldi	r22, 0x46	; 70
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	ce 01       	movw	r24, r28
     f3a:	0e 94 2b 09 	call	0x1256	; 0x1256 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     f3e:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <_ZN11SwitchClass13AllSamePtr_ENE>
     f42:	88 23       	and	r24, r24
     f44:	61 f0       	breq	.+24     	; 0xf5e <_ZN11SwitchClass16longWaitCompleteEv+0x62>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     f4c:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <_ZN11SwitchClass25AllContinuousLongPressPtrE>
     f50:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <_ZN11SwitchClass25AllContinuousLongPressPtrE+0x1>
     f54:	30 97       	sbiw	r30, 0x00	; 0
     f56:	61 f0       	breq	.+24     	; 0xf70 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     f58:	8e a1       	ldd	r24, Y+38	; 0x26
     f5a:	09 95       	icall
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     f64:	ec 89       	ldd	r30, Y+20	; 0x14
     f66:	fd 89       	ldd	r31, Y+21	; 0x15
     f68:	30 97       	sbiw	r30, 0x00	; 0
     f6a:	11 f0       	breq	.+4      	; 0xf70 <_ZN11SwitchClass16longWaitCompleteEv+0x74>
     f6c:	8e a1       	ldd	r24, Y+38	; 0x26
     f6e:	09 95       	icall
     f70:	8a a1       	ldd	r24, Y+34	; 0x22
     f72:	88 23       	and	r24, r24
     f74:	a1 f1       	breq	.+104    	; 0xfde <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     f76:	ce 01       	movw	r24, r28
     f78:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN11SwitchClass16updatePinBuffersEv>
     f7c:	ce 01       	movw	r24, r28
     f7e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN11SwitchClass10pollSwitchEv>
     f82:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f84:	81 11       	cpse	r24, r1
     f86:	2b c0       	rjmp	.+86     	; 0xfde <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     f88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f8a:	81 11       	cpse	r24, r1
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <_ZN11SwitchClass16longWaitCompleteEv+0x9a>
     f8e:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <_ZN11SwitchClass10AllLong_ENE>
     f92:	88 23       	and	r24, r24
     f94:	21 f1       	breq	.+72     	; 0xfde <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     f96:	1a a2       	std	Y+34, r1	; 0x22
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	8d a3       	std	Y+37, r24	; 0x25
     f9c:	22 ef       	ldi	r18, 0xF2	; 242
     f9e:	37 e0       	ldi	r19, 0x07	; 7
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	62 e3       	ldi	r22, 0x32	; 50
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	ce 01       	movw	r24, r28
     fa8:	0e 94 2b 09 	call	0x1256	; 0x1256 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
     fac:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <_ZN11SwitchClass13AllSamePtr_ENE>
     fb0:	88 23       	and	r24, r24
     fb2:	61 f0       	breq	.+24     	; 0xfcc <_ZN11SwitchClass16longWaitCompleteEv+0xd0>
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     fba:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <_ZN11SwitchClass15AllLongPressPtrE>
     fbe:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <_ZN11SwitchClass15AllLongPressPtrE+0x1>
     fc2:	30 97       	sbiw	r30, 0x00	; 0
     fc4:	61 f0       	breq	.+24     	; 0xfde <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     fc6:	8e a1       	ldd	r24, Y+38	; 0x26
     fc8:	09 95       	icall
     fca:	09 c0       	rjmp	.+18     	; 0xfde <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
     fd2:	e8 89       	ldd	r30, Y+16	; 0x10
     fd4:	f9 89       	ldd	r31, Y+17	; 0x11
     fd6:	30 97       	sbiw	r30, 0x00	; 0
     fd8:	11 f0       	breq	.+4      	; 0xfde <_ZN11SwitchClass16longWaitCompleteEv+0xe2>
     fda:	8e a1       	ldd	r24, Y+38	; 0x26
     fdc:	09 95       	icall
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <_ZN11SwitchClass20callAllOjectLongWaitEh>:
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <_ZN11SwitchClass1iE>
     fec:	99 23       	and	r25, r25
     fee:	c1 f0       	breq	.+48     	; 0x1020 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x3c>
     ff0:	d8 2f       	mov	r29, r24
     ff2:	c0 e0       	ldi	r28, 0x00	; 0
     ff4:	ec 2f       	mov	r30, r28
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	ef 50       	subi	r30, 0x0F	; 15
     ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    1000:	01 90       	ld	r0, Z+
    1002:	f0 81       	ld	r31, Z
    1004:	e0 2d       	mov	r30, r0
    1006:	91 a5       	ldd	r25, Z+41	; 0x29
    1008:	9d 13       	cpse	r25, r29
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    100c:	30 97       	sbiw	r30, 0x00	; 0
    100e:	19 f0       	breq	.+6      	; 0x1016 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x32>
    1010:	cf 01       	movw	r24, r30
    1012:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN11SwitchClass16longWaitCompleteEv>
    1016:	cf 5f       	subi	r28, 0xFF	; 255
    1018:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <_ZN11SwitchClass1iE>
    101c:	c9 17       	cp	r28, r25
    101e:	50 f3       	brcs	.-44     	; 0xff4 <_ZN11SwitchClass20callAllOjectLongWaitEh+0x10>
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <__vector_1>:
}

ISR(INT0_vect){
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
    1030:	2f 93       	push	r18
    1032:	3f 93       	push	r19
    1034:	4f 93       	push	r20
    1036:	5f 93       	push	r21
    1038:	6f 93       	push	r22
    103a:	7f 93       	push	r23
    103c:	8f 93       	push	r24
    103e:	9f 93       	push	r25
    1040:	af 93       	push	r26
    1042:	bf 93       	push	r27
    1044:	ef 93       	push	r30
    1046:	ff 93       	push	r31
	Switch.PinBuffer[0] = PINB;
    1048:	83 b1       	in	r24, 0x03	; 3
    104a:	ec ee       	ldi	r30, 0xEC	; 236
    104c:	f1 e0       	ldi	r31, 0x01	; 1
    104e:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    1050:	86 b1       	in	r24, 0x06	; 6
    1052:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    1054:	89 b1       	in	r24, 0x09	; 9
    1056:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1058:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1062:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("0 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    1066:	ff 91       	pop	r31
    1068:	ef 91       	pop	r30
    106a:	bf 91       	pop	r27
    106c:	af 91       	pop	r26
    106e:	9f 91       	pop	r25
    1070:	8f 91       	pop	r24
    1072:	7f 91       	pop	r23
    1074:	6f 91       	pop	r22
    1076:	5f 91       	pop	r21
    1078:	4f 91       	pop	r20
    107a:	3f 91       	pop	r19
    107c:	2f 91       	pop	r18
    107e:	0f 90       	pop	r0
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	0f 90       	pop	r0
    1084:	1f 90       	pop	r1
    1086:	18 95       	reti

00001088 <__vector_2>:

ISR(INT1_vect){
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	11 24       	eor	r1, r1
    1092:	2f 93       	push	r18
    1094:	3f 93       	push	r19
    1096:	4f 93       	push	r20
    1098:	5f 93       	push	r21
    109a:	6f 93       	push	r22
    109c:	7f 93       	push	r23
    109e:	8f 93       	push	r24
    10a0:	9f 93       	push	r25
    10a2:	af 93       	push	r26
    10a4:	bf 93       	push	r27
    10a6:	ef 93       	push	r30
    10a8:	ff 93       	push	r31
	wakeUp();
    10aa:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    10b4:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("1 S");
	#endif 
	allowSleep(0);
	Switch.pinStateChanged();
}
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	bf 91       	pop	r27
    10be:	af 91       	pop	r26
    10c0:	9f 91       	pop	r25
    10c2:	8f 91       	pop	r24
    10c4:	7f 91       	pop	r23
    10c6:	6f 91       	pop	r22
    10c8:	5f 91       	pop	r21
    10ca:	4f 91       	pop	r20
    10cc:	3f 91       	pop	r19
    10ce:	2f 91       	pop	r18
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti

000010da <__vector_3>:

ISR(PCINT0_vect){
    10da:	1f 92       	push	r1
    10dc:	0f 92       	push	r0
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	0f 92       	push	r0
    10e2:	11 24       	eor	r1, r1
    10e4:	2f 93       	push	r18
    10e6:	3f 93       	push	r19
    10e8:	4f 93       	push	r20
    10ea:	5f 93       	push	r21
    10ec:	6f 93       	push	r22
    10ee:	7f 93       	push	r23
    10f0:	8f 93       	push	r24
    10f2:	9f 93       	push	r25
    10f4:	af 93       	push	r26
    10f6:	bf 93       	push	r27
    10f8:	ef 93       	push	r30
    10fa:	ff 93       	push	r31
	Switch.PinStateChangePtr(PORT_B);
    10fc:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <_ZN11SwitchClass17PinStateChangePtrE>
    1100:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <_ZN11SwitchClass17PinStateChangePtrE+0x1>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	09 95       	icall
	Switch.PinBuffer[0] = PINB;
    1108:	83 b1       	in	r24, 0x03	; 3
    110a:	ec ee       	ldi	r30, 0xEC	; 236
    110c:	f1 e0       	ldi	r31, 0x01	; 1
    110e:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    1110:	86 b1       	in	r24, 0x06	; 6
    1112:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    1114:	89 b1       	in	r24, 0x09	; 9
    1116:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1118:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1122:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT B");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <__vector_4>:

ISR(PCINT1_vect){
    1148:	1f 92       	push	r1
    114a:	0f 92       	push	r0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	0f 92       	push	r0
    1150:	11 24       	eor	r1, r1
    1152:	2f 93       	push	r18
    1154:	3f 93       	push	r19
    1156:	4f 93       	push	r20
    1158:	5f 93       	push	r21
    115a:	6f 93       	push	r22
    115c:	7f 93       	push	r23
    115e:	8f 93       	push	r24
    1160:	9f 93       	push	r25
    1162:	af 93       	push	r26
    1164:	bf 93       	push	r27
    1166:	ef 93       	push	r30
    1168:	ff 93       	push	r31
	Switch.PinStateChangePtr(PORT_C);
    116a:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <_ZN11SwitchClass17PinStateChangePtrE>
    116e:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <_ZN11SwitchClass17PinStateChangePtrE+0x1>
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	09 95       	icall
	Switch.PinBuffer[0] = PINB;
    1176:	83 b1       	in	r24, 0x03	; 3
    1178:	ec ee       	ldi	r30, 0xEC	; 236
    117a:	f1 e0       	ldi	r31, 0x01	; 1
    117c:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    117e:	86 b1       	in	r24, 0x06	; 6
    1180:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    1182:	89 b1       	in	r24, 0x09	; 9
    1184:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    1186:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    1190:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT C");
	#endif	
	allowSleep(0);
	Switch.pinStateChanged();
}
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	bf 91       	pop	r27
    119a:	af 91       	pop	r26
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	7f 91       	pop	r23
    11a2:	6f 91       	pop	r22
    11a4:	5f 91       	pop	r21
    11a6:	4f 91       	pop	r20
    11a8:	3f 91       	pop	r19
    11aa:	2f 91       	pop	r18
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <__vector_5>:

ISR(PCINT2_vect){
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	2f 93       	push	r18
    11c2:	3f 93       	push	r19
    11c4:	4f 93       	push	r20
    11c6:	5f 93       	push	r21
    11c8:	6f 93       	push	r22
    11ca:	7f 93       	push	r23
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	af 93       	push	r26
    11d2:	bf 93       	push	r27
    11d4:	ef 93       	push	r30
    11d6:	ff 93       	push	r31
	Switch.PinStateChangePtr(PORT_D);
    11d8:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <_ZN11SwitchClass17PinStateChangePtrE>
    11dc:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <_ZN11SwitchClass17PinStateChangePtrE+0x1>
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	09 95       	icall
	Switch.PinBuffer[0] = PINB;
    11e4:	83 b1       	in	r24, 0x03	; 3
    11e6:	ec ee       	ldi	r30, 0xEC	; 236
    11e8:	f1 e0       	ldi	r31, 0x01	; 1
    11ea:	80 83       	st	Z, r24
	Switch.PinBuffer[1] = PINC;
    11ec:	86 b1       	in	r24, 0x06	; 6
    11ee:	81 83       	std	Z+1, r24	; 0x01
	Switch.PinBuffer[2] = PIND;
    11f0:	89 b1       	in	r24, 0x09	; 9
    11f2:	82 83       	std	Z+2, r24	; 0x02
	wakeUp();
    11f4:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z6wakeUpv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
	S = (SwitchState & (1 << PinNumber));
}

void SwitchClass::pinStateChanged(){
	//printChar('s');
	Switch.callAllProcessStateChange();
    11fe:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN11SwitchClass25callAllProcessStateChangeEv>
	#ifdef DEBUG_SWITCH
	printStringCRNL("PinChanged -> PORT D");
	#endif
	allowSleep(0);
	Switch.pinStateChanged();
}
    1202:	ff 91       	pop	r31
    1204:	ef 91       	pop	r30
    1206:	bf 91       	pop	r27
    1208:	af 91       	pop	r26
    120a:	9f 91       	pop	r25
    120c:	8f 91       	pop	r24
    120e:	7f 91       	pop	r23
    1210:	6f 91       	pop	r22
    1212:	5f 91       	pop	r21
    1214:	4f 91       	pop	r20
    1216:	3f 91       	pop	r19
    1218:	2f 91       	pop	r18
    121a:	0f 90       	pop	r0
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	0f 90       	pop	r0
    1220:	1f 90       	pop	r1
    1222:	18 95       	reti

00001224 <_ZN10TimerClass5beginEv>:
	}
}

uint8_t TimerClass::getTimerID(){
	return Timer_ID;
}
    1224:	60 e4       	ldi	r22, 0x40	; 64
    1226:	7f e1       	ldi	r23, 0x1F	; 31
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z11Init_CTC_T1hj>
    122e:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <_ZN10TimerClass1iE>
    1232:	08 95       	ret

00001234 <_ZN10TimerClass15initializeTimerEv>:
    1234:	dc 01       	movw	r26, r24
    1236:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <_ZN10TimerClass1iE>
    123a:	e9 2f       	mov	r30, r25
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	ee 0f       	add	r30, r30
    1240:	ff 1f       	adc	r31, r31
    1242:	ea 5f       	subi	r30, 0xFA	; 250
    1244:	fd 4f       	sbci	r31, 0xFD	; 253
    1246:	b1 83       	std	Z+1, r27	; 0x01
    1248:	a0 83       	st	Z, r26
    124a:	15 96       	adiw	r26, 0x05	; 5
    124c:	9c 93       	st	X, r25
    124e:	9f 5f       	subi	r25, 0xFF	; 255
    1250:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <_ZN10TimerClass1iE>
    1254:	08 95       	ret

00001256 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>:
    1256:	fc 01       	movw	r30, r24
    1258:	71 83       	std	Z+1, r23	; 0x01
    125a:	60 83       	st	Z, r22
    125c:	73 83       	std	Z+3, r23	; 0x03
    125e:	62 83       	std	Z+2, r22	; 0x02
    1260:	35 87       	std	Z+13, r19	; 0x0d
    1262:	24 87       	std	Z+12, r18	; 0x0c
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	83 87       	std	Z+11, r24	; 0x0b
    1268:	44 83       	std	Z+4, r20	; 0x04
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    1270:	08 95       	ret

00001272 <_ZN10TimerClass18resetCallbackTimerEv>:
    1272:	fc 01       	movw	r30, r24
    1274:	13 86       	std	Z+11, r1	; 0x0b
    1276:	11 82       	std	Z+1, r1	; 0x01
    1278:	10 82       	st	Z, r1
    127a:	08 95       	ret

0000127c <_ZN10TimerClass15getCallBackTimeEv>:
    127c:	fc 01       	movw	r30, r24
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	93 81       	ldd	r25, Z+3	; 0x03
    1282:	20 81       	ld	r18, Z
    1284:	31 81       	ldd	r19, Z+1	; 0x01
    1286:	82 1b       	sub	r24, r18
    1288:	93 0b       	sbc	r25, r19
    128a:	08 95       	ret

0000128c <_ZN10TimerClass7setTimeEj>:
    128c:	fc 01       	movw	r30, r24
    128e:	77 83       	std	Z+7, r23	; 0x07
    1290:	66 83       	std	Z+6, r22	; 0x06
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	82 87       	std	Z+10, r24	; 0x0a
    1296:	71 87       	std	Z+9, r23	; 0x09
    1298:	60 87       	std	Z+8, r22	; 0x08
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10allowSleepb>
    12a0:	08 95       	ret

000012a2 <_ZN10TimerClass7getTimeEv>:
    12a2:	fc 01       	movw	r30, r24
    12a4:	80 85       	ldd	r24, Z+8	; 0x08
    12a6:	91 85       	ldd	r25, Z+9	; 0x09
    12a8:	26 81       	ldd	r18, Z+6	; 0x06
    12aa:	37 81       	ldd	r19, Z+7	; 0x07
    12ac:	82 1b       	sub	r24, r18
    12ae:	93 0b       	sbc	r25, r19
    12b0:	08 95       	ret

000012b2 <_ZN10TimerClass10resetTimerEv>:
    12b2:	fc 01       	movw	r30, r24
    12b4:	17 82       	std	Z+7, r1	; 0x07
    12b6:	16 82       	std	Z+6, r1	; 0x06
    12b8:	12 86       	std	Z+10, r1	; 0x0a
    12ba:	08 95       	ret

000012bc <_ZN10TimerClass11milliPassedEv>:
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	ec 01       	movw	r28, r24
    12c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12c4:	88 23       	and	r24, r24
    12c6:	e1 f0       	breq	.+56     	; 0x1300 <_ZN10TimerClass11milliPassedEv+0x44>
    12c8:	88 81       	ld	r24, Y
    12ca:	99 81       	ldd	r25, Y+1	; 0x01
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	29 f0       	breq	.+10     	; 0x12da <_ZN10TimerClass11milliPassedEv+0x1e>
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	99 83       	std	Y+1, r25	; 0x01
    12d4:	88 83       	st	Y, r24
    12d6:	89 2b       	or	r24, r25
    12d8:	99 f4       	brne	.+38     	; 0x1300 <_ZN10TimerClass11milliPassedEv+0x44>
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	29 f4       	brne	.+10     	; 0x12ea <_ZN10TimerClass11milliPassedEv+0x2e>
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	9b 81       	ldd	r25, Y+3	; 0x03
    12e4:	99 83       	std	Y+1, r25	; 0x01
    12e6:	88 83       	st	Y, r24
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <_ZN10TimerClass11milliPassedEv+0x38>
    12ea:	81 11       	cpse	r24, r1
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <_ZN10TimerClass11milliPassedEv+0x38>
    12ee:	1b 86       	std	Y+11, r1	; 0x0b
    12f0:	19 82       	std	Y+1, r1	; 0x01
    12f2:	18 82       	st	Y, r1
    12f4:	ec 85       	ldd	r30, Y+12	; 0x0c
    12f6:	fd 85       	ldd	r31, Y+13	; 0x0d
    12f8:	30 97       	sbiw	r30, 0x00	; 0
    12fa:	11 f0       	breq	.+4      	; 0x1300 <_ZN10TimerClass11milliPassedEv+0x44>
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	09 95       	icall
    1300:	8a 85       	ldd	r24, Y+10	; 0x0a
    1302:	88 23       	and	r24, r24
    1304:	51 f0       	breq	.+20     	; 0x131a <_ZN10TimerClass11milliPassedEv+0x5e>
    1306:	8e 81       	ldd	r24, Y+6	; 0x06
    1308:	9f 81       	ldd	r25, Y+7	; 0x07
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	29 f0       	breq	.+10     	; 0x1318 <_ZN10TimerClass11milliPassedEv+0x5c>
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	9f 83       	std	Y+7, r25	; 0x07
    1312:	8e 83       	std	Y+6, r24	; 0x06
    1314:	89 2b       	or	r24, r25
    1316:	09 f4       	brne	.+2      	; 0x131a <_ZN10TimerClass11milliPassedEv+0x5e>
    1318:	1a 86       	std	Y+10, r1	; 0x0a
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <_ZN10TimerClass19callAllTimerObjectsEv>:
    1320:	cf 93       	push	r28
    1322:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <_ZN10TimerClass1iE>
    1326:	88 23       	and	r24, r24
    1328:	91 f0       	breq	.+36     	; 0x134e <_ZN10TimerClass19callAllTimerObjectsEv+0x2e>
    132a:	c0 e0       	ldi	r28, 0x00	; 0
    132c:	ec 2f       	mov	r30, r28
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	ea 5f       	subi	r30, 0xFA	; 250
    1336:	fd 4f       	sbci	r31, 0xFD	; 253
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	11 f0       	breq	.+4      	; 0x1344 <_ZN10TimerClass19callAllTimerObjectsEv+0x24>
    1340:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN10TimerClass11milliPassedEv>
    1344:	cf 5f       	subi	r28, 0xFF	; 255
    1346:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <_ZN10TimerClass1iE>
    134a:	c8 17       	cp	r28, r24
    134c:	78 f3       	brcs	.-34     	; 0x132c <_ZN10TimerClass19callAllTimerObjectsEv+0xc>
    134e:	cf 91       	pop	r28
    1350:	08 95       	ret

00001352 <__vector_11>:



ISR(TIMER1_COMPA_vect){
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
	milliHappened();
    1374:	0e 94 ef 01 	call	0x3de	; 0x3de <_Z13milliHappenedv>
	Timer.Time += 1;
    1378:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <_ZN10TimerClass4TimeE>
    137c:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <_ZN10TimerClass4TimeE+0x1>
    1380:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_ZN10TimerClass4TimeE+0x2>
    1384:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_ZN10TimerClass4TimeE+0x3>
    1388:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <_ZN10TimerClass4TimeE+0x4>
    138c:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <_ZN10TimerClass4TimeE+0x5>
    1390:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZN10TimerClass4TimeE+0x6>
    1394:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <_ZN10TimerClass4TimeE+0x7>
    1398:	a1 e0       	ldi	r26, 0x01	; 1
    139a:	0e 94 99 0b 	call	0x1732	; 0x1732 <__adddi3_s8>
    139e:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <_ZN10TimerClass4TimeE>
    13a2:	30 93 ff 01 	sts	0x01FF, r19	; 0x8001ff <_ZN10TimerClass4TimeE+0x1>
    13a6:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <_ZN10TimerClass4TimeE+0x2>
    13aa:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <_ZN10TimerClass4TimeE+0x3>
    13ae:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <_ZN10TimerClass4TimeE+0x4>
    13b2:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <_ZN10TimerClass4TimeE+0x5>
    13b6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_ZN10TimerClass4TimeE+0x6>
    13ba:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <_ZN10TimerClass4TimeE+0x7>
	Timer.callAllTimerObjects();
    13be:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN10TimerClass19callAllTimerObjectsEv>
}
    13c2:	ff 91       	pop	r31
    13c4:	ef 91       	pop	r30
    13c6:	bf 91       	pop	r27
    13c8:	af 91       	pop	r26
    13ca:	9f 91       	pop	r25
    13cc:	8f 91       	pop	r24
    13ce:	7f 91       	pop	r23
    13d0:	6f 91       	pop	r22
    13d2:	5f 91       	pop	r21
    13d4:	4f 91       	pop	r20
    13d6:	3f 91       	pop	r19
    13d8:	2f 91       	pop	r18
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <_Z14printSomethingh>:
		}
	}
}

void printSomething(uint8_t Timer_ID){
	Timer1_Flag = true;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <Timer1_Flag>
    13ea:	08 95       	ret

000013ec <_Z15portStateChangeh>:
}

void portStateChange(uint8_t PortNo){
    13ec:	cf 93       	push	r28
    13ee:	c8 2f       	mov	r28, r24
	printStringCRNL("Pin state changed");
    13f0:	8d e5       	ldi	r24, 0x5D	; 93
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	0e 94 14 03 	call	0x628	; 0x628 <_Z15printStringCRNLPKc>
	if(PortNo == PORT_C){
    13f8:	c1 30       	cpi	r28, 0x01	; 1
    13fa:	49 f4       	brne	.+18     	; 0x140e <_Z15portStateChangeh+0x22>
		setPinState(PORT_C, 2, getPinState(PORT_C, 0));
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	0e 94 a8 01 	call	0x350	; 0x350 <_Z11getPinStatehh>
    1404:	48 2f       	mov	r20, r24
    1406:	62 e0       	ldi	r22, 0x02	; 2
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	0e 94 06 01 	call	0x20c	; 0x20c <_Z11setPinStatehhb>
	}
}
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <_Z8runSetupv>:

void runSetup(){
	
	USART_Init(MYUBRR);
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 cb 01 	call	0x396	; 0x396 <_Z10USART_Initj>
	Init_CTC_T1(2,2000);
    141a:	60 ed       	ldi	r22, 0xD0	; 208
    141c:	77 e0       	ldi	r23, 0x07	; 7
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z11Init_CTC_T1hj>
	setPinDirection(PORT_C, 2, OUTPUT);
    1424:	41 e0       	ldi	r20, 0x01	; 1
    1426:	62 e0       	ldi	r22, 0x02	; 2
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	0e 94 57 01 	call	0x2ae	; 0x2ae <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 2, OUTPUT);
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	62 e0       	ldi	r22, 0x02	; 2
    1432:	82 e0       	ldi	r24, 0x02	; 2
    1434:	0e 94 57 01 	call	0x2ae	; 0x2ae <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 3, OUTPUT);
    1438:	41 e0       	ldi	r20, 0x01	; 1
    143a:	63 e0       	ldi	r22, 0x03	; 3
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	0e 94 57 01 	call	0x2ae	; 0x2ae <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 4, INPUT);
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	64 e0       	ldi	r22, 0x04	; 4
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	0e 94 57 01 	call	0x2ae	; 0x2ae <_Z15setPinDirectionhhb>
	setPinDirection(PORT_D, 5, OUTPUT);
    144c:	41 e0       	ldi	r20, 0x01	; 1
    144e:	65 e0       	ldi	r22, 0x05	; 5
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	0e 94 57 01 	call	0x2ae	; 0x2ae <_Z15setPinDirectionhhb>
	setPinState(PORT_D, 2, LOW);
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	62 e0       	ldi	r22, 0x02	; 2
    145a:	82 e0       	ldi	r24, 0x02	; 2
    145c:	0e 94 06 01 	call	0x20c	; 0x20c <_Z11setPinStatehhb>
	setPinState(PORT_D, 3, LOW);
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	63 e0       	ldi	r22, 0x03	; 3
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	0e 94 06 01 	call	0x20c	; 0x20c <_Z11setPinStatehhb>
	setPinState(PORT_D, 4, LOW);
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	64 e0       	ldi	r22, 0x04	; 4
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	0e 94 06 01 	call	0x20c	; 0x20c <_Z11setPinStatehhb>
	setPinState(PORT_D, 5, LOW);
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	65 e0       	ldi	r22, 0x05	; 5
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	0e 94 06 01 	call	0x20c	; 0x20c <_Z11setPinStatehhb>
	setPinState(PORT_C, 2, LOW);
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	62 e0       	ldi	r22, 0x02	; 2
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	0e 94 06 01 	call	0x20c	; 0x20c <_Z11setPinStatehhb>
	setPinDirection(PORT_C, 0, INPUT);
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	0e 94 57 01 	call	0x2ae	; 0x2ae <_Z15setPinDirectionhhb>
	SPI_MasterInit();
    1492:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14SPI_MasterInitv>
    1496:	08 95       	ret

00001498 <main>:
void portStateChange(uint8_t PortNo);
volatile uint8_t SPIdata;
volatile bool newSPIData, Timer1_Flag;
uint8_t Socket, State;
int main(void)
{
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	67 97       	sbiw	r28, 0x17	; 23
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
	runSetup();
    14ac:	0e 94 09 0a 	call	0x1412	; 0x1412 <_Z8runSetupv>
    14b0:	2f ef       	ldi	r18, 0xFF	; 255
    14b2:	84 e3       	ldi	r24, 0x34	; 52
    14b4:	9c e0       	ldi	r25, 0x0C	; 12
    14b6:	21 50       	subi	r18, 0x01	; 1
    14b8:	80 40       	sbci	r24, 0x00	; 0
    14ba:	90 40       	sbci	r25, 0x00	; 0
    14bc:	e1 f7       	brne	.-8      	; 0x14b6 <main+0x1e>
    14be:	00 c0       	rjmp	.+0      	; 0x14c0 <main+0x28>
    14c0:	00 00       	nop
	_delay_ms(500);
	CE_D = 1;
    14c2:	38 9a       	sbi	0x07, 0	; 7
	CE = 0;
    14c4:	40 98       	cbi	0x08, 0	; 8
	Notify(PSTR("Powering on..."));
    14c6:	8d e4       	ldi	r24, 0x4D	; 77
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z6NotifyPKc>
	//while(1);
	NRF24L01 Radio(1,1,0);
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	61 e0       	ldi	r22, 0x01	; 1
    14d4:	ce 01       	movw	r24, r28
    14d6:	0f 96       	adiw	r24, 0x0f	; 15
    14d8:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN8NRF24L01C1Ehhb>
	//printHexNumber(Radio.readSPIRegister(0x17,1),1);
	initSPISlave();
    14dc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z12initSPISlavev>
	enableSPIInterrupt(true);
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z18enableSPIInterruptb>
	sei();
    14e6:	78 94       	sei
	TimerClass Timer1;
	SwitchClass S;
	S.begin();
    14e8:	0e 94 49 06 	call	0xc92	; 0xc92 <_ZN11SwitchClass5beginEv>
	S.callOnPinStateChange(portStateChange);
    14ec:	86 ef       	ldi	r24, 0xF6	; 246
    14ee:	99 e0       	ldi	r25, 0x09	; 9
    14f0:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZN11SwitchClass20callOnPinStateChangeEPFvhE>
	Timer1.begin();
    14f4:	0e 94 12 09 	call	0x1224	; 0x1224 <_ZN10TimerClass5beginEv>
	Timer1.initializeTimer();
    14f8:	ce 01       	movw	r24, r28
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN10TimerClass15initializeTimerEv>
	Timer1.setCallBackTime(100, 1, printSomething);
    1500:	22 ef       	ldi	r18, 0xF2	; 242
    1502:	39 e0       	ldi	r19, 0x09	; 9
    1504:	41 e0       	ldi	r20, 0x01	; 1
    1506:	64 e6       	ldi	r22, 0x64	; 100
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	ce 01       	movw	r24, r28
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	0e 94 2b 09 	call	0x1256	; 0x1256 <_ZN10TimerClass15setCallBackTimeEjhPFvhE>
	Notify(PSTR("Done"));
    1512:	88 e4       	ldi	r24, 0x48	; 72
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z6NotifyPKc>
	while (1)
	{
		if(newSPIData)	{
    151a:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <newSPIData>
    151e:	88 23       	and	r24, r24
    1520:	09 f4       	brne	.+2      	; 0x1524 <main+0x8c>
    1522:	49 c0       	rjmp	.+146    	; 0x15b6 <main+0x11e>
			newSPIData = false;
    1524:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <newSPIData>
			if(SPIdata != 0xAA){
    1528:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <SPIdata>
    152c:	8a 3a       	cpi	r24, 0xAA	; 170
    152e:	61 f1       	breq	.+88     	; 0x1588 <main+0xf0>
				Socket = SPIdata & 0xF0;
    1530:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <SPIdata>
    1534:	60 7f       	andi	r22, 0xF0	; 240
				Socket = Socket >> 4;
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	75 95       	asr	r23
    153a:	67 95       	ror	r22
    153c:	75 95       	asr	r23
    153e:	67 95       	ror	r22
    1540:	75 95       	asr	r23
    1542:	67 95       	ror	r22
    1544:	75 95       	asr	r23
    1546:	67 95       	ror	r22
    1548:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <Socket>
				State = SPIdata & 0x0F;
    154c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <SPIdata>
    1550:	8f 70       	andi	r24, 0x0F	; 15
    1552:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <State>
				setPinState(PORT_D, Socket + 1, State);
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	81 11       	cpse	r24, r1
    155a:	01 c0       	rjmp	.+2      	; 0x155e <main+0xc6>
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	6f 5f       	subi	r22, 0xFF	; 255
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	0e 94 06 01 	call	0x20c	; 0x20c <_Z11setPinStatehhb>
				printStringCRNL("Command received: ");
    1566:	8f e6       	ldi	r24, 0x6F	; 111
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	0e 94 14 03 	call	0x628	; 0x628 <_Z15printStringCRNLPKc>
				printHexNumber(SPIdata, 1);
    156e:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <SPIdata>
    1572:	01 e0       	ldi	r16, 0x01	; 1
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z14printHexNumberyh>
    1586:	17 c0       	rjmp	.+46     	; 0x15b6 <main+0x11e>
			}
			else{
				enableSPIInterrupt(false);
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z18enableSPIInterruptb>
				SPI_MasterInit();
    158e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14SPI_MasterInitv>
				printHexNumber(Radio.readSPIRegister(0x17,1),1);
    1592:	41 e0       	ldi	r20, 0x01	; 1
    1594:	67 e1       	ldi	r22, 0x17	; 23
    1596:	ce 01       	movw	r24, r28
    1598:	0f 96       	adiw	r24, 0x0f	; 15
    159a:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8NRF24L0115readSPIRegisterEhh>
    159e:	01 e0       	ldi	r16, 0x01	; 1
    15a0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z14printHexNumberyh>
				printStringCRNL("T");
    15a4:	82 e8       	ldi	r24, 0x82	; 130
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	0e 94 14 03 	call	0x628	; 0x628 <_Z15printStringCRNLPKc>
				initSPISlave();
    15ac:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z12initSPISlavev>
				enableSPIInterrupt(true);
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z18enableSPIInterruptb>
			}
		}
		enableSPIInterrupt(false);
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z18enableSPIInterruptb>
		SPI_MasterInit();
    15bc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14SPI_MasterInitv>
		if(Timer1_Flag){
    15c0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <Timer1_Flag>
    15c4:	88 23       	and	r24, r24
    15c6:	09 f4       	brne	.+2      	; 0x15ca <main+0x132>
    15c8:	a8 cf       	rjmp	.-176    	; 0x151a <main+0x82>
			Timer1_Flag = false;
    15ca:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <Timer1_Flag>
			enableSPIInterrupt(false);
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z18enableSPIInterruptb>
			SPI_MasterInit();
    15d4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14SPI_MasterInitv>
			Radio.printInfo();
    15d8:	ce 01       	movw	r24, r28
    15da:	0f 96       	adiw	r24, 0x0f	; 15
    15dc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN8NRF24L019printInfoEv>
    15e0:	9c cf       	rjmp	.-200    	; 0x151a <main+0x82>

000015e2 <__vector_17>:
	//enableSPIInterrupt(true);
	//sei();
}

ISR(SPI_STC_vect)
{															//Grab the data byte from the SPI Data Register (SPDR)
    15e2:	1f 92       	push	r1
    15e4:	0f 92       	push	r0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	0f 92       	push	r0
    15ea:	11 24       	eor	r1, r1
    15ec:	8f 93       	push	r24
	SPIdata = SPDR;                                         //Put the byte into a temporary variable for processin                                       //process the data byte and put it back into the SPDR for the Master to read it
    15ee:	8e b5       	in	r24, 0x2e	; 46
    15f0:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <SPIdata>
	newSPIData = true;                                       //Set the Flag as TRUE
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <newSPIData>
}
    15fa:	8f 91       	pop	r24
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0
    1602:	1f 90       	pop	r1
    1604:	18 95       	reti

00001606 <__umoddi3>:
    1606:	68 94       	set
    1608:	01 c0       	rjmp	.+2      	; 0x160c <__udivdi3_umoddi3>

0000160a <__udivdi3>:
    160a:	e8 94       	clt

0000160c <__udivdi3_umoddi3>:
    160c:	8f 92       	push	r8
    160e:	9f 92       	push	r9
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	0e 94 11 0b 	call	0x1622	; 0x1622 <__udivmod64>
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	9f 90       	pop	r9
    161e:	8f 90       	pop	r8
    1620:	08 95       	ret

00001622 <__udivmod64>:
    1622:	88 24       	eor	r8, r8
    1624:	99 24       	eor	r9, r9
    1626:	f4 01       	movw	r30, r8
    1628:	e4 01       	movw	r28, r8
    162a:	b0 e4       	ldi	r27, 0x40	; 64
    162c:	9f 93       	push	r25
    162e:	aa 27       	eor	r26, r26
    1630:	9a 15       	cp	r25, r10
    1632:	8b 04       	cpc	r8, r11
    1634:	9c 04       	cpc	r9, r12
    1636:	ed 05       	cpc	r30, r13
    1638:	fe 05       	cpc	r31, r14
    163a:	cf 05       	cpc	r28, r15
    163c:	d0 07       	cpc	r29, r16
    163e:	a1 07       	cpc	r26, r17
    1640:	98 f4       	brcc	.+38     	; 0x1668 <__udivmod64+0x46>
    1642:	ad 2f       	mov	r26, r29
    1644:	dc 2f       	mov	r29, r28
    1646:	cf 2f       	mov	r28, r31
    1648:	fe 2f       	mov	r31, r30
    164a:	e9 2d       	mov	r30, r9
    164c:	98 2c       	mov	r9, r8
    164e:	89 2e       	mov	r8, r25
    1650:	98 2f       	mov	r25, r24
    1652:	87 2f       	mov	r24, r23
    1654:	76 2f       	mov	r23, r22
    1656:	65 2f       	mov	r22, r21
    1658:	54 2f       	mov	r21, r20
    165a:	43 2f       	mov	r20, r19
    165c:	32 2f       	mov	r19, r18
    165e:	22 27       	eor	r18, r18
    1660:	b8 50       	subi	r27, 0x08	; 8
    1662:	31 f7       	brne	.-52     	; 0x1630 <__udivmod64+0xe>
    1664:	bf 91       	pop	r27
    1666:	27 c0       	rjmp	.+78     	; 0x16b6 <__udivmod64+0x94>
    1668:	1b 2e       	mov	r1, r27
    166a:	bf 91       	pop	r27
    166c:	bb 27       	eor	r27, r27
    166e:	22 0f       	add	r18, r18
    1670:	33 1f       	adc	r19, r19
    1672:	44 1f       	adc	r20, r20
    1674:	55 1f       	adc	r21, r21
    1676:	66 1f       	adc	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	88 1f       	adc	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	88 1c       	adc	r8, r8
    1680:	99 1c       	adc	r9, r9
    1682:	ee 1f       	adc	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	cc 1f       	adc	r28, r28
    1688:	dd 1f       	adc	r29, r29
    168a:	aa 1f       	adc	r26, r26
    168c:	bb 1f       	adc	r27, r27
    168e:	8a 14       	cp	r8, r10
    1690:	9b 04       	cpc	r9, r11
    1692:	ec 05       	cpc	r30, r12
    1694:	fd 05       	cpc	r31, r13
    1696:	ce 05       	cpc	r28, r14
    1698:	df 05       	cpc	r29, r15
    169a:	a0 07       	cpc	r26, r16
    169c:	b1 07       	cpc	r27, r17
    169e:	48 f0       	brcs	.+18     	; 0x16b2 <__udivmod64+0x90>
    16a0:	8a 18       	sub	r8, r10
    16a2:	9b 08       	sbc	r9, r11
    16a4:	ec 09       	sbc	r30, r12
    16a6:	fd 09       	sbc	r31, r13
    16a8:	ce 09       	sbc	r28, r14
    16aa:	df 09       	sbc	r29, r15
    16ac:	a0 0b       	sbc	r26, r16
    16ae:	b1 0b       	sbc	r27, r17
    16b0:	21 60       	ori	r18, 0x01	; 1
    16b2:	1a 94       	dec	r1
    16b4:	e1 f6       	brne	.-72     	; 0x166e <__udivmod64+0x4c>
    16b6:	2e f4       	brtc	.+10     	; 0x16c2 <__udivmod64+0xa0>
    16b8:	94 01       	movw	r18, r8
    16ba:	af 01       	movw	r20, r30
    16bc:	be 01       	movw	r22, r28
    16be:	cd 01       	movw	r24, r26
    16c0:	00 0c       	add	r0, r0
    16c2:	08 95       	ret

000016c4 <__ashldi3>:
    16c4:	0f 93       	push	r16
    16c6:	08 30       	cpi	r16, 0x08	; 8
    16c8:	90 f0       	brcs	.+36     	; 0x16ee <__ashldi3+0x2a>
    16ca:	98 2f       	mov	r25, r24
    16cc:	87 2f       	mov	r24, r23
    16ce:	76 2f       	mov	r23, r22
    16d0:	65 2f       	mov	r22, r21
    16d2:	54 2f       	mov	r21, r20
    16d4:	43 2f       	mov	r20, r19
    16d6:	32 2f       	mov	r19, r18
    16d8:	22 27       	eor	r18, r18
    16da:	08 50       	subi	r16, 0x08	; 8
    16dc:	f4 cf       	rjmp	.-24     	; 0x16c6 <__ashldi3+0x2>
    16de:	22 0f       	add	r18, r18
    16e0:	33 1f       	adc	r19, r19
    16e2:	44 1f       	adc	r20, r20
    16e4:	55 1f       	adc	r21, r21
    16e6:	66 1f       	adc	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	88 1f       	adc	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 95       	dec	r16
    16f0:	b2 f7       	brpl	.-20     	; 0x16de <__ashldi3+0x1a>
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <__ashrdi3>:
    16f6:	97 fb       	bst	r25, 7
    16f8:	10 f8       	bld	r1, 0

000016fa <__lshrdi3>:
    16fa:	16 94       	lsr	r1
    16fc:	00 08       	sbc	r0, r0
    16fe:	0f 93       	push	r16
    1700:	08 30       	cpi	r16, 0x08	; 8
    1702:	98 f0       	brcs	.+38     	; 0x172a <__lshrdi3+0x30>
    1704:	08 50       	subi	r16, 0x08	; 8
    1706:	23 2f       	mov	r18, r19
    1708:	34 2f       	mov	r19, r20
    170a:	45 2f       	mov	r20, r21
    170c:	56 2f       	mov	r21, r22
    170e:	67 2f       	mov	r22, r23
    1710:	78 2f       	mov	r23, r24
    1712:	89 2f       	mov	r24, r25
    1714:	90 2d       	mov	r25, r0
    1716:	f4 cf       	rjmp	.-24     	; 0x1700 <__lshrdi3+0x6>
    1718:	05 94       	asr	r0
    171a:	97 95       	ror	r25
    171c:	87 95       	ror	r24
    171e:	77 95       	ror	r23
    1720:	67 95       	ror	r22
    1722:	57 95       	ror	r21
    1724:	47 95       	ror	r20
    1726:	37 95       	ror	r19
    1728:	27 95       	ror	r18
    172a:	0a 95       	dec	r16
    172c:	aa f7       	brpl	.-22     	; 0x1718 <__lshrdi3+0x1e>
    172e:	0f 91       	pop	r16
    1730:	08 95       	ret

00001732 <__adddi3_s8>:
    1732:	00 24       	eor	r0, r0
    1734:	a7 fd       	sbrc	r26, 7
    1736:	00 94       	com	r0
    1738:	2a 0f       	add	r18, r26
    173a:	30 1d       	adc	r19, r0
    173c:	40 1d       	adc	r20, r0
    173e:	50 1d       	adc	r21, r0
    1740:	60 1d       	adc	r22, r0
    1742:	70 1d       	adc	r23, r0
    1744:	80 1d       	adc	r24, r0
    1746:	90 1d       	adc	r25, r0
    1748:	08 95       	ret

0000174a <__cmpdi2>:
    174a:	2a 15       	cp	r18, r10
    174c:	3b 05       	cpc	r19, r11
    174e:	4c 05       	cpc	r20, r12
    1750:	5d 05       	cpc	r21, r13
    1752:	6e 05       	cpc	r22, r14
    1754:	7f 05       	cpc	r23, r15
    1756:	80 07       	cpc	r24, r16
    1758:	91 07       	cpc	r25, r17
    175a:	08 95       	ret

0000175c <__cmpdi2_s8>:
    175c:	00 24       	eor	r0, r0
    175e:	a7 fd       	sbrc	r26, 7
    1760:	00 94       	com	r0
    1762:	2a 17       	cp	r18, r26
    1764:	30 05       	cpc	r19, r0
    1766:	40 05       	cpc	r20, r0
    1768:	50 05       	cpc	r21, r0
    176a:	60 05       	cpc	r22, r0
    176c:	70 05       	cpc	r23, r0
    176e:	80 05       	cpc	r24, r0
    1770:	90 05       	cpc	r25, r0
    1772:	08 95       	ret

00001774 <_exit>:
    1774:	f8 94       	cli

00001776 <__stop_program>:
    1776:	ff cf       	rjmp	.-2      	; 0x1776 <__stop_program>
